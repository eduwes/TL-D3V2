<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\obj\firmware.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\obj\firmware.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060960: Last Updated: Thu Mar 31 11:14:19 2022
<BR><P>
<H3>Maximum Stack Usage =          0 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>

<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[99]">IRQ133_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[99]">IRQ133_Handler</a><BR>
 <LI><a href="#[247]">TFilamentMonitor&lang;RunoutResponseDebounced, FilamentSensorSwitch&rang;::run()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[18d]">Planner::synchronize()</a><BR>
 <LI><a href="#[419]">Stepper::set_axis_position(AxisEnum, const int&)</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[18d]">Planner::synchronize()</a><BR>
 <LI><a href="#[415]">Planner::buffer_sync_block()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[246]">idle()</a><BR>
 <LI><a href="#[192]">sync_plan_position()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1f9]">Planner::set_position_mm(float, float, float, float)</a><BR>
 <LI><a href="#[202]">do_blocking_move_to(float, float, float, float)</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[18d]">Planner::synchronize()</a><BR>
 <LI><a href="#[234]">Planner::buffer_line(float, float, float, float, float, unsigned char, float)</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1f9]">Planner::set_position_mm(float, float, float, float)</a><BR>
 <LI><a href="#[406]">Planner::_buffer_steps(const XYZEval&lang;int&rang;&, float, unsigned char, float)</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[246]">idle()</a><BR>
 <LI><a href="#[2fc]">GcodeSuite::M504()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[335]">MarlinSettings::validate()</a><BR>
 <LI><a href="#[333]">MarlinSettings::reset()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[38d]">MarlinSettings::postprocess()</a><BR>
 <LI><a href="#[2f9]">GcodeSuite::M501()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[332]">MarlinSettings::load()</a><BR>
 <LI><a href="#[2ad]">GcodeSuite::T(signed char)</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1b0]">GcodeSuite::process_subcommands_now(char*)</a><BR>
 <LI><a href="#[18c]">tool_change(unsigned char, bool)</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[18d]">Planner::synchronize()</a><BR>
 <LI><a href="#[191]">dualx_tool_change(unsigned char, bool&)</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[18d]">Planner::synchronize()</a><BR>
 <LI><a href="#[2f5]">GcodeSuite::M400()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[18d]">Planner::synchronize()</a><BR>
 <LI><a href="#[1c9]">quickstop_stepper()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[18d]">Planner::synchronize()</a><BR>
 <LI><a href="#[319]">Planner::finish_and_disable()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[246]">idle()</a><BR>
 <LI><a href="#[2dc]">GcodeSuite::M18_M84()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[18d]">Planner::synchronize()</a><BR>
 <LI><a href="#[2de]">GcodeSuite::M92()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[31b]">Planner::refresh_positioning()</a><BR>
 <LI><a href="#[2b3]">GcodeSuite::G28()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1b0]">GcodeSuite::process_subcommands_now(char*)</a><BR>
 <LI><a href="#[1e1]">my_sleep(float)</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[18d]">Planner::synchronize()</a><BR>
 <LI><a href="#[1b8]">do_homing_move(AxisEnum, float, float, bool)</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[18d]">Planner::synchronize()</a><BR>
 <LI><a href="#[2fe]">GcodeSuite::M605()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[18d]">Planner::synchronize()</a><BR>
 <LI><a href="#[2b4]">GcodeSuite::G34()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[18d]">Planner::synchronize()</a><BR>
 <LI><a href="#[326]">Temperature::wait_for_bed(bool)</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[246]">idle()</a><BR>
 <LI><a href="#[322]">Temperature::wait_for_hotend(unsigned char, bool)</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[246]">idle()</a><BR>
 <LI><a href="#[305]">GcodeSuite::process_subcommands_now_P(const char*)</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2a8]">GcodeSuite::process_parsed_command(bool)</a><BR>
 <LI><a href="#[2c4]">GcodeSuite::M32()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[18d]">Planner::synchronize()</a><BR>
 <LI><a href="#[274]">CardReader::printListing(SdFile, const char*)</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[274]">CardReader::printListing(SdFile, const char*)</a><BR>
 <LI><a href="#[2b1]">GcodeSuite::G4()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[18d]">Planner::synchronize()</a><BR>
 <LI><a href="#[30c]">GcodeSuite::dwell(unsigned)</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[246]">idle()</a><BR>
 <LI><a href="#[259]">plan_arc(const XYZEval&lang;float&rang;&, const XYval&lang;float&rang;&, bool, unsigned char)</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[246]">idle()</a><BR>
 <LI><a href="#[233]">dual_x_carriage_unpark()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[18d]">Planner::synchronize()</a><BR>
 <LI><a href="#[1e8]">manage_inactivity(bool)</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[18d]">Planner::synchronize()</a><BR>
 <LI><a href="#[289]">CardReader::fileHasFinished()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[18d]">Planner::synchronize()</a><BR>
 <LI><a href="#[1cd]">GCodeQueue::enqueue_one_now(const char*)</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[246]">idle()</a><BR>
 <LI><a href="#[1f2]">DWN_MessageHandler(bool)</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[18d]">Planner::synchronize()</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[af]">&lang;Func48&rang;</a> from cardreader.o(i.<Func48>) referenced from cardreader.o(i.__sti___14_cardreader_cpp_M23_STR)
 <LI><a href="#[e]">BusFault_Handler</a> from hc32f46x_interrupts.o(i.BusFault_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[11]">DebugMon_Handler</a> from hc32f46x_interrupts.o(i.DebugMon_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[ab]">Dma1Btc3_IrqHandler</a> from adc.o(i.Dma1Btc3_IrqHandler) referenced from adc.o(i._ZN22_INTERNAL_5_adc_c_adc116adc_DMAIrqConfigEv)
 <LI><a href="#[c]">HardFault_Handler</a> from hc32f46x_interrupts.o(i.HardFault_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[14]">IRQ000_Handler</a> from hc32f46x_interrupts.o(i.IRQ000_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[15]">IRQ001_Handler</a> from hc32f46x_interrupts.o(i.IRQ001_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[16]">IRQ002_Handler</a> from hc32f46x_interrupts.o(i.IRQ002_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[17]">IRQ003_Handler</a> from hc32f46x_interrupts.o(i.IRQ003_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[18]">IRQ004_Handler</a> from hc32f46x_interrupts.o(i.IRQ004_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[19]">IRQ005_Handler</a> from hc32f46x_interrupts.o(i.IRQ005_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[1a]">IRQ006_Handler</a> from hc32f46x_interrupts.o(i.IRQ006_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[1b]">IRQ007_Handler</a> from hc32f46x_interrupts.o(i.IRQ007_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[1c]">IRQ008_Handler</a> from hc32f46x_interrupts.o(i.IRQ008_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[1d]">IRQ009_Handler</a> from hc32f46x_interrupts.o(i.IRQ009_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[1e]">IRQ010_Handler</a> from hc32f46x_interrupts.o(i.IRQ010_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[1f]">IRQ011_Handler</a> from hc32f46x_interrupts.o(i.IRQ011_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[20]">IRQ012_Handler</a> from hc32f46x_interrupts.o(i.IRQ012_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[21]">IRQ013_Handler</a> from hc32f46x_interrupts.o(i.IRQ013_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[22]">IRQ014_Handler</a> from hc32f46x_interrupts.o(i.IRQ014_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[23]">IRQ015_Handler</a> from hc32f46x_interrupts.o(i.IRQ015_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[24]">IRQ016_Handler</a> from hc32f46x_interrupts.o(i.IRQ016_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[25]">IRQ017_Handler</a> from hc32f46x_interrupts.o(i.IRQ017_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[26]">IRQ018_Handler</a> from hc32f46x_interrupts.o(i.IRQ018_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[27]">IRQ019_Handler</a> from hc32f46x_interrupts.o(i.IRQ019_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[28]">IRQ020_Handler</a> from hc32f46x_interrupts.o(i.IRQ020_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[29]">IRQ021_Handler</a> from hc32f46x_interrupts.o(i.IRQ021_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[2a]">IRQ022_Handler</a> from hc32f46x_interrupts.o(i.IRQ022_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[2b]">IRQ023_Handler</a> from hc32f46x_interrupts.o(i.IRQ023_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[2c]">IRQ024_Handler</a> from hc32f46x_interrupts.o(i.IRQ024_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[2d]">IRQ025_Handler</a> from hc32f46x_interrupts.o(i.IRQ025_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[2e]">IRQ026_Handler</a> from hc32f46x_interrupts.o(i.IRQ026_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[2f]">IRQ027_Handler</a> from hc32f46x_interrupts.o(i.IRQ027_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[30]">IRQ028_Handler</a> from hc32f46x_interrupts.o(i.IRQ028_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[31]">IRQ029_Handler</a> from hc32f46x_interrupts.o(i.IRQ029_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[32]">IRQ030_Handler</a> from hc32f46x_interrupts.o(i.IRQ030_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[33]">IRQ031_Handler</a> from hc32f46x_interrupts.o(i.IRQ031_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[34]">IRQ032_Handler</a> from hc32f46x_interrupts.o(i.IRQ032_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[35]">IRQ033_Handler</a> from hc32f46x_interrupts.o(i.IRQ033_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[36]">IRQ034_Handler</a> from hc32f46x_interrupts.o(i.IRQ034_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[37]">IRQ035_Handler</a> from hc32f46x_interrupts.o(i.IRQ035_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[38]">IRQ036_Handler</a> from hc32f46x_interrupts.o(i.IRQ036_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[39]">IRQ037_Handler</a> from hc32f46x_interrupts.o(i.IRQ037_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[3a]">IRQ038_Handler</a> from hc32f46x_interrupts.o(i.IRQ038_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[3b]">IRQ039_Handler</a> from hc32f46x_interrupts.o(i.IRQ039_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[3c]">IRQ040_Handler</a> from hc32f46x_interrupts.o(i.IRQ040_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[3d]">IRQ041_Handler</a> from hc32f46x_interrupts.o(i.IRQ041_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[3e]">IRQ042_Handler</a> from hc32f46x_interrupts.o(i.IRQ042_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[3f]">IRQ043_Handler</a> from hc32f46x_interrupts.o(i.IRQ043_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[40]">IRQ044_Handler</a> from hc32f46x_interrupts.o(i.IRQ044_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[41]">IRQ045_Handler</a> from hc32f46x_interrupts.o(i.IRQ045_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[42]">IRQ046_Handler</a> from hc32f46x_interrupts.o(i.IRQ046_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[43]">IRQ047_Handler</a> from hc32f46x_interrupts.o(i.IRQ047_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[44]">IRQ048_Handler</a> from hc32f46x_interrupts.o(i.IRQ048_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[45]">IRQ049_Handler</a> from hc32f46x_interrupts.o(i.IRQ049_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[46]">IRQ050_Handler</a> from hc32f46x_interrupts.o(i.IRQ050_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[47]">IRQ051_Handler</a> from hc32f46x_interrupts.o(i.IRQ051_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[48]">IRQ052_Handler</a> from hc32f46x_interrupts.o(i.IRQ052_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[49]">IRQ053_Handler</a> from hc32f46x_interrupts.o(i.IRQ053_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[4a]">IRQ054_Handler</a> from hc32f46x_interrupts.o(i.IRQ054_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[4b]">IRQ055_Handler</a> from hc32f46x_interrupts.o(i.IRQ055_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[4c]">IRQ056_Handler</a> from hc32f46x_interrupts.o(i.IRQ056_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[4d]">IRQ057_Handler</a> from hc32f46x_interrupts.o(i.IRQ057_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[4e]">IRQ058_Handler</a> from hc32f46x_interrupts.o(i.IRQ058_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[4f]">IRQ059_Handler</a> from hc32f46x_interrupts.o(i.IRQ059_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[50]">IRQ060_Handler</a> from hc32f46x_interrupts.o(i.IRQ060_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[51]">IRQ061_Handler</a> from hc32f46x_interrupts.o(i.IRQ061_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[52]">IRQ062_Handler</a> from hc32f46x_interrupts.o(i.IRQ062_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[53]">IRQ063_Handler</a> from hc32f46x_interrupts.o(i.IRQ063_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[54]">IRQ064_Handler</a> from hc32f46x_interrupts.o(i.IRQ064_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[55]">IRQ065_Handler</a> from hc32f46x_interrupts.o(i.IRQ065_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[56]">IRQ066_Handler</a> from hc32f46x_interrupts.o(i.IRQ066_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[57]">IRQ067_Handler</a> from hc32f46x_interrupts.o(i.IRQ067_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[58]">IRQ068_Handler</a> from hc32f46x_interrupts.o(i.IRQ068_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[59]">IRQ069_Handler</a> from hc32f46x_interrupts.o(i.IRQ069_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[5a]">IRQ070_Handler</a> from hc32f46x_interrupts.o(i.IRQ070_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[5b]">IRQ071_Handler</a> from hc32f46x_interrupts.o(i.IRQ071_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[5c]">IRQ072_Handler</a> from hc32f46x_interrupts.o(i.IRQ072_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[5d]">IRQ073_Handler</a> from hc32f46x_interrupts.o(i.IRQ073_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[5e]">IRQ074_Handler</a> from hc32f46x_interrupts.o(i.IRQ074_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[5f]">IRQ075_Handler</a> from hc32f46x_interrupts.o(i.IRQ075_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[60]">IRQ076_Handler</a> from hc32f46x_interrupts.o(i.IRQ076_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[61]">IRQ077_Handler</a> from hc32f46x_interrupts.o(i.IRQ077_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[62]">IRQ078_Handler</a> from hc32f46x_interrupts.o(i.IRQ078_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[63]">IRQ079_Handler</a> from hc32f46x_interrupts.o(i.IRQ079_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[64]">IRQ080_Handler</a> from hc32f46x_interrupts.o(i.IRQ080_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[65]">IRQ081_Handler</a> from hc32f46x_interrupts.o(i.IRQ081_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[66]">IRQ082_Handler</a> from hc32f46x_interrupts.o(i.IRQ082_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[67]">IRQ083_Handler</a> from hc32f46x_interrupts.o(i.IRQ083_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[68]">IRQ084_Handler</a> from hc32f46x_interrupts.o(i.IRQ084_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[69]">IRQ085_Handler</a> from hc32f46x_interrupts.o(i.IRQ085_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[6a]">IRQ086_Handler</a> from hc32f46x_interrupts.o(i.IRQ086_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[6b]">IRQ087_Handler</a> from hc32f46x_interrupts.o(i.IRQ087_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[6c]">IRQ088_Handler</a> from hc32f46x_interrupts.o(i.IRQ088_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[6d]">IRQ089_Handler</a> from hc32f46x_interrupts.o(i.IRQ089_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[6e]">IRQ090_Handler</a> from hc32f46x_interrupts.o(i.IRQ090_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[6f]">IRQ091_Handler</a> from hc32f46x_interrupts.o(i.IRQ091_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[70]">IRQ092_Handler</a> from hc32f46x_interrupts.o(i.IRQ092_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[71]">IRQ093_Handler</a> from hc32f46x_interrupts.o(i.IRQ093_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[72]">IRQ094_Handler</a> from hc32f46x_interrupts.o(i.IRQ094_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[73]">IRQ095_Handler</a> from hc32f46x_interrupts.o(i.IRQ095_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[74]">IRQ096_Handler</a> from hc32f46x_interrupts.o(i.IRQ096_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[75]">IRQ097_Handler</a> from hc32f46x_interrupts.o(i.IRQ097_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[76]">IRQ098_Handler</a> from hc32f46x_interrupts.o(i.IRQ098_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[77]">IRQ099_Handler</a> from hc32f46x_interrupts.o(i.IRQ099_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[78]">IRQ100_Handler</a> from hc32f46x_interrupts.o(i.IRQ100_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[79]">IRQ101_Handler</a> from hc32f46x_interrupts.o(i.IRQ101_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[7a]">IRQ102_Handler</a> from hc32f46x_interrupts.o(i.IRQ102_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[7b]">IRQ103_Handler</a> from hc32f46x_interrupts.o(i.IRQ103_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[7c]">IRQ104_Handler</a> from hc32f46x_interrupts.o(i.IRQ104_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[7d]">IRQ105_Handler</a> from hc32f46x_interrupts.o(i.IRQ105_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[7e]">IRQ106_Handler</a> from hc32f46x_interrupts.o(i.IRQ106_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[7f]">IRQ107_Handler</a> from hc32f46x_interrupts.o(i.IRQ107_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[80]">IRQ108_Handler</a> from hc32f46x_interrupts.o(i.IRQ108_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[81]">IRQ109_Handler</a> from hc32f46x_interrupts.o(i.IRQ109_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[82]">IRQ110_Handler</a> from hc32f46x_interrupts.o(i.IRQ110_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[83]">IRQ111_Handler</a> from hc32f46x_interrupts.o(i.IRQ111_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[84]">IRQ112_Handler</a> from hc32f46x_interrupts.o(i.IRQ112_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[85]">IRQ113_Handler</a> from hc32f46x_interrupts.o(i.IRQ113_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[86]">IRQ114_Handler</a> from hc32f46x_interrupts.o(i.IRQ114_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[87]">IRQ115_Handler</a> from hc32f46x_interrupts.o(i.IRQ115_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[88]">IRQ116_Handler</a> from hc32f46x_interrupts.o(i.IRQ116_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[89]">IRQ117_Handler</a> from hc32f46x_interrupts.o(i.IRQ117_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[8a]">IRQ118_Handler</a> from hc32f46x_interrupts.o(i.IRQ118_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[8b]">IRQ119_Handler</a> from hc32f46x_interrupts.o(i.IRQ119_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[8c]">IRQ120_Handler</a> from hc32f46x_interrupts.o(i.IRQ120_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[8d]">IRQ121_Handler</a> from hc32f46x_interrupts.o(i.IRQ121_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[8e]">IRQ122_Handler</a> from hc32f46x_interrupts.o(i.IRQ122_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[8f]">IRQ123_Handler</a> from hc32f46x_interrupts.o(i.IRQ123_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[90]">IRQ124_Handler</a> from hc32f46x_interrupts.o(i.IRQ124_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[91]">IRQ125_Handler</a> from hc32f46x_interrupts.o(i.IRQ125_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[92]">IRQ126_Handler</a> from hc32f46x_interrupts.o(i.IRQ126_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[93]">IRQ127_Handler</a> from hc32f46x_interrupts.o(i.IRQ127_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[94]">IRQ128_Handler</a> from hc32f46x_interrupts.o(i.IRQ128_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[95]">IRQ129_Handler</a> from hc32f46x_interrupts.o(i.IRQ129_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[96]">IRQ130_Handler</a> from hc32f46x_interrupts.o(i.IRQ130_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[97]">IRQ131_Handler</a> from hc32f46x_interrupts.o(i.IRQ131_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[98]">IRQ132_Handler</a> from hc32f46x_interrupts.o(i.IRQ132_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[99]">IRQ133_Handler</a> from startup_hc32f460petb.o(.text) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[9a]">IRQ134_Handler</a> from startup_hc32f460petb.o(.text) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[9b]">IRQ135_Handler</a> from startup_hc32f460petb.o(.text) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[9c]">IRQ136_Handler</a> from hc32f46x_interrupts.o(i.IRQ136_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[9d]">IRQ137_Handler</a> from hc32f46x_interrupts.o(i.IRQ137_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[9e]">IRQ138_Handler</a> from hc32f46x_interrupts.o(i.IRQ138_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[9f]">IRQ139_Handler</a> from hc32f46x_interrupts.o(i.IRQ139_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[a0]">IRQ140_Handler</a> from hc32f46x_interrupts.o(i.IRQ140_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[a1]">IRQ141_Handler</a> from hc32f46x_interrupts.o(i.IRQ141_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[a2]">IRQ142_Handler</a> from hc32f46x_interrupts.o(i.IRQ142_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[a3]">IRQ143_Handler</a> from hc32f46x_interrupts.o(i.IRQ143_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[d]">MemManage_Handler</a> from hc32f46x_interrupts.o(i.MemManage_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[b]">NMI_Handler</a> from hc32f46x_interrupts.o(i.NMI_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[12]">PendSV_Handler</a> from hc32f46x_interrupts.o(i.PendSV_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[a]">Reset_Handler</a> from startup_hc32f460petb.o(.text) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[10]">SVC_Handler</a> from hc32f46x_interrupts.o(i.SVC_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[13]">SysTick_Handler</a> from hc32f46x_interrupts.o(i.SysTick_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[a5]">SystemInit</a> from system_hc32f460petb.o(i.SystemInit) referenced from startup_hc32f460petb.o(.text)
 <LI><a href="#[f]">UsageFault_Handler</a> from hc32f46x_interrupts.o(i.UsageFault_Handler) referenced from startup_hc32f460petb.o(RESET)
 <LI><a href="#[b3]">stepTC_Handler()</a> from board_tim0.o(i._Z14stepTC_Handlerv) referenced from board_tim0.o(i.setup_time2B)
 <LI><a href="#[b2]">tempTC_Handler()</a> from board_tim0.o(i._Z14tempTC_Handlerv) referenced from board_tim0.o(i.setup_time2A)
 <LI><a href="#[b7]">Usart1RxIrqCallback()</a> from usart.o(i._Z19Usart1RxIrqCallbackv) referenced from usart.o(i.usart_enable)
 <LI><a href="#[bf]">Usart1TxIrqCallback()</a> from usart.o(i._Z19Usart1TxIrqCallbackv) referenced from usart.o(i.usart_enable)
 <LI><a href="#[b6]">Usart2RxIrqCallback()</a> from usart.o(i._Z19Usart2RxIrqCallbackv) referenced from usart.o(i.usart_enable)
 <LI><a href="#[be]">Usart2TxIrqCallback()</a> from usart.o(i._Z19Usart2TxIrqCallbackv) referenced from usart.o(i.usart_enable)
 <LI><a href="#[b5]">Usart3RxIrqCallback()</a> from usart.o(i._Z19Usart3RxIrqCallbackv) referenced from usart.o(i.usart_enable)
 <LI><a href="#[bd]">Usart3TxIrqCallback()</a> from usart.o(i._Z19Usart3TxIrqCallbackv) referenced from usart.o(i.usart_enable)
 <LI><a href="#[b4]">Usart4RxIrqCallback()</a> from usart.o(i._Z19Usart4RxIrqCallbackv) referenced from usart.o(i.usart_enable)
 <LI><a href="#[bc]">Usart4TxIrqCallback()</a> from usart.o(i._Z19Usart4TxIrqCallbackv) referenced from usart.o(i.usart_enable)
 <LI><a href="#[bb]">Usart1ErrIrqCallback()</a> from usart.o(i._Z20Usart1ErrIrqCallbackv) referenced from usart.o(i.usart_enable)
 <LI><a href="#[ba]">Usart2ErrIrqCallback()</a> from usart.o(i._Z20Usart2ErrIrqCallbackv) referenced from usart.o(i.usart_enable)
 <LI><a href="#[b9]">Usart3ErrIrqCallback()</a> from usart.o(i._Z20Usart3ErrIrqCallbackv) referenced from usart.o(i.usart_enable)
 <LI><a href="#[b8]">Usart4ErrIrqCallback()</a> from usart.o(i._Z20Usart4ErrIrqCallbackv) referenced from usart.o(i.usart_enable)
 <LI><a href="#[c3]">Usart1TxCmpltIrqCallback()</a> from usart.o(i._Z24Usart1TxCmpltIrqCallbackv) referenced from usart.o(i.usart_enable)
 <LI><a href="#[c2]">Usart2TxCmpltIrqCallback()</a> from usart.o(i._Z24Usart2TxCmpltIrqCallbackv) referenced from usart.o(i.usart_enable)
 <LI><a href="#[c1]">Usart3TxCmpltIrqCallback()</a> from usart.o(i._Z24Usart3TxCmpltIrqCallbackv) referenced from usart.o(i.usart_enable)
 <LI><a href="#[c0]">Usart4TxCmpltIrqCallback()</a> from usart.o(i._Z24Usart4TxCmpltIrqCallbackv) referenced from usart.o(i.usart_enable)
 <LI><a href="#[ce]">premain()</a> from main.o(i._Z7premainv) referenced from main.o(.init_array.00101)
 <LI><a href="#[b0]">Temperature::tr_state_machine_t::tr_state_machine_t()</a> from temperature.o(i._ZN11Temperature18tr_state_machine_tC1Ev) referenced from temperature.o(i.__sti___15_temperature_cpp_ca4fe824)
 <LI><a href="#[c9]">HardwareSerial::read()</a> from hardwareserial.o(i._ZN14HardwareSerial4readEv) referenced from hardwareserial.o(.constdata__ZTV14HardwareSerial)
 <LI><a href="#[ca]">HardwareSerial::flush()</a> from hardwareserial.o(i._ZN14HardwareSerial5flushEv) referenced from hardwareserial.o(.constdata__ZTV14HardwareSerial)
 <LI><a href="#[c5]">HardwareSerial::write(unsigned char)</a> from hardwareserial.o(i._ZN14HardwareSerial5writeEh) referenced from hardwareserial.o(.constdata__ZTV14HardwareSerial)
 <LI><a href="#[c8]">HardwareSerial::available()</a> from hardwareserial.o(i._ZN14HardwareSerial9availableEv) referenced from hardwareserial.o(.constdata__ZTV14HardwareSerial)
 <LI><a href="#[cd]">DiskIODriver_SDIO::writeBlock(unsigned, const unsigned char*)</a> from cardreader.o(i._ZN17DiskIODriver_SDIO10writeBlockEjPKh) referenced from cardreader.o(.constdata__ZTV17DiskIODriver_SDIO)
 <LI><a href="#[cb]">DiskIODriver_SDIO::init(unsigned char, signed char)</a> from cardreader.o(i._ZN17DiskIODriver_SDIO4initEha) referenced from cardreader.o(.constdata__ZTV17DiskIODriver_SDIO)
 <LI><a href="#[cc]">DiskIODriver_SDIO::readBlock(unsigned, unsigned char*)</a> from cardreader.o(i._ZN17DiskIODriver_SDIO9readBlockEjPh) referenced from cardreader.o(.constdata__ZTV17DiskIODriver_SDIO)
 <LI><a href="#[b1]">[local to adc_c]::adc_default_config(adc_dev*)</a> from adc.o(i._ZN22_INTERNAL_5_adc_c_adc118adc_default_configEP7adc_dev) referenced from adc.o(i.setup_adcs)
 <LI><a href="#[c6]">Print::write(const char*)</a> from print.o(i._ZN5Print5writeEPKc) referenced from hardwareserial.o(.constdata__ZTV14HardwareSerial)
 <LI><a href="#[c6]">Print::write(const char*)</a> from print.o(i._ZN5Print5writeEPKc) referenced from print.o(.constdata__ZTV5Print)
 <LI><a href="#[c6]">Print::write(const char*)</a> from print.o(i._ZN5Print5writeEPKc) referenced from hardwareserial.o(.constdata__ZTV6Stream)
 <LI><a href="#[c7]">Print::write(const void*, unsigned)</a> from print.o(i._ZN5Print5writeEPKvj) referenced from hardwareserial.o(.constdata__ZTV14HardwareSerial)
 <LI><a href="#[c7]">Print::write(const void*, unsigned)</a> from print.o(i._ZN5Print5writeEPKvj) referenced from print.o(.constdata__ZTV5Print)
 <LI><a href="#[c7]">Print::write(const void*, unsigned)</a> from print.o(i._ZN5Print5writeEPKvj) referenced from hardwareserial.o(.constdata__ZTV6Stream)
 <LI><a href="#[ae]">SdFile::SdFile()</a> from cardreader.o(i._ZN6SdFileC1Ev) referenced from cardreader.o(i.__sti___14_cardreader_cpp_M23_STR)
 <LI><a href="#[aa]">SdFile::~SdFile()</a> from cardreader.o(i._ZN6SdFileD1Ev) referenced from cardreader.o(i.<Func48>)
 <LI><a href="#[aa]">SdFile::~SdFile()</a> from cardreader.o(i._ZN6SdFileD1Ev) referenced from cardreader.o(i._ZN10CardReader10diveToFileEbRP6SdFilePKcb)
 <LI><a href="#[aa]">SdFile::~SdFile()</a> from cardreader.o(i._ZN6SdFileD1Ev) referenced from cardreader.o(i.__sti___14_cardreader_cpp_M23_STR)
 <LI><a href="#[c4]">__cxa_pure_virtual</a> from cxxabi-compat.o(i.__cxa_pure_virtual) referenced 13 times from cardreader.o(.constdata__ZTV12DiskIODriver)
 <LI><a href="#[c4]">__cxa_pure_virtual</a> from cxxabi-compat.o(i.__cxa_pure_virtual) referenced from print.o(.constdata__ZTV5Print)
 <LI><a href="#[c4]">__cxa_pure_virtual</a> from cxxabi-compat.o(i.__cxa_pure_virtual) referenced 5 times from hardwareserial.o(.constdata__ZTV6Stream)
 <LI><a href="#[c4]">__cxa_pure_virtual</a> from cxxabi-compat.o(i.__cxa_pure_virtual) referenced from ipaddress.o(.constdata__ZTV9Printable)
 <LI><a href="#[a6]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_hc32f460petb.o(.text)
 <LI><a href="#[d2]">__sti___11_planner_cpp_planner</a> from planner.o(i.__sti___11_planner_cpp_planner) referenced from planner.o(.init_array)
 <LI><a href="#[cf]">__sti___12_board_gpio_c_PIN_MAP</a> from board_gpio.o(i.__sti___12_board_gpio_c_PIN_MAP) referenced from board_gpio.o(.init_array)
 <LI><a href="#[d1]">__sti___12_endstops_cpp_endstops</a> from endstops.o(i.__sti___12_endstops_cpp_endstops) referenced from endstops.o(.init_array)
 <LI><a href="#[d5]">__sti___13_IPAddress_cpp_0fe1e075</a> from ipaddress.o(i.__sti___13_IPAddress_cpp_0fe1e075) referenced from ipaddress.o(.init_array)
 <LI><a href="#[d0]">__sti___14_MarlinCore_cpp_card</a> from marlincore.o(i.__sti___14_MarlinCore_cpp_card) referenced from marlincore.o(.init_array)
 <LI><a href="#[d4]">__sti___14_cardreader_cpp_M23_STR</a> from cardreader.o(i.__sti___14_cardreader_cpp_M23_STR) referenced from cardreader.o(.init_array)
 <LI><a href="#[d3]">__sti___15_temperature_cpp_ca4fe824</a> from temperature.o(i.__sti___15_temperature_cpp_ca4fe824) referenced from temperature.o(.init_array)
 <LI><a href="#[a8]">_sbackspace</a> from _sgetc.o(.text) referenced from strtod.o(.text)
 <LI><a href="#[a7]">_sgetc</a> from _sgetc.o(.text) referenced from strtod.o(.text)
 <LI><a href="#[ad]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0sprintf)
 <LI><a href="#[ac]">fputc</a> from hc32f46x_utility.o(i.fputc) referenced from printfa.o(i.__0printf)
 <LI><a href="#[a9]">isspace</a> from wstring.o(i.isspace) referenced from strtod.o(.text)
 <LI><a href="#[a4]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[a6]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(.text)
</UL>
<P><STRONG><a name="[d9]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[106]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[db]"></a>_main_cpp_init$empty</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, entry8a.o(.ARM.Collect$$$$00000009))
<BR><BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cpp_initialize__aeabi_
</UL>

<P><STRONG><a name="[dc]"></a>__rt_final_cpp$nonempty</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, entry10b.o(.ARM.Collect$$$$00000010))
<BR><BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
</UL>

<P><STRONG><a name="[a]"></a>Reset_Handler</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, startup_hc32f460petb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[99]"></a>IRQ133_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f460petb.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ133_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ133_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[9a]"></a>IRQ134_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f460petb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[9b]"></a>IRQ135_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f460petb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[10d]"></a>__aeabi_vec_dtor</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, aeabi_vec_dtor_noexceptions.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;&lang;Func48&rang;
</UL>

<P><STRONG><a name="[de]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, uldiv.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to hc32f46x_utility_c]::SetUartBaudrate(unsigned)
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to hc32f46x_usart_c]::SetClkSyncBaudrate(M4_USART_TypeDef*, unsigned)
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to hc32f46x_usart_c]::SetUartBaudrate(M4_USART_TypeDef*, unsigned)
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to hc32f46x_usart_c]::SetScBaudrate(M4_USART_TypeDef*, unsigned)
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::printNumber(unsigned long long, unsigned char)
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[e0]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2lz
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[ef]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[e5]"></a>tolower</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tolower.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::openAndPrintFile(const char*)
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcasecmp
</UL>

<P><STRONG><a name="[e2]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[e1]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::plr_is_pl()
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::tl_ls()
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlInitSetting()
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::open(SdBaseFile*, const unsigned char*, unsigned char)
</UL>

<P><STRONG><a name="[16d]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::save()
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::CardReader()
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_subcommands_now_P(const char*)
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::plr_recovery()
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::tl_ls()
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_command_gcode(long*)
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tenlog_status_update(bool)
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_command(int)
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DETECT_TLS()
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::addDirCluster()
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::buffer_sync_block()
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_hotend_offsets()
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_InitSPI1()
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to startup_cpp]::setup_SysClk()
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_systick
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sdioc_Class::Sdioc_Class(M4_SDIOC_TypeDef*)
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to adc_c]::adc_DMAInitConfig(adc_dev*)
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to adc_c]::adc_setclk()
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sd_card_c]::DmaSdiocTxConfig(M4_DMA_TypeDef*, en_dma_channel, M4_SDIOC_TypeDef*, unsigned char*, unsigned short)
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sd_card_c]::DmaSdiocRxConfig(M4_DMA_TypeDef*, en_dma_channel, M4_SDIOC_TypeDef*, unsigned char*, unsigned short)
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sd_card_c]::SdCardSetSpeed(stc_sd_handle*)
</UL>

<P><STRONG><a name="[e3]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[278]"></a>strcat</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, strcat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::openAndPrintFile(const char*)
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::printListing(SdFile, const char*)
</UL>

<P><STRONG><a name="[2a3]"></a>strstr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, strstr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::advance()
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::get_serial_commands()
</UL>

<P><STRONG><a name="[231]"></a>strncpy</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, strncpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TJCPauseResumePrinting(bool, int)
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::openAndPrintFile(const char*)
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::diveToFile(bool, SdFile*&, const char*, bool)
</UL>

<P><STRONG><a name="[268]"></a>strchr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, strchr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_subcommands_now(char*)
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::strchr(char*, int)
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_subcommands_now_P(const char*)
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::diveToFile(bool, SdFile*&, const char*, bool)
</UL>

<P><STRONG><a name="[16f]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::plr_is_pl()
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TlIsPLR()
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::write_command(char*)
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_subcommands_now_P(const char*)
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;homing_needed_error(unsigned char)
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWN_Text(long, int, const char*, bool)
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DETECT_TLS()
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdFile::write(const char*)
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::openAndPrintFile(const char*)
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::printListing(SdFile, const char*)
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::write(const char*)
</UL>

<P><STRONG><a name="[34e]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, memcmp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::open(SdBaseFile*, const unsigned char*, unsigned char)
</UL>

<P><STRONG><a name="[277]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::RingBuffer::enqueue(const char*, bool)
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::printListing(SdFile, const char*)
</UL>

<P><STRONG><a name="[3a1]"></a>strncmp</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, strncmp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::_load()
</UL>

<P><STRONG><a name="[2a4]"></a>strrchr</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, strrchr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::get_serial_commands()
</UL>

<P><STRONG><a name="[e4]"></a>strcasecmp</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, strcasecmp.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tolower
</UL>
<BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::selectByName(SdFile, const char*)
</UL>

<P><STRONG><a name="[e6]"></a>strtol</STRONG> (Thumb, 112 bytes, Stack size 0 bytes, strtol.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::ushortval(char, unsigned short)
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M221()
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M220()
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::value_long()
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::get_serial_commands()
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::value_celsius()
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M26()
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M24()
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M110()
</UL>

<P><STRONG><a name="[ea]"></a>strtoul</STRONG> (Thumb, 114 bytes, Stack size 0 bytes, strtoul.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M205()
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G4()
</UL>

<P><STRONG><a name="[d8]"></a>__cpp_initialize__aeabi_</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, cpp_init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_cpp_init$empty
</UL>

<P><STRONG><a name="[eb]"></a>__aeabi_atexit</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, aeabi_atexit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ddtor_pointer_addr
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::diveToFile(bool, SdFile*&, const char*, bool)
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___14_cardreader_cpp_M23_STR
</UL>

<P><STRONG><a name="[ee]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::printFloat(double, unsigned char)
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[f2]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[f3]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::printFloat(double, unsigned char)
</UL>

<P><STRONG><a name="[f4]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 0 bytes, dmul.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_command_dwn()
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::printFloat(double, unsigned char)
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frexp
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[f5]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 0 bytes, ddiv.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::plr_recovery()
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::printFloat(double, unsigned char)
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[f6]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, dflti.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_command_dwn()
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::printFloat(double, unsigned char)
</UL>

<P><STRONG><a name="[f7]"></a>__aeabi_ui2d</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, dfltui.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::plr_recovery()
</UL>

<P><STRONG><a name="[f8]"></a>__aeabi_l2d</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, dfltl.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::printFloat(double, unsigned char)
</UL>

<P><STRONG><a name="[f9]"></a>__aeabi_d2iz</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, dfixi.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::printFloat(double, unsigned char)
</UL>

<P><STRONG><a name="[fa]"></a>__aeabi_d2uiz</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, dfixui.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_command_dwn()
</UL>

<P><STRONG><a name="[fb]"></a>__aeabi_d2lz</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, dfixl.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::printFloat(double, unsigned char)
</UL>

<P><STRONG><a name="[1b1]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::report(bool)
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void SERIAL_ECHO&lang;float&rang;(T1)
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M218()
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::plr_save(unsigned, short, short, short, short, float, float)
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::plr_recovery()
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TJCPauseResumePrinting(bool, int)
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_command_gcode(long*)
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_command_dwn()
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_filament(int, int)
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void SERIAL_PRINT&lang;float, int&rang;(T1, T2)
</UL>

<P><STRONG><a name="[22e]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_command_gcode(long*)
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp___mathlib_tofloat
</UL>

<P><STRONG><a name="[3eb]"></a>__aeabi_cdcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::printFloat(double, unsigned char)
</UL>

<P><STRONG><a name="[22d]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_command_gcode(long*)
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::printFloat(double, unsigned char)
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp___mathlib_tofloat
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[fc]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, d2f.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::plr_recovery()
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp___mathlib_tofloat
</UL>

<P><STRONG><a name="[44f]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[df]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2lz
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[e7]"></a>__rt_ctype_table</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ctype_o.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isspace
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[e8]"></a>_strtoul</STRONG> (Thumb, 158 bytes, Stack size 0 bytes, _strtoul.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[ff]"></a>__strtof_int</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, strtof.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtod_int
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_narrow
</UL>
<BR>[Called By]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_strtof
</UL>

<P><STRONG><a name="[ed]"></a>__rt_ddtor_pointer_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cpp_dtor.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>

<P><STRONG><a name="[dd]"></a>__cxa_finalize</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, cxa_finalize.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ddtor_pointer_addr
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_final_cpp$nonempty
</UL>

<P><STRONG><a name="[fd]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frnd
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ffix_r
</UL>

<P><STRONG><a name="[103]"></a>_frnd</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, frnd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_lroundf
</UL>

<P><STRONG><a name="[f1]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, depilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[f0]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 0 bytes, depilogue.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_l2d
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
</UL>

<P><STRONG><a name="[104]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[105]"></a>_ffix_r</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, ffixir.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_lroundf
</UL>

<P><STRONG><a name="[442]"></a>__ieee_status</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fpstat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp___mathlib_tofloat
</UL>

<P><STRONG><a name="[da]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[fe]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[100]"></a>__strtod_int</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, strtod.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_local_sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtof_int
</UL>

<P><STRONG><a name="[108]"></a>_scanf_real</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, scanf_fp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_local_sscanf
</UL>

<P><STRONG><a name="[10b]"></a>_scanf_really_real</STRONG> (Thumb, 556 bytes, Stack size 0 bytes, scanf_fp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[a7]"></a>_sgetc</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[a8]"></a>_sbackspace</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[298]"></a>__aeabi_memcpy</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, memmovea.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::enqueue_one_P(const char*)
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::process_injected_command_P()
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_subcommands_now_P(const char*)
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::write(const void*, unsigned short)
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::read(void*, unsigned short)
</UL>

<P><STRONG><a name="[26b]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memmovea.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::save()
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::ls()
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::cdroot()
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::selectFileByName(const char*)
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::printListing(SdFile, const char*)
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::diveToFile(bool, SdFile*&, const char*, bool)
</UL>

<P><STRONG><a name="[10a]"></a>__aeabi_ul2d</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, dfltul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[3cb]"></a>ADC_AddAdcChannel</STRONG> (Thumb, 172 bytes, Stack size 0 bytes, hc32f46x_adc.o(i.ADC_AddAdcChannel))
<BR><BR>[Called By]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to adc_c]::adc_channelchonfig(adc_dev*, en_pin_mode)
</UL>

<P><STRONG><a name="[3bd]"></a>ADC_Init</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, hc32f46x_adc.o(i.ADC_Init))
<BR><BR>[Called By]<UL><LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to adc_c]::adc_initconfig(adc_dev*)
</UL>

<P><STRONG><a name="[3cc]"></a>ADC_StartConvert</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hc32f46x_adc.o(i.ADC_StartConvert))
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to adc_c]::adc_default_config(adc_dev*)
</UL>

<P><STRONG><a name="[3c6]"></a>ADC_TriggerSrcCmd</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, hc32f46x_adc.o(i.ADC_TriggerSrcCmd))
<BR><BR>[Called By]<UL><LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to adc_c]::adc_TriggerConfig(adc_dev*, unsigned)
</UL>

<P><STRONG><a name="[e]"></a>BusFault_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.BusFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[3d5]"></a>CLK_GetClockFreq</STRONG> (Thumb, 282 bytes, Stack size 0 bytes, hc32f46x_clk.o(i.CLK_GetClockFreq))
<BR><BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_time2B
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_time2A
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to startup_cpp]::setup_SysClk()
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_systick
</UL>

<P><STRONG><a name="[10f]"></a>CLK_GetFlagStatus</STRONG> (Thumb, 114 bytes, Stack size 0 bytes, hc32f46x_clk.o(i.CLK_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_XtalCmd
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_UpllCmd
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_MpllCmd
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to startup_cpp]::setup_SysClk()
</UL>

<P><STRONG><a name="[3d4]"></a>CLK_GetSysClkSource</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hc32f46x_clk.o(i.CLK_GetSysClkSource))
<BR><BR>[Called By]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to startup_cpp]::setup_SysClk()
</UL>

<P><STRONG><a name="[10e]"></a>CLK_MpllCmd</STRONG> (Thumb, 134 bytes, Stack size 0 bytes, hc32f46x_clk.o(i.CLK_MpllCmd))
<BR><BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to startup_cpp]::setup_SysClk()
</UL>

<P><STRONG><a name="[3cf]"></a>CLK_MpllConfig</STRONG> (Thumb, 132 bytes, Stack size 0 bytes, hc32f46x_clk.o(i.CLK_MpllConfig))
<BR><BR>[Called By]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to startup_cpp]::setup_SysClk()
</UL>

<P><STRONG><a name="[3b9]"></a>CLK_SetPeriClkSource</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, hc32f46x_clk.o(i.CLK_SetPeriClkSource))
<BR><BR>[Called By]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to adc_c]::adc_setclk()
</UL>

<P><STRONG><a name="[3b7]"></a>CLK_SetPllSource</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, hc32f46x_clk.o(i.CLK_SetPllSource))
<BR><BR>[Called By]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to startup_cpp]::setup_SysClk()
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to adc_c]::adc_setclk()
</UL>

<P><STRONG><a name="[110]"></a>CLK_SetSysClkSource</STRONG> (Thumb, 196 bytes, Stack size 0 bytes, hc32f46x_clk.o(i.CLK_SetSysClkSource))
<BR><BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to startup_cpp]::setup_SysClk()
</UL>

<P><STRONG><a name="[3ce]"></a>CLK_SysClkConfig</STRONG> (Thumb, 216 bytes, Stack size 0 bytes, hc32f46x_clk.o(i.CLK_SysClkConfig))
<BR><BR>[Called By]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to startup_cpp]::setup_SysClk()
</UL>

<P><STRONG><a name="[112]"></a>CLK_UpllCmd</STRONG> (Thumb, 112 bytes, Stack size 0 bytes, hc32f46x_clk.o(i.CLK_UpllCmd))
<BR><BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to adc_c]::adc_setclk()
</UL>

<P><STRONG><a name="[3b8]"></a>CLK_UpllConfig</STRONG> (Thumb, 132 bytes, Stack size 0 bytes, hc32f46x_clk.o(i.CLK_UpllConfig))
<BR><BR>[Called By]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to adc_c]::adc_setclk()
</UL>

<P><STRONG><a name="[113]"></a>CLK_XtalCmd</STRONG> (Thumb, 180 bytes, Stack size 0 bytes, hc32f46x_clk.o(i.CLK_XtalCmd))
<BR><BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to startup_cpp]::setup_SysClk()
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to adc_c]::adc_setclk()
</UL>

<P><STRONG><a name="[3b6]"></a>CLK_XtalConfig</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, hc32f46x_clk.o(i.CLK_XtalConfig))
<BR><BR>[Called By]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to startup_cpp]::setup_SysClk()
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to adc_c]::adc_setclk()
</UL>

<P><STRONG><a name="[116]"></a>DMA_ChannelCfg</STRONG> (Thumb, 342 bytes, Stack size 0 bytes, hc32f46x_dmac.o(i.DMA_ChannelCfg))
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_InitChannel
</UL>

<P><STRONG><a name="[3c2]"></a>DMA_ChannelCmd</STRONG> (Thumb, 390 bytes, Stack size 0 bytes, hc32f46x_dmac.o(i.DMA_ChannelCmd))
<BR><BR>[Called By]<UL><LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to adc_c]::adc_DMAInitConfig(adc_dev*)
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sd_card_c]::DmaSdiocTxConfig(M4_DMA_TypeDef*, en_dma_channel, M4_SDIOC_TypeDef*, unsigned char*, unsigned short)
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sd_card_c]::DmaSdiocRxConfig(M4_DMA_TypeDef*, en_dma_channel, M4_SDIOC_TypeDef*, unsigned char*, unsigned short)
</UL>

<P><STRONG><a name="[3c3]"></a>DMA_ClearIrqFlag</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, hc32f46x_dmac.o(i.DMA_ClearIrqFlag))
<BR><BR>[Called By]<UL><LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to adc_c]::adc_DMAInitConfig(adc_dev*)
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sd_card_c]::DmaSdiocTxConfig(M4_DMA_TypeDef*, en_dma_channel, M4_SDIOC_TypeDef*, unsigned char*, unsigned short)
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sd_card_c]::DmaSdiocRxConfig(M4_DMA_TypeDef*, en_dma_channel, M4_SDIOC_TypeDef*, unsigned char*, unsigned short)
</UL>

<P><STRONG><a name="[115]"></a>DMA_Cmd</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hc32f46x_dmac.o(i.DMA_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_InitChannel
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to adc_c]::adc_DMAInitConfig(adc_dev*)
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sd_card_c]::DmaSdiocTxConfig(M4_DMA_TypeDef*, en_dma_channel, M4_SDIOC_TypeDef*, unsigned char*, unsigned short)
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sd_card_c]::DmaSdiocRxConfig(M4_DMA_TypeDef*, en_dma_channel, M4_SDIOC_TypeDef*, unsigned char*, unsigned short)
</UL>

<P><STRONG><a name="[114]"></a>DMA_InitChannel</STRONG> (Thumb, 342 bytes, Stack size 0 bytes, hc32f46x_dmac.o(i.DMA_InitChannel))
<BR><BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ChannelCfg
</UL>
<BR>[Called By]<UL><LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to adc_c]::adc_DMAInitConfig(adc_dev*)
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sd_card_c]::DmaSdiocTxConfig(M4_DMA_TypeDef*, en_dma_channel, M4_SDIOC_TypeDef*, unsigned char*, unsigned short)
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sd_card_c]::DmaSdiocRxConfig(M4_DMA_TypeDef*, en_dma_channel, M4_SDIOC_TypeDef*, unsigned char*, unsigned short)
</UL>

<P><STRONG><a name="[3c4]"></a>DMA_SetTriggerSrc</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, hc32f46x_dmac.o(i.DMA_SetTriggerSrc))
<BR><BR>[Called By]<UL><LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to adc_c]::adc_DMAInitConfig(adc_dev*)
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sd_card_c]::DmaSdiocTxConfig(M4_DMA_TypeDef*, en_dma_channel, M4_SDIOC_TypeDef*, unsigned char*, unsigned short)
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sd_card_c]::DmaSdiocRxConfig(M4_DMA_TypeDef*, en_dma_channel, M4_SDIOC_TypeDef*, unsigned char*, unsigned short)
</UL>

<P><STRONG><a name="[1f8]"></a>Ddl_Delay1ms</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, hc32f46x_utility.o(i.Ddl_Delay1ms))
<BR><BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iwdg_init
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_HardwareReset()
</UL>

<P><STRONG><a name="[254]"></a>Ddl_Delay1us</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, hc32f46x_utility.o(i.Ddl_Delay1us))
<BR><BR>[Called By]<UL><LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::do_babystep(AxisEnum, bool)
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;minkill(bool)
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC::send_byte(unsigned char)
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC::read_byte(unsigned char)
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC::wait_ack()
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC::start()
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC::stop()
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC::nAck()
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC::ack()
</UL>

<P><STRONG><a name="[117]"></a>Ddl_UartInit</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, hc32f46x_utility.o(i.Ddl_UartInit))
<BR><BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetFunc
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to hc32f46x_utility_c]::SetUartBaudrate(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init
</UL>

<P><STRONG><a name="[11]"></a>DebugMon_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[450]"></a>DebugOutput</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, hc32f46x_utility.o(i.DebugOutput))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[ab]"></a>Dma1Btc3_IrqHandler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, adc.o(i.Dma1Btc3_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ129_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> adc.o(i._ZN22_INTERNAL_5_adc_c_adc116adc_DMAIrqConfigEv)
</UL>
<P><STRONG><a name="[3d2]"></a>EFM_InstructionCacheCmd</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hc32f46x_efm.o(i.EFM_InstructionCacheCmd))
<BR><BR>[Called By]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to startup_cpp]::setup_SysClk()
</UL>

<P><STRONG><a name="[3d3]"></a>EFM_Lock</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, hc32f46x_efm.o(i.EFM_Lock))
<BR><BR>[Called By]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to startup_cpp]::setup_SysClk()
</UL>

<P><STRONG><a name="[1a3]"></a>EFM_ReadUID</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, hc32f46x_efm.o(i.EFM_ReadUID))
<BR><BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initTLScreen()
</UL>

<P><STRONG><a name="[3d1]"></a>EFM_SetLatency</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hc32f46x_efm.o(i.EFM_SetLatency))
<BR><BR>[Called By]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to startup_cpp]::setup_SysClk()
</UL>

<P><STRONG><a name="[3d0]"></a>EFM_Unlock</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hc32f46x_efm.o(i.EFM_Unlock))
<BR><BR>[Called By]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to startup_cpp]::setup_SysClk()
</UL>

<P><STRONG><a name="[c]"></a>HardFault_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>IRQ000_Handler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ000_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>IRQ001_Handler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ001_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>IRQ002_Handler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ002_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>IRQ003_Handler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ003_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>IRQ004_Handler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ004_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>IRQ005_Handler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ005_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>IRQ006_Handler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ006_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>IRQ007_Handler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ007_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>IRQ008_Handler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ008_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>IRQ009_Handler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ009_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>IRQ010_Handler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ010_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>IRQ011_Handler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ011_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>IRQ012_Handler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ012_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>IRQ013_Handler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ013_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>IRQ014_Handler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ014_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>IRQ015_Handler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ015_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>IRQ016_Handler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ016_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>IRQ017_Handler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ017_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>IRQ018_Handler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ018_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>IRQ019_Handler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ019_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>IRQ020_Handler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ020_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>IRQ021_Handler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ021_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>IRQ022_Handler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ022_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>IRQ023_Handler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ023_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>IRQ024_Handler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ024_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>IRQ025_Handler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ025_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>IRQ026_Handler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ026_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>IRQ027_Handler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ027_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>IRQ028_Handler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ028_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>IRQ029_Handler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ029_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>IRQ030_Handler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ030_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>IRQ031_Handler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ031_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>IRQ032_Handler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ032_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>IRQ033_Handler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ033_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>IRQ034_Handler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ034_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>IRQ035_Handler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ035_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>IRQ036_Handler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ036_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>IRQ037_Handler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ037_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>IRQ038_Handler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ038_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>IRQ039_Handler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ039_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>IRQ040_Handler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ040_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>IRQ041_Handler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ041_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>IRQ042_Handler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ042_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>IRQ043_Handler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ043_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>IRQ044_Handler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ044_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>IRQ045_Handler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ045_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>IRQ046_Handler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ046_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>IRQ047_Handler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ047_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>IRQ048_Handler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ048_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>IRQ049_Handler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ049_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>IRQ050_Handler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ050_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>IRQ051_Handler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ051_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>IRQ052_Handler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ052_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>IRQ053_Handler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ053_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>IRQ054_Handler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ054_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>IRQ055_Handler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ055_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>IRQ056_Handler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ056_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>IRQ057_Handler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ057_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>IRQ058_Handler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ058_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>IRQ059_Handler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ059_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>IRQ060_Handler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ060_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>IRQ061_Handler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ061_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>IRQ062_Handler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ062_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>IRQ063_Handler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ063_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>IRQ064_Handler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ064_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>IRQ065_Handler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ065_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>IRQ066_Handler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ066_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>IRQ067_Handler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ067_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>IRQ068_Handler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ068_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>IRQ069_Handler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ069_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>IRQ070_Handler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ070_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>IRQ071_Handler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ071_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>IRQ072_Handler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ072_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>IRQ073_Handler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ073_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>IRQ074_Handler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ074_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>IRQ075_Handler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ075_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>IRQ076_Handler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ076_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>IRQ077_Handler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ077_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>IRQ078_Handler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ078_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>IRQ079_Handler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ079_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>IRQ080_Handler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ080_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>IRQ081_Handler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ081_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>IRQ082_Handler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ082_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>IRQ083_Handler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ083_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>IRQ084_Handler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ084_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>IRQ085_Handler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ085_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>IRQ086_Handler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ086_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>IRQ087_Handler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ087_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>IRQ088_Handler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ088_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>IRQ089_Handler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ089_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>IRQ090_Handler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ090_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>IRQ091_Handler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ091_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>IRQ092_Handler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ092_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>IRQ093_Handler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ093_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>IRQ094_Handler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ094_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>IRQ095_Handler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ095_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[74]"></a>IRQ096_Handler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ096_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[75]"></a>IRQ097_Handler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ097_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>IRQ098_Handler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ098_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[77]"></a>IRQ099_Handler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ099_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[78]"></a>IRQ100_Handler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ100_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[79]"></a>IRQ101_Handler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ101_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[7a]"></a>IRQ102_Handler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ102_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[7b]"></a>IRQ103_Handler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ103_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[7c]"></a>IRQ104_Handler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ104_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[7d]"></a>IRQ105_Handler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ105_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[7e]"></a>IRQ106_Handler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ106_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[7f]"></a>IRQ107_Handler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ107_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[80]"></a>IRQ108_Handler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ108_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[81]"></a>IRQ109_Handler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ109_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[82]"></a>IRQ110_Handler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ110_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[83]"></a>IRQ111_Handler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ111_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[84]"></a>IRQ112_Handler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ112_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[85]"></a>IRQ113_Handler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ113_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[86]"></a>IRQ114_Handler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ114_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[87]"></a>IRQ115_Handler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ115_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[88]"></a>IRQ116_Handler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ116_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[89]"></a>IRQ117_Handler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ117_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[8a]"></a>IRQ118_Handler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ118_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[8b]"></a>IRQ119_Handler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ119_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[8c]"></a>IRQ120_Handler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ120_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[8d]"></a>IRQ121_Handler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ121_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[8e]"></a>IRQ122_Handler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ122_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[8f]"></a>IRQ123_Handler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ123_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[90]"></a>IRQ124_Handler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ124_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[91]"></a>IRQ125_Handler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ125_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[92]"></a>IRQ126_Handler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ126_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[93]"></a>IRQ127_Handler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ127_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[94]"></a>IRQ128_Handler</STRONG> (Thumb, 326 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ128_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[95]"></a>IRQ129_Handler</STRONG> (Thumb, 1126 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ129_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dma1Btc3_IrqHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[96]"></a>IRQ130_Handler</STRONG> (Thumb, 190 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ130_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[97]"></a>IRQ131_Handler</STRONG> (Thumb, 684 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ131_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[98]"></a>IRQ132_Handler</STRONG> (Thumb, 350 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ132_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[9c]"></a>IRQ136_Handler</STRONG> (Thumb, 750 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ136_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[9d]"></a>IRQ137_Handler</STRONG> (Thumb, 620 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ137_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[9e]"></a>IRQ138_Handler</STRONG> (Thumb, 558 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ138_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[9f]"></a>IRQ139_Handler</STRONG> (Thumb, 286 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ139_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[a0]"></a>IRQ140_Handler</STRONG> (Thumb, 490 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ140_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[a1]"></a>IRQ141_Handler</STRONG> (Thumb, 542 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ141_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[a2]"></a>IRQ142_Handler</STRONG> (Thumb, 242 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ142_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[a3]"></a>IRQ143_Handler</STRONG> (Thumb, 256 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.IRQ143_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>MemManage_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.MemManage_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>NMI_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[11a]"></a>PORT_DebugPortSetting</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, hc32f46x_gpio.o(i.PORT_DebugPortSetting))
<BR><BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_Unlock
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_gpio
</UL>

<P><STRONG><a name="[11e]"></a>PORT_GetBit</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, hc32f46x_gpio.o(i.PORT_GetBit))
<BR><BR>[Called By]<UL><LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FilamentSensorBase::poll_runout_states()
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::manage_media()
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_GetBitMapp
</UL>

<P><STRONG><a name="[11d]"></a>PORT_GetBitMapp</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, tenlog_touch_lcd.o(i.PORT_GetBitMapp))
<BR><BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_GetBit
</UL>
<BR>[Called By]<UL><LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::do_babystep(AxisEnum, bool)
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plr_outage()
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Endstops::report_states()
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Endstops::update()
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC::read_byte(unsigned char)
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC::wait_ack()
</UL>

<P><STRONG><a name="[11f]"></a>PORT_Init</STRONG> (Thumb, 206 bytes, Stack size 0 bytes, hc32f46x_gpio.o(i.PORT_Init))
<BR><BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_Unlock
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set_mode(unsigned char, WiringPinMode)
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinMode(unsigned char, WiringPinMode)
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_InitGPIO()
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to adc_c]::adc_SetPinMode(unsigned char, en_pin_mode)
</UL>

<P><STRONG><a name="[11c]"></a>PORT_Lock</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hc32f46x_gpio.o(i.PORT_Lock))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetFunc
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_Init
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_DebugPortSetting
</UL>

<P><STRONG><a name="[121]"></a>PORT_ResetBits</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, hc32f46x_gpio.o(i.PORT_ResetBits))
<BR><BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_ResetBitsMapp
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_HardwareReset()
</UL>

<P><STRONG><a name="[120]"></a>PORT_ResetBitsMapp</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, marlincore.o(i.PORT_ResetBitsMapp))
<BR><BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M17()
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::do_babystep(AxisEnum, bool)
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::init()
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::init()
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::disable_all_heaters()
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::manage_heater()
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_all_steppers()
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_e_steppers()
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC::send_byte(unsigned char)
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC::read_byte(unsigned char)
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC::wait_ack()
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC::start()
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC::stop()
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC::nAck()
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC::init()
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC::ack()
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_outage()
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::isr()
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::checkExtruderAutoFans()
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::pulse_phase_isr()
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::_populate_block(block_t*, bool, const XYZEval&lang;int&rang;&, float, unsigned char, float)
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::set_directions()
</UL>

<P><STRONG><a name="[123]"></a>PORT_SetBits</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, hc32f46x_gpio.o(i.PORT_SetBits))
<BR><BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetBitsMapp
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_HardwareReset()
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_InitGPIO()
</UL>

<P><STRONG><a name="[122]"></a>PORT_SetBitsMapp</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, marlincore.o(i.PORT_SetBitsMapp))
<BR><BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M18_M84()
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::do_babystep(AxisEnum, bool)
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;manage_inactivity(bool)
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::init()
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::init()
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disable_all_steppers()
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disable_e_steppers()
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC::send_byte(unsigned char)
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC::read_byte(unsigned char)
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC::wait_ack()
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC::start()
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC::stop()
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC::nAck()
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC::init()
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC::ack()
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::isr()
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::checkExtruderAutoFans()
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::pulse_phase_isr()
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::set_directions()
</UL>

<P><STRONG><a name="[118]"></a>PORT_SetFunc</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, hc32f46x_gpio.o(i.PORT_SetFunc))
<BR><BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_Unlock
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ddl_UartInit
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_InitSPI1()
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetFuncMapp
</UL>

<P><STRONG><a name="[124]"></a>PORT_SetFuncMapp</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, hardwareserial.o(i.PORT_SetFuncMapp))
<BR><BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetFunc
</UL>
<BR>[Called By]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::begin(unsigned, unsigned char)
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sdioc_Class::Sdioc_Class(M4_SDIOC_TypeDef*)
</UL>

<P><STRONG><a name="[11b]"></a>PORT_Unlock</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hc32f46x_gpio.o(i.PORT_Unlock))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetFunc
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_Init
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_DebugPortSetting
</UL>

<P><STRONG><a name="[3c1]"></a>PWC_Fcg0PeriphClockCmd</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, hc32f46x_pwc.o(i.PWC_Fcg0PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to adc_c]::adc_TriggerConfig(adc_dev*, unsigned)
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to adc_c]::adc_DMAInitConfig(adc_dev*)
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sd_card_c]::DmaSdiocTxConfig(M4_DMA_TypeDef*, en_dma_channel, M4_SDIOC_TypeDef*, unsigned char*, unsigned short)
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sd_card_c]::DmaSdiocRxConfig(M4_DMA_TypeDef*, en_dma_channel, M4_SDIOC_TypeDef*, unsigned char*, unsigned short)
</UL>

<P><STRONG><a name="[1a7]"></a>PWC_Fcg1PeriphClockCmd</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, hc32f46x_pwc.o(i.PWC_Fcg1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to hc32f46x_utility_c]::SetUartBaudrate(unsigned)
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_InitSPI1()
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_init
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sd_card_c]::SdCardInitHost(const stc_sd_handle*)
</UL>

<P><STRONG><a name="[462]"></a>PWC_Fcg2PeriphClockCmd</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, hc32f46x_pwc.o(i.PWC_Fcg2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_time2B
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_time2A
</UL>

<P><STRONG><a name="[3bc]"></a>PWC_Fcg3PeriphClockCmd</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, hc32f46x_pwc.o(i.PWC_Fcg3PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to adc_c]::adc_initconfig(adc_dev*)
</UL>

<P><STRONG><a name="[12]"></a>PendSV_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[457]"></a>RMU_ClrResetFlag</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, hc32f46x_rmu.o(i.RMU_ClrResetFlag))
<BR><BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iwdg_init
</UL>

<P><STRONG><a name="[1ad]"></a>RMU_GetResetCause</STRONG> (Thumb, 148 bytes, Stack size 0 bytes, hc32f46x_rmu.o(i.RMU_GetResetCause))
<BR><BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getResetCause()
</UL>

<P><STRONG><a name="[3d6]"></a>SDCARD_GetCardCSD</STRONG> (Thumb, 228 bytes, Stack size 0 bytes, sd_card.o(i.SDCARD_GetCardCSD))
<BR><BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sd_card_c]::SdCardInitSd(stc_sd_handle*)
</UL>

<P><STRONG><a name="[12d]"></a>SDCARD_GetDeviceMode</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sd_card.o(i.SDCARD_GetDeviceMode))
<BR><BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCARD_WriteBlocks
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCARD_ReadBlocks
</UL>

<P><STRONG><a name="[125]"></a>SDCARD_Init</STRONG> (Thumb, 134 bytes, Stack size 0 bytes, sd_card.o(i.SDCARD_Init))
<BR><BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sd_card_c]::SdCardSetBusWidth(stc_sd_handle*)
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sd_card_c]::SdCardSetSpeed(stc_sd_handle*)
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sd_card_c]::SdCardInitHost(const stc_sd_handle*)
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sd_card_c]::SdCardPowerON(stc_sd_handle*)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sd_card_c]::SdCardInitSd(stc_sd_handle*)
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sdioc_Class::init()
</UL>

<P><STRONG><a name="[12c]"></a>SDCARD_ReadBlocks</STRONG> (Thumb, 462 bytes, Stack size 0 bytes, sd_card.o(i.SDCARD_ReadBlocks))
<BR><BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_ReadBuffer
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_GetStatus
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_GetNormalIrqFlag
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_ConfigData
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_ClearNormalIrqFlag
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Cmd18_ReadMultipleBlock
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Cmd17_ReadSingleBlock
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Cmd16_SetBlockLength
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCARD_GetDeviceMode
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sd_card_c]::DmaSdiocRxConfig(M4_DMA_TypeDef*, en_dma_channel, M4_SDIOC_TypeDef*, unsigned char*, unsigned short)
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sdioc_Class::read(unsigned, unsigned short, unsigned char*)
</UL>

<P><STRONG><a name="[137]"></a>SDCARD_WriteBlocks</STRONG> (Thumb, 486 bytes, Stack size 0 bytes, sd_card.o(i.SDCARD_WriteBlocks))
<BR><BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_WriteBuffer
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_GetStatus
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_GetNormalIrqFlag
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_ConfigData
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_ClearNormalIrqFlag
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Cmd25_WriteMultipleBlock
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Cmd24_WriteSingleBlock
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Cmd16_SetBlockLength
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCARD_GetDeviceMode
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sd_card_c]::SdCardCheckReayForData(stc_sd_handle*, unsigned)
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sd_card_c]::DmaSdiocTxConfig(M4_DMA_TypeDef*, en_dma_channel, M4_SDIOC_TypeDef*, unsigned char*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sdioc_Class::write(unsigned, unsigned short, const unsigned char*)
</UL>

<P><STRONG><a name="[136]"></a>SDIOC_ClearNormalIrqFlag</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, hc32f46x_sdioc.o(i.SDIOC_ClearNormalIrqFlag))
<BR><BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCARD_WriteBlocks
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCARD_ReadBlocks
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sdmmc_cmd_c]::SDMMC_WaitResponse(M4_SDIOC_TypeDef*, unsigned)
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sd_card_c]::SdCardSetSpeed(stc_sd_handle*)
</UL>

<P><STRONG><a name="[12f]"></a>SDIOC_ConfigData</STRONG> (Thumb, 210 bytes, Stack size 0 bytes, hc32f46x_sdioc.o(i.SDIOC_ConfigData))
<BR><BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCARD_WriteBlocks
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCARD_ReadBlocks
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sd_card_c]::SdCardSetSpeed(stc_sd_handle*)
</UL>

<P><STRONG><a name="[134]"></a>SDIOC_GetNormalIrqFlag</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hc32f46x_sdioc.o(i.SDIOC_GetNormalIrqFlag))
<BR><BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCARD_WriteBlocks
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCARD_ReadBlocks
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sdmmc_cmd_c]::SDMMC_WaitResponse(M4_SDIOC_TypeDef*, unsigned)
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sd_card_c]::SdCardSetSpeed(stc_sd_handle*)
</UL>

<P><STRONG><a name="[3d9]"></a>SDIOC_GetResponse</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hc32f46x_sdioc.o(i.SDIOC_GetResponse))
<BR><BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sdmmc_cmd_c]::SDMMC_GetCmdResp7(M4_SDIOC_TypeDef*, unsigned*)
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sdmmc_cmd_c]::SDMMC_GetCmdResp6(M4_SDIOC_TypeDef*, unsigned*)
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sdmmc_cmd_c]::SDMMC_GetCmdResp3(M4_SDIOC_TypeDef*, unsigned*)
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sdmmc_cmd_c]::SDMMC_GetCmdResp2(M4_SDIOC_TypeDef*, unsigned*)
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sdmmc_cmd_c]::SDMMC_GetCmdResp1(M4_SDIOC_TypeDef*, unsigned*, unsigned)
</UL>

<P><STRONG><a name="[133]"></a>SDIOC_GetStatus</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hc32f46x_sdioc.o(i.SDIOC_GetStatus))
<BR><BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCARD_WriteBlocks
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCARD_ReadBlocks
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sdmmc_cmd_c]::SDMMC_GetCardDetection(M4_SDIOC_TypeDef*)
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sdmmc_cmd_c]::SDMMC_WaitBusIdle(M4_SDIOC_TypeDef*)
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sd_card_c]::SdCardSetSpeed(stc_sd_handle*)
</UL>

<P><STRONG><a name="[13d]"></a>SDIOC_Init</STRONG> (Thumb, 328 bytes, Stack size 0 bytes, hc32f46x_sdioc.o(i.SDIOC_Init))
<BR><BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to hc32f46x_sdioc_c]::SdiocGetInternDataPtr(const M4_SDIOC_TypeDef*)
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to hc32f46x_sdioc_c]::SdiocGetClkDiv(unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sd_card_c]::SdCardInitHost(const stc_sd_handle*)
</UL>

<P><STRONG><a name="[d7]"></a>SDIOC_IrqHandler</STRONG> (Thumb, 442 bytes, Stack size 0 bytes, hc32f46x_sdioc.o(i.SDIOC_IrqHandler), UNUSED, KEPT)
<BR><BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to hc32f46x_sdioc_c]::SdiocGetInternDataPtr(const M4_SDIOC_TypeDef*)
</UL>

<P><STRONG><a name="[135]"></a>SDIOC_ReadBuffer</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, hc32f46x_sdioc.o(i.SDIOC_ReadBuffer))
<BR><BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCARD_ReadBlocks
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sd_card_c]::SdCardSetSpeed(stc_sd_handle*)
</UL>

<P><STRONG><a name="[147]"></a>SDIOC_SendCommand</STRONG> (Thumb, 306 bytes, Stack size 0 bytes, hc32f46x_sdioc.o(i.SDIOC_SendCommand))
<BR><BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Cmd9_SendCSD
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Cmd8_SendIfCond
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Cmd7_SelectDeselectCard
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Cmd6_SwitchFunc
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Cmd55_AppCmd
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Cmd3_SendRelativeAddr
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Cmd2_AllSendCID
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Cmd25_WriteMultipleBlock
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Cmd24_WriteSingleBlock
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Cmd18_ReadMultipleBlock
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Cmd17_ReadSingleBlock
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Cmd16_SetBlockLength
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Cmd13_SendStatus
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Cmd0_GoIdleState
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Acmd6_SetBusWidth
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Acmd41_SdSendOpCond
</UL>

<P><STRONG><a name="[3d8]"></a>SDIOC_SetBusWidth</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, hc32f46x_sdioc.o(i.SDIOC_SetBusWidth))
<BR><BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sd_card_c]::SdCardSetBusWidth(stc_sd_handle*)
</UL>

<P><STRONG><a name="[140]"></a>SDIOC_SetClk</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, hc32f46x_sdioc.o(i.SDIOC_SetClk))
<BR><BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to hc32f46x_sdioc_c]::SdiocGetClkDiv(unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sd_card_c]::SdCardSetSpeed(stc_sd_handle*)
</UL>

<P><STRONG><a name="[3d7]"></a>SDIOC_SetSpeedMode</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, hc32f46x_sdioc.o(i.SDIOC_SetSpeedMode))
<BR><BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sd_card_c]::SdCardSetSpeed(stc_sd_handle*)
</UL>

<P><STRONG><a name="[13b]"></a>SDIOC_WriteBuffer</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, hc32f46x_sdioc.o(i.SDIOC_WriteBuffer))
<BR><BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCARD_WriteBlocks
</UL>

<P><STRONG><a name="[141]"></a>SDIO_ReadBlock_DMA</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, sdio_f1.o(i.SDIO_ReadBlock_DMA))
<BR><BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sdioc_Class::read(unsigned, unsigned short, unsigned char*)
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ReadBlock(unsigned, unsigned char*)
</UL>

<P><STRONG><a name="[143]"></a>SDIO_WriteBlockDMA</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, sdio_f1.o(i.SDIO_WriteBlockDMA))
<BR><BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sdioc_Class::write(unsigned, unsigned short, const unsigned char*)
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_WriteBlock(unsigned, const unsigned char*)
</UL>

<P><STRONG><a name="[145]"></a>SDMMC_Acmd41_SdSendOpCond</STRONG> (Thumb, 108 bytes, Stack size 0 bytes, sdmmc_cmd.o(i.SDMMC_Acmd41_SdSendOpCond))
<BR><BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_SendCommand
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sdmmc_cmd_c]::SDMMC_WaitBusIdle(M4_SDIOC_TypeDef*)
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sdmmc_cmd_c]::SDMMC_GetCmdResp3(M4_SDIOC_TypeDef*, unsigned*)
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sd_card_c]::SdCardPowerON(stc_sd_handle*)
</UL>

<P><STRONG><a name="[149]"></a>SDMMC_Acmd6_SetBusWidth</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, sdmmc_cmd.o(i.SDMMC_Acmd6_SetBusWidth))
<BR><BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_SendCommand
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sdmmc_cmd_c]::SDMMC_WaitBusIdle(M4_SDIOC_TypeDef*)
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sdmmc_cmd_c]::SDMMC_GetCmdResp1(M4_SDIOC_TypeDef*, unsigned*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sd_card_c]::SdCardSetBusWidth(stc_sd_handle*)
</UL>

<P><STRONG><a name="[14b]"></a>SDMMC_Cmd0_GoIdleState</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, sdmmc_cmd.o(i.SDMMC_Cmd0_GoIdleState))
<BR><BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_SendCommand
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sdmmc_cmd_c]::SDMMC_WaitResponse(M4_SDIOC_TypeDef*, unsigned)
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sdmmc_cmd_c]::SDMMC_WaitBusIdle(M4_SDIOC_TypeDef*)
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sd_card_c]::SdCardPowerON(stc_sd_handle*)
</UL>

<P><STRONG><a name="[14d]"></a>SDMMC_Cmd13_SendStatus</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, sdmmc_cmd.o(i.SDMMC_Cmd13_SendStatus))
<BR><BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_SendCommand
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sdmmc_cmd_c]::SDMMC_WaitBusIdle(M4_SDIOC_TypeDef*)
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sdmmc_cmd_c]::SDMMC_GetCmdResp1(M4_SDIOC_TypeDef*, unsigned*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sd_card_c]::SdCardCheckReayForData(stc_sd_handle*, unsigned)
</UL>

<P><STRONG><a name="[12e]"></a>SDMMC_Cmd16_SetBlockLength</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, sdmmc_cmd.o(i.SDMMC_Cmd16_SetBlockLength))
<BR><BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_SendCommand
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sdmmc_cmd_c]::SDMMC_WaitBusIdle(M4_SDIOC_TypeDef*)
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sdmmc_cmd_c]::SDMMC_GetCmdResp1(M4_SDIOC_TypeDef*, unsigned*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCARD_WriteBlocks
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCARD_ReadBlocks
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sd_card_c]::SdCardSetSpeed(stc_sd_handle*)
</UL>

<P><STRONG><a name="[131]"></a>SDMMC_Cmd17_ReadSingleBlock</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, sdmmc_cmd.o(i.SDMMC_Cmd17_ReadSingleBlock))
<BR><BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_SendCommand
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sdmmc_cmd_c]::SDMMC_WaitBusIdle(M4_SDIOC_TypeDef*)
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sdmmc_cmd_c]::SDMMC_GetCmdResp1(M4_SDIOC_TypeDef*, unsigned*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCARD_ReadBlocks
</UL>

<P><STRONG><a name="[132]"></a>SDMMC_Cmd18_ReadMultipleBlock</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, sdmmc_cmd.o(i.SDMMC_Cmd18_ReadMultipleBlock))
<BR><BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_SendCommand
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sdmmc_cmd_c]::SDMMC_WaitBusIdle(M4_SDIOC_TypeDef*)
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sdmmc_cmd_c]::SDMMC_GetCmdResp1(M4_SDIOC_TypeDef*, unsigned*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCARD_ReadBlocks
</UL>

<P><STRONG><a name="[139]"></a>SDMMC_Cmd24_WriteSingleBlock</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, sdmmc_cmd.o(i.SDMMC_Cmd24_WriteSingleBlock))
<BR><BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_SendCommand
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sdmmc_cmd_c]::SDMMC_WaitBusIdle(M4_SDIOC_TypeDef*)
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sdmmc_cmd_c]::SDMMC_GetCmdResp1(M4_SDIOC_TypeDef*, unsigned*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCARD_WriteBlocks
</UL>

<P><STRONG><a name="[13a]"></a>SDMMC_Cmd25_WriteMultipleBlock</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, sdmmc_cmd.o(i.SDMMC_Cmd25_WriteMultipleBlock))
<BR><BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_SendCommand
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sdmmc_cmd_c]::SDMMC_WaitBusIdle(M4_SDIOC_TypeDef*)
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sdmmc_cmd_c]::SDMMC_GetCmdResp1(M4_SDIOC_TypeDef*, unsigned*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCARD_WriteBlocks
</UL>

<P><STRONG><a name="[14e]"></a>SDMMC_Cmd2_AllSendCID</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, sdmmc_cmd.o(i.SDMMC_Cmd2_AllSendCID))
<BR><BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_SendCommand
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sdmmc_cmd_c]::SDMMC_WaitBusIdle(M4_SDIOC_TypeDef*)
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sdmmc_cmd_c]::SDMMC_GetCmdResp2(M4_SDIOC_TypeDef*, unsigned*)
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sd_card_c]::SdCardInitSd(stc_sd_handle*)
</UL>

<P><STRONG><a name="[150]"></a>SDMMC_Cmd3_SendRelativeAddr</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, sdmmc_cmd.o(i.SDMMC_Cmd3_SendRelativeAddr))
<BR><BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_SendCommand
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sdmmc_cmd_c]::SDMMC_WaitBusIdle(M4_SDIOC_TypeDef*)
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sdmmc_cmd_c]::SDMMC_GetCmdResp6(M4_SDIOC_TypeDef*, unsigned*)
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sd_card_c]::SdCardInitSd(stc_sd_handle*)
</UL>

<P><STRONG><a name="[152]"></a>SDMMC_Cmd55_AppCmd</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, sdmmc_cmd.o(i.SDMMC_Cmd55_AppCmd))
<BR><BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_SendCommand
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sdmmc_cmd_c]::SDMMC_WaitBusIdle(M4_SDIOC_TypeDef*)
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sdmmc_cmd_c]::SDMMC_GetCmdResp1(M4_SDIOC_TypeDef*, unsigned*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sd_card_c]::SdCardSetBusWidth(stc_sd_handle*)
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sd_card_c]::SdCardPowerON(stc_sd_handle*)
</UL>

<P><STRONG><a name="[153]"></a>SDMMC_Cmd6_SwitchFunc</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, sdmmc_cmd.o(i.SDMMC_Cmd6_SwitchFunc))
<BR><BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_SendCommand
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sdmmc_cmd_c]::SDMMC_WaitBusIdle(M4_SDIOC_TypeDef*)
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sdmmc_cmd_c]::SDMMC_GetCmdResp1(M4_SDIOC_TypeDef*, unsigned*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sd_card_c]::SdCardSetSpeed(stc_sd_handle*)
</UL>

<P><STRONG><a name="[154]"></a>SDMMC_Cmd7_SelectDeselectCard</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, sdmmc_cmd.o(i.SDMMC_Cmd7_SelectDeselectCard))
<BR><BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_SendCommand
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sdmmc_cmd_c]::SDMMC_WaitBusIdle(M4_SDIOC_TypeDef*)
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sdmmc_cmd_c]::SDMMC_GetCmdResp1(M4_SDIOC_TypeDef*, unsigned*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sd_card_c]::SdCardInitSd(stc_sd_handle*)
</UL>

<P><STRONG><a name="[155]"></a>SDMMC_Cmd8_SendIfCond</STRONG> (Thumb, 102 bytes, Stack size 0 bytes, sdmmc_cmd.o(i.SDMMC_Cmd8_SendIfCond))
<BR><BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_SendCommand
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sdmmc_cmd_c]::SDMMC_WaitBusIdle(M4_SDIOC_TypeDef*)
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sdmmc_cmd_c]::SDMMC_GetCmdResp7(M4_SDIOC_TypeDef*, unsigned*)
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sd_card_c]::SdCardPowerON(stc_sd_handle*)
</UL>

<P><STRONG><a name="[157]"></a>SDMMC_Cmd9_SendCSD</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, sdmmc_cmd.o(i.SDMMC_Cmd9_SendCSD))
<BR><BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_SendCommand
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sdmmc_cmd_c]::SDMMC_WaitBusIdle(M4_SDIOC_TypeDef*)
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sdmmc_cmd_c]::SDMMC_GetCmdResp2(M4_SDIOC_TypeDef*, unsigned*)
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sd_card_c]::SdCardInitSd(stc_sd_handle*)
</UL>

<P><STRONG><a name="[1a9]"></a>SPI_Cmd</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, hc32f46x_spi.o(i.SPI_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_InitSPI1()
</UL>

<P><STRONG><a name="[1a8]"></a>SPI_Init</STRONG> (Thumb, 404 bytes, Stack size 0 bytes, hc32f46x_spi.o(i.SPI_Init))
<BR><BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_InitSPI1()
</UL>

<P><STRONG><a name="[10]"></a>SVC_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[d6]"></a>SysTickIrq_Handler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, board_tim0.o(i.SysTickIrq_Handler))
<BR><BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[13]"></a>SysTick_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.SysTick_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickIrq_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[111]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 178 bytes, Stack size 0 bytes, system_hc32f460petb.o(i.SystemCoreClockUpdate))
<BR><BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetSysClkSource
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[a5]"></a>SystemInit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, system_hc32f460petb.o(i.SystemInit))
<BR><BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(.text)
</UL>
<P><STRONG><a name="[158]"></a>TIMER0_BaseInit</STRONG> (Thumb, 1524 bytes, Stack size 0 bytes, hc32f46x_timer0.o(i.TIMER0_BaseInit))
<BR><BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to hc32f46x_timer0_c]::AsyncDelay(M4_TMR0_TypeDef*, en_tim0_channel, en_functional_state)
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_time2B
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_time2A
</UL>

<P><STRONG><a name="[15a]"></a>TIMER0_ClearFlag</STRONG> (Thumb, 112 bytes, Stack size 0 bytes, hc32f46x_timer0.o(i.TIMER0_ClearFlag))
<BR><BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to hc32f46x_timer0_c]::AsyncDelay(M4_TMR0_TypeDef*, en_tim0_channel, en_functional_state)
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tempTC_Handler()
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stepTC_Handler()
</UL>

<P><STRONG><a name="[15b]"></a>TIMER0_Cmd</STRONG> (Thumb, 134 bytes, Stack size 0 bytes, hc32f46x_timer0.o(i.TIMER0_Cmd))
<BR><BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to hc32f46x_timer0_c]::AsyncDelay(M4_TMR0_TypeDef*, en_tim0_channel, en_functional_state)
</UL>
<BR>[Called By]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_enable_irq
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_disable_irq
</UL>

<P><STRONG><a name="[466]"></a>TIMER0_GetCntReg</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, hc32f46x_timer0.o(i.TIMER0_GetCntReg))
<BR><BR>[Called By]<UL><LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_get_count
</UL>

<P><STRONG><a name="[15c]"></a>TIMER0_IntCmd</STRONG> (Thumb, 134 bytes, Stack size 0 bytes, hc32f46x_timer0.o(i.TIMER0_IntCmd))
<BR><BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to hc32f46x_timer0_c]::AsyncDelay(M4_TMR0_TypeDef*, en_tim0_channel, en_functional_state)
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_time2B
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_time2A
</UL>

<P><STRONG><a name="[15d]"></a>TIMER0_WriteCmpReg</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, hc32f46x_timer0.o(i.TIMER0_WriteCmpReg))
<BR><BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to hc32f46x_timer0_c]::AsyncDelay(M4_TMR0_TypeDef*, en_tim0_channel, en_functional_state)
</UL>
<BR>[Called By]<UL><LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_preset_compare
</UL>

<P><STRONG><a name="[21b]"></a>USART_ClearStatus</STRONG> (Thumb, 114 bytes, Stack size 0 bytes, hc32f46x_usart.o(i.USART_ClearStatus))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart4ErrIrqCallback()
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart3ErrIrqCallback()
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart2ErrIrqCallback()
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart1ErrIrqCallback()
</UL>

<P><STRONG><a name="[468]"></a>USART_DeInit</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, hc32f46x_usart.o(i.USART_DeInit))
<BR><BR>[Called By]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_disable
</UL>

<P><STRONG><a name="[200]"></a>USART_FuncCmd</STRONG> (Thumb, 520 bytes, Stack size 0 bytes, hc32f46x_usart.o(i.USART_FuncCmd))
<BR><BR>[Called By]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_tx
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_enable
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart4TxCmpltIrqCallback()
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart3TxCmpltIrqCallback()
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart2TxCmpltIrqCallback()
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart1TxCmpltIrqCallback()
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart4TxIrqCallback()
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart3TxIrqCallback()
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart2TxIrqCallback()
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart1TxIrqCallback()
</UL>

<P><STRONG><a name="[21a]"></a>USART_GetStatus</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hc32f46x_usart.o(i.USART_GetStatus))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart4ErrIrqCallback()
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart3ErrIrqCallback()
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart2ErrIrqCallback()
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart1ErrIrqCallback()
</UL>

<P><STRONG><a name="[1fa]"></a>USART_RecData</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hc32f46x_usart.o(i.USART_RecData))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart4RxIrqCallback()
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart3RxIrqCallback()
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart2RxIrqCallback()
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart1RxIrqCallback()
</UL>

<P><STRONG><a name="[1ff]"></a>USART_SendData</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hc32f46x_usart.o(i.USART_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart4TxIrqCallback()
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart3TxIrqCallback()
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart2TxIrqCallback()
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart1TxIrqCallback()
</UL>

<P><STRONG><a name="[15e]"></a>USART_SetBaudrate</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, hc32f46x_usart.o(i.USART_SetBaudrate))
<BR><BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to hc32f46x_usart_c]::SetClkSyncBaudrate(M4_USART_TypeDef*, unsigned)
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to hc32f46x_usart_c]::SetUartBaudrate(M4_USART_TypeDef*, unsigned)
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to hc32f46x_usart_c]::SetScBaudrate(M4_USART_TypeDef*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_set_baud_rate
</UL>

<P><STRONG><a name="[3e9]"></a>USART_UART_Init</STRONG> (Thumb, 648 bytes, Stack size 0 bytes, hc32f46x_usart.o(i.USART_UART_Init))
<BR><BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to hc32f46x_utility_c]::SetUartBaudrate(unsigned)
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_init
</UL>

<P><STRONG><a name="[f]"></a>UsageFault_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.UsageFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460petb.o(RESET)
</UL>
<P><STRONG><a name="[458]"></a>WDT_Init</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, hc32f46x_wdt.o(i.WDT_Init))
<BR><BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iwdg_init
</UL>

<P><STRONG><a name="[456]"></a>WDT_RefreshCounter</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, hc32f46x_wdt.o(i.WDT_RefreshCounter))
<BR><BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iwdg_init
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iwdg_feed
</UL>

<P><STRONG><a name="[162]"></a>DETECT_TLS()</STRONG> (Thumb, 640 bytes, Stack size 0 bytes, tenlog_touch_lcd.o(i._Z10DETECT_TLSv))
<BR><BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay(unsigned long)
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SERIAL_CHAR(char)
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echopair_PGM(const char*, int)
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echopair_PGM(const char*, const char*)
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWN_Text(long, int, const char*, bool)
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLSTJC_printEmptyend()
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TenlogScreen_begin(long)
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TenlogScreen_end()
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLSTJC_println(const char*)
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLSTJC_print(const char*)
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_command(int)
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWN_Get_Ver()
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initTLScreen()
</UL>

<P><STRONG><a name="[173]"></a>DWN_VClick(int, int)</STRONG> (Thumb, 156 bytes, Stack size 0 bytes, tenlog_touch_lcd.o(i._Z10DWN_VClickii))
<BR><BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::write(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_command_dwn()
</UL>

<P><STRONG><a name="[1ab]"></a>HAL_reboot()</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, hal.o(i._Z10HAL_rebootv))
<BR><BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flashFirmware(short)
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;minkill(bool)
</UL>

<P><STRONG><a name="[175]"></a>TlPageMain()</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, tenlog_touch_lcd.o(i._Z10TlPageMainv))
<BR><BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay(unsigned long)
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWN_Page(int)
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLSTJC_println(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup
</UL>

<P><STRONG><a name="[177]"></a>openFailed(const char*)</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, cardreader.o(i._Z10openFailedPKc))
<BR><BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echopair_PGM(const char*, const char*)
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::openFileWrite(const char*)
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::openFileRead(const char*, unsigned char)
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::diveToFile(bool, SdFile*&, const char*, bool)
</UL>

<P><STRONG><a name="[179]"></a>plr_outage()</STRONG> (Thumb, 174 bytes, Stack size 0 bytes, tenlog_touch_lcd.o(i._Z10plr_outagev))
<BR><BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::degTargetBed()
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_GetBitMapp
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::plr_pre_save(unsigned, short, short, float, unsigned short)
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_outage()
</UL>
<BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle()
</UL>

<P><STRONG><a name="[17d]"></a>report_M92(bool, signed char)</STRONG> (Thumb, 116 bytes, Stack size 0 bytes, m92.o(i._Z10report_M92ba))
<BR><BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echopair_PGM(const char*, float)
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SERIAL_CHAR(char)
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echo_start()
</UL>
<BR>[Called By]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::report(bool)
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M92()
</UL>

<P><STRONG><a name="[180]"></a>safe_delay(unsigned)</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, utility.o(i._Z10safe_delayj))
<BR><BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay(unsigned long)
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::manage_heater()
</UL>
<BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M81()
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Endstops::resync()
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PersistentStore::write_data(int&, const unsigned char*, unsigned, unsigned short*)
</UL>

<P><STRONG><a name="[1e2]"></a>x_home_pos(unsigned char)</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, motion.o(i._Z10x_home_posh))
<BR><BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dualx_tool_change(unsigned char, bool&)
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_axis_is_at_home(AxisEnum)
</UL>

<P><STRONG><a name="[172]"></a>DWN_Get_Ver()</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, tenlog_touch_lcd.o(i._Z11DWN_Get_Verv))
<BR><BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::write(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DETECT_TLS()
</UL>

<P><STRONG><a name="[182]"></a>DWN_Message(int, const char*, bool)</STRONG> (Thumb, 152 bytes, Stack size 0 bytes, tenlog_touch_lcd.o(i._Z11DWN_MessageiPKcb))
<BR><BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay(unsigned long)
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWN_Text(long, int, const char*, bool)
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWN_Page(int)
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWN_Data(long, long, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_command_dwn()
</UL>

<P><STRONG><a name="[184]"></a>M206_report()</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, m206_m428.o(i._Z11M206_reportv))
<BR><BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echopair_PGM(const char*, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M206()
</UL>

<P><STRONG><a name="[185]"></a>M217_report(bool)</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, m217.o(i._Z11M217_reportb))
<BR><BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echopair_PGM(const char*, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::report(bool)
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M217()
</UL>

<P><STRONG><a name="[165]"></a>SERIAL_CHAR(char)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, marlincore.o(i._Z11SERIAL_CHARc))
<BR><BR>[Called By]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::report(bool)
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M111()
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void SERIAL_CHAR&lang;&lang;int&rang;&rang;(char, T1...)
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M221()
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M220()
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::get_target_extruder_from_command()
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_M92(bool, signed char)
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tool_change(unsigned char, bool)
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_xyz(float, float, float, const char*, const char*)
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintln_onoff(bool)
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echopair_PGM(const char*, SerialChar)
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFilamentMonitor&lang;RunoutResponseDebounced, FilamentSensorSwitch&rang;::run()
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;manage_inactivity(bool)
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Endstops::event_handler()
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::AutoReportTemp::report()
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initTLScreen()
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kill(const char*, const char*, bool)
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::gcode_line_error(const char*, serial_index_t)
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M218()
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::RingBuffer::ok_to_send()
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::PID_autotune(short, heater_id_t, signed char, bool)
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::print_heater_states(unsigned char)
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_subcommands_now_P(const char*)
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::removeFile(const char*)
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::report_status()
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::printFilename()
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::openFileRead(const char*, unsigned char)
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M115()
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to M115_cpp]::cap_line(const char*, bool)
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to endstops_cpp]::print_es_state(bool, const char*)
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::plr_recovery()
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::tl_ls()
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TJCPauseResumePrinting(bool, int)
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_command_gcode(long*)
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DETECT_TLS()
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_software_endstops(AxisEnum, unsigned char, unsigned char)
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::printListing(SdFile, const char*)
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;announceOpen(unsigned char, const char*)
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invalid_extruder_error(unsigned char)
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void SERIAL_CHAR&lang;&lang;char&rang;&rang;(char, T1...)
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::_temp_error(heater_id_t, const char*, const char*)
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to temperature_cpp]::print_heater_state(float, float, float, heater_id_t)
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to settings_cpp]::config_heading(bool, const char*, bool)
</UL>

<P><STRONG><a name="[186]"></a>eeprom_init()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, eeprom_if_iic.o(i._Z11eeprom_initv))
<BR><BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL24CXX::init()
</UL>
<BR>[Called By]<UL><LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PersistentStore::access_start()
</UL>

<P><STRONG><a name="[16c]"></a>get_command(int)</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, tenlog_touch_lcd.o(i._Z11get_commandi))
<BR><BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay(unsigned long)
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MTLSERIAL_available()
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MTLSERIAL_read()
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initTLScreen()
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tenlog_command_handler()
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DETECT_TLS()
</UL>

<P><STRONG><a name="[18a]"></a>read_serial(serial_index_t)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, queue.o(i._Z11read_serial14serial_index_t))
<BR><BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::read()
</UL>
<BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::get_serial_commands()
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::gcode_line_error(const char*, serial_index_t)
</UL>

<P><STRONG><a name="[18b]"></a>showDWNLogo()</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, tenlog_touch_lcd.o(i._Z11showDWNLogov))
<BR><BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWN_Data(long, long, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_command_dwn()
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readWriteDWNLogo(int)
</UL>

<P><STRONG><a name="[18c]"></a>tool_change(unsigned char, bool)</STRONG> (Thumb, 606 bytes, Stack size 0 bytes, tool_change.o(i._Z11tool_changehb))
<BR><BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idex_set_parked(bool)
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsRunning()
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SERIAL_CHAR(char)
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::synchronize()
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echopair_PGM(const char*, unsigned char)
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_plan_position()
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echo_start()
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_motion_limits(XYZval&lang;float&rang;&)
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_blocking_move_to_z(float, float)
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_software_endstops(AxisEnum, unsigned char, unsigned char)
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invalid_extruder_error(unsigned char)
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dualx_tool_change(unsigned char, bool&)
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_line_to_current(AxisEnum)
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_blocking_move_to_xy(const XYval&lang;float&rang;&, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::T(signed char)
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G28()
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M605()
</UL>

<P><STRONG><a name="[199]"></a>DWN_Language(int)</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, tenlog_touch_lcd.o(i._Z12DWN_Languagei))
<BR><BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWN_Change_Icon(int, int, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_command_dwn()
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlInitSetting()
</UL>

<P><STRONG><a name="[19b]"></a>DWN_NORFData(long, long, int, bool)</STRONG> (Thumb, 210 bytes, Stack size 0 bytes, tenlog_touch_lcd.o(i._Z12DWN_NORFDatallib))
<BR><BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::write(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readWriteDWNLogo(int)
</UL>

<P><STRONG><a name="[37b]"></a>HAL_adc_init()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hal.o(i._Z12HAL_adc_initv))
<BR><BR>[Called By]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::init()
</UL>

<P><STRONG><a name="[248]"></a>HAL_idletask()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hal.o(i._Z12HAL_idletaskv))
<BR><BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle()
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::PID_autotune(short, heater_id_t, signed char, bool)
</UL>

<P><STRONG><a name="[170]"></a>TLSTJC_print(const char*)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tenlog_touch_lcd.o(i._Z12TLSTJC_printPKc))
<BR><BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TlIsPLR()
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TlLoadingMessage(const char*, int, int)
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tenlog_status_update(bool)
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DETECT_TLS()
</UL>

<P><STRONG><a name="[19d]"></a>WIFI_AllInit()</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, esp32_wifi.o(i._Z12WIFI_AllInitv))
<BR><BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_HardwareReset()
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_InitSPI1()
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_InitGPIO()
</UL>
<BR>[Called By]<UL><LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup
</UL>

<P><STRONG><a name="[1a1]"></a>announceOpen(unsigned char, const char*)</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, cardreader.o(i._Z12announceOpenhPKc))
<BR><BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SERIAL_CHAR(char)
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echopair_PGM(const char*, const char*)
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echo_start()
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::openFileWrite(const char*)
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::openFileRead(const char*, unsigned char)
</UL>

<P><STRONG><a name="[1a2]"></a>initTLScreen()</STRONG> (Thumb, 256 bytes, Stack size 0 bytes, tenlog_touch_lcd.o(i._Z12initTLScreenv))
<BR><BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_ReadUID
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay(unsigned long)
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SERIAL_CHAR(char)
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kill(const char*, const char*, bool)
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWN_Text(long, int, const char*, bool)
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWN_Page(int)
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLSTJC_printEmptyend()
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_command_dwn()
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readWriteDWNLogo(int)
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLSTJC_println(const char*)
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_command(int)
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DETECT_TLS()
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup
</UL>

<P><STRONG><a name="[356]"></a>lfn_checksum(const unsigned char*)</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, sdbasefile.o(i._Z12lfn_checksumPKh))
<BR><BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::readDir(directoryEntry*, char*)
</UL>

<P><STRONG><a name="[19e]"></a>WIFI_InitGPIO()</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, esp32_wifi.o(i._Z13WIFI_InitGPIOv))
<BR><BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetBits
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_AllInit()
</UL>

<P><STRONG><a name="[19f]"></a>WIFI_InitSPI1()</STRONG> (Thumb, 194 bytes, Stack size 0 bytes, esp32_wifi.o(i._Z13WIFI_InitSPI1v))
<BR><BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetFunc
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWC_Fcg1PeriphClockCmd
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_AllInit()
</UL>

<P><STRONG><a name="[1aa]"></a>flashFirmware(short)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hal.o(i._Z13flashFirmwares))
<BR><BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_reboot()
</UL>
<BR>[Called By]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M997()
</UL>

<P><STRONG><a name="[1ac]"></a>getResetCause()</STRONG> (Thumb, 220 bytes, Stack size 0 bytes, startup.o(i._Z13getResetCausev))
<BR><BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMU_GetResetCause
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init
</UL>

<P><STRONG><a name="[1ae]"></a>gpio_set_mode(unsigned char, WiringPinMode)</STRONG> (Thumb, 142 bytes, Stack size 0 bytes, wirish_digital.o(i._Z13gpio_set_modeh13WiringPinMode))
<BR><BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Endstops::init()
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::init()
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::init()
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::CardReader()
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plr_setup()
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC::send_byte(unsigned char)
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC::read_byte(unsigned char)
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC::wait_ack()
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC::start()
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC::stop()
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC::nAck()
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC::init()
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC::ack()
</UL>

<P><STRONG><a name="[1af]"></a>load_filament(int, int)</STRONG> (Thumb, 256 bytes, Stack size 0 bytes, tenlog_touch_lcd.o(i._Z13load_filamentii))
<BR><BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_subcommands_now(char*)
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_command_gcode(long*)
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_command_dwn()
</UL>

<P><STRONG><a name="[1b2]"></a>tlInitSetting()</STRONG> (Thumb, 938 bytes, Stack size 0 bytes, tenlog_touch_lcd.o(i._Z13tlInitSettingv))
<BR><BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay(unsigned long)
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLVersion()
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWN_Data(long, long, int)
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLSTJC_println(const char*)
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWN_Language(int)
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_command_dwn()
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWN_MessageHandler(bool)
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::_load()
</UL>

<P><STRONG><a name="[3ae]"></a>tlResetEEPROM()</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, tenlog_touch_lcd.o(i._Z13tlResetEEPROMv))
<BR><BR>[Called By]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::reset()
</UL>

<P><STRONG><a name="[1b4]"></a>watchdog_init()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, watchdog.o(i._Z13watchdog_initv))
<BR><BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iwdg_init
</UL>
<BR>[Called By]<UL><LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup
</UL>

<P><STRONG><a name="[208]"></a>ConvertHexLong(long*, int)</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, tenlog_touch_lcd.o(i._Z14ConvertHexLongPli))
<BR><BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_command_dwn()
</UL>

<P><STRONG><a name="[188]"></a>MTLSERIAL_read()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tenlog_touch_lcd.o(i._Z14MTLSERIAL_readv))
<BR><BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::read()
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_command(int)
</UL>

<P><STRONG><a name="[1b6]"></a>SDIO_ReadBlock(unsigned, unsigned char*)</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, sdio.o(i._Z14SDIO_ReadBlockjPh))
<BR><BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ReadBlock_DMA
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiskIODriver_SDIO::readBlock(unsigned, unsigned char*)
</UL>

<P><STRONG><a name="[16a]"></a>TLSTJC_println(const char*)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, tenlog_touch_lcd.o(i._Z14TLSTJC_printlnPKc))
<BR><BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(const char*)
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLSTJC_printend()
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLFilamentRunout()
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TlIsPLR()
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLSDPrintFinished()
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TlLoadingMessage(const char*, int, int)
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initTLScreen()
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TlPageMain()
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::plr_recovery()
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::tl_ls()
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLVersion()
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_outage()
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TJCPauseResumePrinting(bool, int)
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_command_gcode(long*)
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tenlog_status_update(bool)
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlInitSetting()
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DETECT_TLS()
</UL>

<P><STRONG><a name="[276]"></a>createFilename(char*, const directoryEntry&)</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, cardreader.o(i._Z14createFilenamePcRK14directoryEntry))
<BR><BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::tl_ls()
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::selectByName(SdFile, const char*)
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::printListing(SdFile, const char*)
</UL>

<P><STRONG><a name="[1b8]"></a>do_homing_move(AxisEnum, float, float, bool)</STRONG> (Thumb, 378 bytes, Stack size 0 bytes, motion.o(i._Z14do_homing_move8AxisEnumffb))
<BR><BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::synchronize()
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Endstops::validate_homing_move()
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;home_dir(AxisEnum)
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::set_machine_position_mm(float, float, float, float)
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::get_axis_position_mm(AxisEnum)
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::buffer_segment(float, float, float, float, float, unsigned char, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;homeaxis(AxisEnum)
</UL>

<P><STRONG><a name="[1be]"></a>do_z_clearance(float, bool)</STRONG> (Thumb, 144 bytes, Stack size 0 bytes, motion.o(i._Z14do_z_clearancefb))
<BR><BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_blocking_move_to_z(float, float)
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to motion_cpp]::NOLESS&lang;float, float&rang;(T1&, T2)
</UL>
<BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G28()
</UL>

<P><STRONG><a name="[1c0]"></a>serial_ternary(bool, const char*, const char*, const char*, const char*)</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, serial.o(i._Z14serial_ternarybPKcS0_S0_S0_))
<BR><BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup
</UL>

<P><STRONG><a name="[178]"></a>serialprintPGM(const char*)</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, serial.o(i._Z14serialprintPGMPKc))
<BR><BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SERIAL_CHAR(char)
</UL>
<BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M413()
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::report(bool)
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M504()
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::flush_and_request_resend(serial_index_t)
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M211()
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M111()
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M302()
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M301()
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_xyz(float, float, float, const char*, const char*)
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echopair_PGM(const char*, long)
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echopair_PGM(const char*, float)
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echopair_PGM(const char*, SerialChar)
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprint_onoff(bool)
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFilamentMonitor&lang;RunoutResponseDebounced, FilamentSensorSwitch&rang;::run()
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FilamentSensorSwitch::run()
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Endstops::event_handler()
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::load()
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::host_keepalive()
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::advance()
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepare_line_to_destination()
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_filament_runout(unsigned char)
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echopair_PGM(const char*, unsigned)
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echopair_PGM(const char*, int)
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echopair_PGM(const char*, unsigned char)
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echopair_PGM(const char*, const char*)
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_error_start()
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echo_start()
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_ternary(bool, const char*, const char*, const char*, const char*)
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initTLScreen()
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kill(const char*, const char*, bool)
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::write_command(char*)
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::get_serial_commands()
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::enqueue_one(const char*)
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::unknown_command_warning()
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M666()
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M412()
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M218()
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::RingBuffer::ok_to_send()
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::PID_autotune(short, heater_id_t, signed char, bool)
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M303()
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M105()
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M1001()
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::removeFile(const char*)
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::report_status()
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::printFilename()
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M27()
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::openFileRead(const char*, unsigned char)
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::mount()
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M20()
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G2_G3(bool)
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Endstops::report_states()
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M118()
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M115()
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to M115_cpp]::cap_line(const char*, bool)
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M428()
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to endstops_cpp]::print_es_state(bool, const char*)
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::plr_recovery()
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::tl_ls()
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TJCPauseResumePrinting(bool, int)
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_command_gcode(long*)
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PersistentStore::write_data(int&, const unsigned char*, unsigned, unsigned short*)
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::get_sdcard_commands()
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;announceOpen(unsigned char, const char*)
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openFailed(const char*)
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invalid_extruder_error(unsigned char)
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::analog_to_celsius_hotend(short, unsigned char)
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::_temp_error(heater_id_t, const char*, const char*)
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to temperature_cpp]::print_heater_state(float, float, float, heater_id_t)
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::EEPROM_START(int)
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to settings_cpp]::config_heading(bool, const char*, bool)
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::_populate_block(block_t*, bool, const XYZEval&lang;int&rang;&, float, unsigned char, float)
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_homing_bump_feedrate(AxisEnum)
</UL>

<P><STRONG><a name="[b3]"></a>stepTC_Handler()</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, board_tim0.o(i._Z14stepTC_Handlerv))
<BR><BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_ClearFlag
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_STEP_TIMER_ISR()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> board_tim0.o(i.setup_time2B)
</UL>
<P><STRONG><a name="[b2]"></a>tempTC_Handler()</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, board_tim0.o(i._Z14tempTC_Handlerv))
<BR><BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_ClearFlag
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TEMP_TIMER_ISR()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> board_tim0.o(i.setup_time2A)
</UL>
<P><STRONG><a name="[19a]"></a>DWN_Change_Icon(int, int, int)</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, tenlog_touch_lcd.o(i._Z15DWN_Change_Iconiii))
<BR><BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::write(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWN_Language(int)
</UL>

<P><STRONG><a name="[1c3]"></a>HAL_timer_start(unsigned char, unsigned)</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, timers.o(i._Z15HAL_timer_starthj))
<BR><BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_time2B
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_time2A
</UL>
<BR>[Called By]<UL><LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::init()
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::init()
</UL>

<P><STRONG><a name="[1c6]"></a>SDIO_WriteBlock(unsigned, const unsigned char*)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, sdio.o(i._Z15SDIO_WriteBlockjPKh))
<BR><BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_WriteBlockDMA
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiskIODriver_SDIO::writeBlock(unsigned, const unsigned char*)
</UL>

<P><STRONG><a name="[1c7]"></a>TLAbortPrinting()</STRONG> (Thumb, 118 bytes, Stack size 0 bytes, tenlog_touch_lcd.o(i._Z15TLAbortPrintingv))
<BR><BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stopwatch::stop()
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::plr_reset()
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::disable_all_heaters()
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::enqueue_one_now(const char*)
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::endFilePrint()
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quickstop_stepper()
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWN_Page(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_command_gcode(long*)
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWN_MessageHandler(bool)
</UL>

<P><STRONG><a name="[1b7]"></a>TLSTJC_printend()</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, tenlog_touch_lcd.o(i._Z15TLSTJC_printendv))
<BR><BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::write(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLSTJC_printEmptyend()
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLSTJC_println(const char*)
</UL>

<P><STRONG><a name="[1ce]"></a>abortSDPrinting()</STRONG> (Thumb, 108 bytes, Stack size 0 bytes, marlincore.o(i._Z15abortSDPrintingv))
<BR><BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stopwatch::stop()
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::plr_reset()
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::disable_all_heaters()
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::set_fan_speed(unsigned char, unsigned short)
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::enqueue_one_now(const char*)
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::endFilePrint()
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quickstop_stepper()
</UL>
<BR>[Called By]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop
</UL>

<P><STRONG><a name="[197]"></a>idex_set_parked(bool)</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, motion.o(i._Z15idex_set_parkedb))
<BR><BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tool_change(unsigned char, bool)
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G28()
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M605()
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dualx_tool_change(unsigned char, bool&)
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dual_x_carriage_unpark()
</UL>

<P><STRONG><a name="[1d0]"></a>set_home_offset(AxisEnum, float)</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, motion.o(i._Z15set_home_offset8AxisEnumf))
<BR><BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_workspace_offset(AxisEnum)
</UL>
<BR>[Called By]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M428()
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M206()
</UL>

<P><STRONG><a name="[1d2]"></a>Setting_ECO_MODE()</STRONG> (Thumb, 186 bytes, Stack size 0 bytes, tenlog_touch_lcd.o(i._Z16Setting_ECO_MODEv))
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::setTargetBed(short)
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::degTargetBed()
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tenlog_screen_update_dwn()
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tenlog_status_update(bool)
</UL>

<P><STRONG><a name="[1d4]"></a>TLFilamentRunout()</STRONG> (Thumb, 126 bytes, Stack size 0 bytes, tenlog_touch_lcd.o(i._Z16TLFilamentRunoutv))
<BR><BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_subcommands_now(char*)
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay(unsigned long)
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLSTJC_println(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_filament_runout(unsigned char)
</UL>

<P><STRONG><a name="[166]"></a>TenlogScreen_end()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tenlog_touch_lcd.o(i._Z16TenlogScreen_endv))
<BR><BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::end()
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DETECT_TLS()
</UL>

<P><STRONG><a name="[1d6]"></a>TlLoadingMessage(const char*, int, int)</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, tenlog_touch_lcd.o(i._Z16TlLoadingMessagePKcii))
<BR><BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay(unsigned long)
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWN_Text(long, int, const char*, bool)
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLSTJC_println(const char*)
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLSTJC_print(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup
</UL>

<P><STRONG><a name="[1d7]"></a>_line_to_current(AxisEnum, float)</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, tool_change.o(i._Z16_line_to_current8AxisEnumf))
<BR><BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_to_current_position(float)
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_line_to_current(AxisEnum)
</UL>

<P><STRONG><a name="[205]"></a>axes_should_home(unsigned char)</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, motion.o(i._Z16axes_should_homeh))
<BR><BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G28()
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Babystep::add_steps(AxisEnum, short)
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;homing_needed_error(unsigned char)
</UL>

<P><STRONG><a name="[1d9]"></a>eeprom_read_byte(unsigned char*)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, eeprom_if_iic.o(i._Z16eeprom_read_bytePh))
<BR><BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL24CXX::readOneByte(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PersistentStore::read_data(int&, unsigned char*, unsigned, unsigned short*, bool)
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PersistentStore::write_data(int&, const unsigned char*, unsigned, unsigned short*)
</UL>

<P><STRONG><a name="[46e]"></a>printingIsActive()</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, marlincore.o(i._Z16printingIsActivev))
<BR><BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFilamentMonitor&lang;RunoutResponseDebounced, FilamentSensorSwitch&rang;::run()
</UL>

<P><STRONG><a name="[1db]"></a>printingIsPaused()</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, marlincore.o(i._Z16printingIsPausedv))
<BR><BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::isFileOpen()
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startOrResumeJob()
</UL>

<P><STRONG><a name="[1a4]"></a>readWriteDWNLogo(int)</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, tenlog_touch_lcd.o(i._Z16readWriteDWNLogoi))
<BR><BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay(unsigned long)
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWN_RData(long, int)
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWN_Data(long, long, int)
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWN_NORFData(long, long, int, bool)
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showDWNLogo()
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initTLScreen()
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_command_dwn()
</UL>

<P><STRONG><a name="[1de]"></a>startOrResumeJob()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, marlincore.o(i._Z16startOrResumeJobv))
<BR><BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stopwatch::start()
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printingIsPaused()
</UL>
<BR>[Called By]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::auto_job_check_timer(bool, bool)
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M75()
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M32()
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M24()
</UL>

<P><STRONG><a name="[1e0]"></a>TLSDPrintFinished()</STRONG> (Thumb, 154 bytes, Stack size 0 bytes, tenlog_touch_lcd.o(i._Z17TLSDPrintFinishedv))
<BR><BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_sleep(float)
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::plr_reset()
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLSTJC_println(const char*)
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop
</UL>

<P><STRONG><a name="[191]"></a>dualx_tool_change(unsigned char, bool&)</STRONG> (Thumb, 190 bytes, Stack size 0 bytes, tool_change.o(i._Z17dualx_tool_changehRb))
<BR><BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idex_set_parked(bool)
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsRunning()
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::synchronize()
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::set_directions()
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_to_current_position(float)
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_axis_is_at_home(AxisEnum)
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x_home_pos(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tool_change(unsigned char, bool)
</UL>

<P><STRONG><a name="[1e5]"></a>eeprom_write_byte(unsigned char*, unsigned char)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, eeprom_if_iic.o(i._Z17eeprom_write_bytePhh))
<BR><BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL24CXX::writeOneByte(unsigned short, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PersistentStore::write_data(int&, const unsigned char*, unsigned, unsigned short*)
</UL>

<P><STRONG><a name="[1e7]"></a>enable_e_steppers()</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, marlincore.o(i._Z17enable_e_steppersv))
<BR><BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_ResetBitsMapp
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_all_steppers()
</UL>

<P><STRONG><a name="[1e8]"></a>manage_inactivity(bool)</STRONG> (Thumb, 358 bytes, Stack size 0 bytes, marlincore.o(i._Z17manage_inactivityb))
<BR><BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsRunning()
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SERIAL_CHAR(char)
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetBitsMapp
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::check_axes_activity()
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::synchronize()
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::get_available_commands()
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepare_line_to_destination()
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echopair_PGM(const char*, const char*)
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_error_start()
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kill(const char*, const char*, bool)
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disable_e_steppers()
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::isFileOpen()
</UL>
<BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle()
</UL>

<P><STRONG><a name="[1ee]"></a>process_line_done(unsigned char&, char(&)[96], int&)</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, queue.o(i._Z17process_line_doneRhRA96_cRi))
<BR><BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::manage_heater()
</UL>
<BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::get_serial_commands()
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::get_sdcard_commands()
</UL>

<P><STRONG><a name="[1c9]"></a>quickstop_stepper()</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, motion.o(i._Z17quickstop_stepperv))
<BR><BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::synchronize()
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_plan_position()
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::quick_stop()
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_current_from_steppers_for_axis(AxisEnum)
</UL>
<BR>[Called By]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M410()
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abortSDPrinting()
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::get_serial_commands()
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLAbortPrinting()
</UL>

<P><STRONG><a name="[17e]"></a>serial_echo_start()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, serial.o(i._Z17serial_echo_startv))
<BR><BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M413()
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::report(bool)
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M504()
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M211()
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M111()
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M302()
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M301()
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M221()
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::get_target_extruder_from_command()
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_M92(bool, signed char)
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tool_change(unsigned char, bool)
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Endstops::event_handler()
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::load()
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::host_keepalive()
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepare_line_to_destination()
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kill(const char*, const char*, bool)
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::enqueue_one(const char*)
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::unknown_command_warning()
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M412()
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M218()
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_next_command()
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M31()
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::openFileRead(const char*, unsigned char)
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::mount()
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M20()
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M290()
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M118()
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M113()
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;homing_needed_error(unsigned char)
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PersistentStore::write_data(int&, const unsigned char*, unsigned, unsigned short*)
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::printListing(SdFile, const char*)
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;announceOpen(unsigned char, const char*)
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invalid_extruder_error(unsigned char)
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::EEPROM_START(int)
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to settings_cpp]::config_heading(bool, const char*, bool)
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::_populate_block(block_t*, bool, const XYZEval&lang;int&rang;&, float, unsigned char, float)
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_homing_bump_feedrate(AxisEnum)
</UL>

<P><STRONG><a name="[1f1]"></a>serialprint_onoff(bool)</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, serial.o(i._Z17serialprint_onoffb))
<BR><BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M211()
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintln_onoff(bool)
</UL>

<P><STRONG><a name="[1f2]"></a>DWN_MessageHandler(bool)</STRONG> (Thumb, 336 bytes, Stack size 0 bytes, tenlog_touch_lcd.o(i._Z18DWN_MessageHandlerb))
<BR><BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_subcommands_now(char*)
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay(unsigned long)
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::synchronize()
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::closefile(bool)
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::plr_fn_save(int)
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWN_Text(long, int, const char*, bool)
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWN_Page(int)
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLAbortPrinting()
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlInitSetting()
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::isFileOpen()
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_command_dwn()
</UL>

<P><STRONG><a name="[1c1]"></a>HAL_STEP_TIMER_ISR()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stepper.o(i._Z18HAL_STEP_TIMER_ISRv))
<BR><BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::isr()
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stepTC_Handler()
</UL>

<P><STRONG><a name="[1c2]"></a>HAL_TEMP_TIMER_ISR()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, temperature.o(i._Z18HAL_TEMP_TIMER_ISRv))
<BR><BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::isr()
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tempTC_Handler()
</UL>

<P><STRONG><a name="[167]"></a>TenlogScreen_begin(long)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tenlog_touch_lcd.o(i._Z18TenlogScreen_beginl))
<BR><BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::begin(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DETECT_TLS()
</UL>

<P><STRONG><a name="[1a0]"></a>WIFI_HardwareReset()</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, esp32_wifi.o(i._Z18WIFI_HardwareResetv))
<BR><BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetBits
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_ResetBits
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ddl_Delay1ms
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_AllInit()
</UL>

<P><STRONG><a name="[1eb]"></a>disable_e_steppers()</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, marlincore.o(i._Z18disable_e_steppersv))
<BR><BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetBitsMapp
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;manage_inactivity(bool)
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;minkill(bool)
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disable_all_steppers()
</UL>

<P><STRONG><a name="[1ea]"></a>serial_error_start()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, serial.o(i._Z18serial_error_startv))
<BR><BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M301()
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;manage_inactivity(bool)
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kill(const char*, const char*, bool)
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::write_command(char*)
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::get_serial_commands()
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::gcode_line_error(const char*, serial_index_t)
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::openFileRead(const char*, unsigned char)
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::mount()
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G2_G3(bool)
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M428()
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::get_sdcard_commands()
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::analog_to_celsius_hotend(short, unsigned char)
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::_temp_error(heater_id_t, const char*, const char*)
</UL>

<P><STRONG><a name="[192]"></a>sync_plan_position()</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, motion.o(i._Z18sync_plan_positionv))
<BR><BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::set_position_mm(float, float, float, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G92()
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;homeaxis(AxisEnum)
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tool_change(unsigned char, bool)
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G28()
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quickstop_stepper()
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dual_x_carriage_unpark()
</UL>

<P><STRONG><a name="[189]"></a>MTLSERIAL_available()</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, tenlog_touch_lcd.o(i._Z19MTLSERIAL_availablev))
<BR><BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::available()
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_command(int)
</UL>

<P><STRONG><a name="[b7]"></a>Usart1RxIrqCallback()</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, usart.o(i._Z19Usart1RxIrqCallbackv))
<BR><BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_RecData
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to usart_c]::rb_remove(ring_buffer*)
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to usart_c]::rb_insert(ring_buffer*, unsigned char)
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to usart_c]::rb_is_full(ring_buffer*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart.o(i.usart_enable)
</UL>
<P><STRONG><a name="[bf]"></a>Usart1TxIrqCallback()</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, usart.o(i._Z19Usart1TxIrqCallbackv))
<BR><BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_FuncCmd
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to usart_c]::rb_remove(ring_buffer*)
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to usart_c]::rb_is_empty(ring_buffer*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart.o(i.usart_enable)
</UL>
<P><STRONG><a name="[b6]"></a>Usart2RxIrqCallback()</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, usart.o(i._Z19Usart2RxIrqCallbackv))
<BR><BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_RecData
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to usart_c]::rb_remove(ring_buffer*)
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to usart_c]::rb_insert(ring_buffer*, unsigned char)
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to usart_c]::rb_is_full(ring_buffer*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart.o(i.usart_enable)
</UL>
<P><STRONG><a name="[be]"></a>Usart2TxIrqCallback()</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, usart.o(i._Z19Usart2TxIrqCallbackv))
<BR><BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_FuncCmd
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to usart_c]::rb_remove(ring_buffer*)
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to usart_c]::rb_is_empty(ring_buffer*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart.o(i.usart_enable)
</UL>
<P><STRONG><a name="[b5]"></a>Usart3RxIrqCallback()</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, usart.o(i._Z19Usart3RxIrqCallbackv))
<BR><BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_RecData
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to usart_c]::rb_remove(ring_buffer*)
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to usart_c]::rb_insert(ring_buffer*, unsigned char)
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to usart_c]::rb_is_full(ring_buffer*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart.o(i.usart_enable)
</UL>
<P><STRONG><a name="[bd]"></a>Usart3TxIrqCallback()</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, usart.o(i._Z19Usart3TxIrqCallbackv))
<BR><BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_FuncCmd
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to usart_c]::rb_remove(ring_buffer*)
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to usart_c]::rb_is_empty(ring_buffer*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart.o(i.usart_enable)
</UL>
<P><STRONG><a name="[b4]"></a>Usart4RxIrqCallback()</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, usart.o(i._Z19Usart4RxIrqCallbackv))
<BR><BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_RecData
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to usart_c]::rb_remove(ring_buffer*)
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to usart_c]::rb_insert(ring_buffer*, unsigned char)
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to usart_c]::rb_is_full(ring_buffer*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart.o(i.usart_enable)
</UL>
<P><STRONG><a name="[bc]"></a>Usart4TxIrqCallback()</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, usart.o(i._Z19Usart4TxIrqCallbackv))
<BR><BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_FuncCmd
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to usart_c]::rb_remove(ring_buffer*)
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to usart_c]::rb_is_empty(ring_buffer*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart.o(i.usart_enable)
</UL>
<P><STRONG><a name="[194]"></a>apply_motion_limits(XYZval&lang;float&rang;&)</STRONG> (Thumb, 182 bytes, Stack size 0 bytes, motion.o(i._Z19apply_motion_limitsR6XYZvalIfE))
<BR><BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to motion_cpp]::NOMORE&lang;float, float&rang;(T1&, T2)
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to motion_cpp]::NOLESS&lang;float, float&rang;(T1&, T2)
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tool_change(unsigned char, bool)
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepare_line_to_destination()
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_arc(const XYZEval&lang;float&rang;&, const XYval&lang;float&rang;&, bool, unsigned char)
</UL>

<P><STRONG><a name="[202]"></a>do_blocking_move_to(float, float, float, float)</STRONG> (Thumb, 206 bytes, Stack size 0 bytes, motion.o(i._Z19do_blocking_move_toffff))
<BR><BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::synchronize()
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_to_current_position(float)
</UL>
<BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_blocking_move_to_xy(float, float, float)
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_blocking_move_to_xy_z(const XYval&lang;float&rang;&, float, float)
</UL>

<P><STRONG><a name="[203]"></a>enable_all_steppers()</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, marlincore.o(i._Z19enable_all_steppersv))
<BR><BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_ResetBitsMapp
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_e_steppers()
</UL>
<BR>[Called By]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M17()
</UL>

<P><STRONG><a name="[204]"></a>homing_needed_error(unsigned char)</STRONG> (Thumb, 106 bytes, Stack size 0 bytes, motion.o(i._Z19homing_needed_errorh))
<BR><BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;axes_should_home(unsigned char)
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echo_start()
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void SERIAL_ECHOLN&lang;char*&rang;(T1)
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M428()
</UL>

<P><STRONG><a name="[1a5]"></a>process_command_dwn()</STRONG> (Thumb, 4692 bytes, Stack size 0 bytes, tenlog_touch_lcd.o(i._Z19process_command_dwnv))
<BR><BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_subcommands_now(char*)
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_sleep(float)
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay(unsigned long)
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disable_all_steppers()
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::setTargetBed(short)
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::setTargetHotend(short, unsigned char)
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dtostrf
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::tl_ls()
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWN_Page(int)
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWN_Data(long, long, int)
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWN_LED(int)
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWN_MessageHandler(bool)
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readWriteDWNLogo(int)
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConvertHexLong(long*, int)
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlInitSetting()
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_filament(int, int)
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWN_Language(int)
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showDWNLogo()
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWN_Message(int, const char*, bool)
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWN_VClick(int, int)
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::isFileOpen()
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initTLScreen()
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tenlog_command_handler()
</UL>

<P><STRONG><a name="[29e]"></a>process_stream_char(char, unsigned char&, char(&)[96], int&)</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, queue.o(i._Z19process_stream_charcRhRA96_cRi))
<BR><BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::get_serial_commands()
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::get_sdcard_commands()
</UL>

<P><STRONG><a name="[20d]"></a>serial_echopair_PGM(const char*, SerialChar)</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, serial.o(i._Z19serial_echopair_PGMPKc10SerialChar))
<BR><BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SERIAL_CHAR(char)
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_software_endstops(AxisEnum, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[16e]"></a>serial_echopair_PGM(const char*, const char*)</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, serial.o(i._Z19serial_echopair_PGMPKcS0_))
<BR><BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void SERIAL_ECHO&lang;const char*&rang;(T1)
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;manage_inactivity(bool)
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::enqueue_one(const char*)
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::unknown_command_warning()
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M31()
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::removeFile(const char*)
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::openFileRead(const char*, unsigned char)
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DETECT_TLS()
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::printListing(SdFile, const char*)
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;announceOpen(unsigned char, const char*)
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openFailed(const char*)
</UL>

<P><STRONG><a name="[20f]"></a>serial_echopair_PGM(const char*, bool)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, settings.o(i._Z19serial_echopair_PGMPKcb))
<BR><BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echopair_PGM(const char*, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::report(bool)
</UL>

<P><STRONG><a name="[17f]"></a>serial_echopair_PGM(const char*, float)</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, serial.o(i._Z19serial_echopair_PGMPKcf))
<BR><BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void SERIAL_ECHO&lang;float&rang;(T1)
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::report(bool)
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M301()
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M204()
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_M92(bool, signed char)
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_xyz(float, float, float, const char*, const char*)
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Endstops::event_handler()
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M666()
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::PID_autotune(short, heater_id_t, signed char, bool)
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M206_report()
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_software_endstops(AxisEnum, unsigned char, unsigned char)
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M217_report(bool)
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to temperature_cpp]::print_heater_state(float, float, float, heater_id_t)
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_logical_position(const XYZEval&lang;float&rang;&)
</UL>

<P><STRONG><a name="[198]"></a>serial_echopair_PGM(const char*, unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, serial.o(i._Z19serial_echopair_PGMPKch))
<BR><BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void SERIAL_ECHO&lang;unsigned char&rang;(T1)
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::report(bool)
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tool_change(unsigned char, bool)
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFilamentMonitor&lang;RunoutResponseDebounced, FilamentSensorSwitch&rang;::run()
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M113()
</UL>

<P><STRONG><a name="[164]"></a>serial_echopair_PGM(const char*, int)</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, serial.o(i._Z19serial_echopair_PGMPKci))
<BR><BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void SERIAL_ECHO&lang;int&rang;(T1)
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::report(bool)
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M302()
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M221()
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M220()
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::get_target_extruder_from_command()
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FilamentSensorSwitch::run()
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::print_heater_states(unsigned char)
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::openFileRead(const char*, unsigned char)
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M290()
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DETECT_TLS()
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echopair_PGM(const char*, bool)
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::report_a_position(const XYZval&lang;int&rang;&)
</UL>

<P><STRONG><a name="[213]"></a>serial_echopair_PGM(const char*, unsigned)</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, serial.o(i._Z19serial_echopair_PGMPKcj))
<BR><BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void SERIAL_ECHO&lang;unsigned&rang;(T1)
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_subcommands_now_P(const char*)
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::report_status()
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::openFileRead(const char*, unsigned char)
</UL>

<P><STRONG><a name="[215]"></a>serial_echopair_PGM(const char*, long)</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, serial.o(i._Z19serial_echopair_PGMPKcl))
<BR><BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void SERIAL_ECHO&lang;long&rang;(T1)
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::gcode_line_error(const char*, serial_index_t)
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::PID_autotune(short, heater_id_t, signed char, bool)
</UL>

<P><STRONG><a name="[217]"></a>serialprintln_onoff(bool)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, serial.o(i._Z19serialprintln_onoffb))
<BR><BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprint_onoff(bool)
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SERIAL_CHAR(char)
</UL>
<BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M413()
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M412()
</UL>

<P><STRONG><a name="[1e3]"></a>set_axis_is_at_home(AxisEnum)</STRONG> (Thumb, 152 bytes, Stack size 0 bytes, motion.o(i._Z19set_axis_is_at_home8AxisEnum))
<BR><BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_workspace_offset(AxisEnum)
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x_home_pos(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;homeaxis(AxisEnum)
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dualx_tool_change(unsigned char, bool&)
</UL>

<P><STRONG><a name="[45d]"></a>HAL_get_reset_source()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hal.o(i._Z20HAL_get_reset_sourcev))
<BR><BR>[Called By]<UL><LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup
</UL>

<P><STRONG><a name="[218]"></a>HAL_watchdog_refresh()</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, watchdog.o(i._Z20HAL_watchdog_refreshv))
<BR><BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iwdg_feed
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::manage_heater()
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;minkill(bool)
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle()
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_read
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::get_sdcard_commands()
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::updateTemperaturesFromRawValues()
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::_temp_error(heater_id_t, const char*, const char*)
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::AWAIT_TIMED_PULSE(unsigned char)
</UL>

<P><STRONG><a name="[168]"></a>TLSTJC_printEmptyend()</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, tenlog_touch_lcd.o(i._Z20TLSTJC_printEmptyendv))
<BR><BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::write(int)
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLSTJC_printend()
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initTLScreen()
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DETECT_TLS()
</UL>

<P><STRONG><a name="[bb]"></a>Usart1ErrIrqCallback()</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, usart.o(i._Z20Usart1ErrIrqCallbackv))
<BR><BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetStatus
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart.o(i.usart_enable)
</UL>
<P><STRONG><a name="[ba]"></a>Usart2ErrIrqCallback()</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, usart.o(i._Z20Usart2ErrIrqCallbackv))
<BR><BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetStatus
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart.o(i.usart_enable)
</UL>
<P><STRONG><a name="[b9]"></a>Usart3ErrIrqCallback()</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, usart.o(i._Z20Usart3ErrIrqCallbackv))
<BR><BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetStatus
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart.o(i.usart_enable)
</UL>
<P><STRONG><a name="[b8]"></a>Usart4ErrIrqCallback()</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, usart.o(i._Z20Usart4ErrIrqCallbackv))
<BR><BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetStatus
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart.o(i.usart_enable)
</UL>
<P><STRONG><a name="[45f]"></a>calibrate_delay_loop()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, delay.o(i._Z20calibrate_delay_loopv))
<BR><BR>[Called By]<UL><LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup
</UL>

<P><STRONG><a name="[20b]"></a>disable_all_steppers()</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, marlincore.o(i._Z20disable_all_steppersv))
<BR><BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetBitsMapp
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disable_e_steppers()
</UL>
<BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::finish_and_disable()
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;minkill(bool)
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_command_gcode(long*)
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_command_dwn()
</UL>

<P><STRONG><a name="[190]"></a>fast_line_to_current(AxisEnum)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, tool_change.o(i._Z20fast_line_to_current8AxisEnum))
<BR><BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_line_to_current(AxisEnum, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tool_change(unsigned char, bool)
</UL>

<P><STRONG><a name="[21c]"></a>reset_hotend_offsets()</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, motion.o(i._Z20reset_hotend_offsetsv))
<BR><BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::reset()
</UL>

<P><STRONG><a name="[21d]"></a>sync_plan_position_e()</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, motion.o(i._Z20sync_plan_position_ev))
<BR><BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::set_e_position_mm(float)
</UL>
<BR>[Called By]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G92()
</UL>

<P><STRONG><a name="[21f]"></a>tenlog_screen_update()</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, tenlog_touch_lcd.o(i._Z20tenlog_screen_updatev))
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tenlog_screen_update_dwn()
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tenlog_status_update(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TL_idle()
</UL>

<P><STRONG><a name="[221]"></a>tenlog_status_update(bool)</STRONG> (Thumb, 626 bytes, Stack size 0 bytes, tenlog_touch_lcd.o(i._Z20tenlog_status_updateb))
<BR><BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay(unsigned long)
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::degHotend(unsigned char)
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::isHeatingHotend(unsigned char)
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::degTargetHotend(unsigned char)
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::isHeatingBed()
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::degTargetBed()
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::percentDone()
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setting_ECO_MODE()
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLSTJC_println(const char*)
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLSTJC_print(const char*)
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::isFileOpen()
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tenlog_screen_update()
</UL>

<P><STRONG><a name="[227]"></a>HAL_timer_set_compare(unsigned char, unsigned short)</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, timers.o(i._Z21HAL_timer_set_compareht))
<BR><BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_set_compare
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::isr()
</UL>

<P><STRONG><a name="[196]"></a>do_blocking_move_to_z(float, float)</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, motion.o(i._Z21do_blocking_move_to_zff))
<BR><BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_blocking_move_to_xy_z(const XYval&lang;float&rang;&, float, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nozzle::park(unsigned char, const XYZval&lang;float&rang;&)
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_z_clearance(float, bool)
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tool_change(unsigned char, bool)
</UL>

<P><STRONG><a name="[22a]"></a>event_filament_runout(unsigned char)</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, runout.o(i._Z21event_filament_runouth))
<BR><BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLFilamentRunout()
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFilamentMonitor&lang;RunoutResponseDebounced, FilamentSensorSwitch&rang;::run()
</UL>

<P><STRONG><a name="[22b]"></a>process_command_gcode(long*)</STRONG> (Thumb, 3998 bytes, Stack size 0 bytes, tenlog_touch_lcd.o(i._Z21process_command_gcodePl))
<BR><BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_subcommands_now(char*)
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_sleep(float)
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay(unsigned long)
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SERIAL_CHAR(char)
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::plr_reset()
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disable_all_steppers()
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::setTargetBed(short)
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::setTargetHotend(short, unsigned char)
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dtostrf
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::plr_recovery()
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::plr_fn_save(int)
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::tl_ls()
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodelng(char, long, long*, bool)
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TJCPauseResumePrinting(bool, int)
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLAbortPrinting()
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLSTJC_println(const char*)
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_filament(int, int)
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tenlog_command_handler()
</UL>

<P><STRONG><a name="[3ad]"></a>reset_stepper_drivers()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, indirection.o(i._Z21reset_stepper_driversv))
<BR><BR>[Called By]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::reset()
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::_load()
</UL>

<P><STRONG><a name="[45e]"></a>HAL_clear_reset_source()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hal.o(i._Z22HAL_clear_reset_sourcev))
<BR><BR>[Called By]<UL><LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup
</UL>

<P><STRONG><a name="[22f]"></a>TJCPauseResumePrinting(bool, int)</STRONG> (Thumb, 930 bytes, Stack size 0 bytes, tenlog_touch_lcd.o(i._Z22TJCPauseResumePrintingbi))
<BR><BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_subcommands_now(char*)
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_sleep(float)
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay(unsigned long)
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SERIAL_CHAR(char)
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::setTargetHotend(short, unsigned char)
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::degTargetHotend(unsigned char)
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::degTargetBed()
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodelng(char, long, long*, bool)
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLSTJC_println(const char*)
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_command_gcode(long*)
</UL>

<P><STRONG><a name="[195]"></a>do_blocking_move_to_xy(const XYval&lang;float&rang;&, float)</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, motion.o(i._Z22do_blocking_move_to_xyRK5XYvalIfEf))
<BR><BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_blocking_move_to_xy(float, float, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tool_change(unsigned char, bool)
</UL>

<P><STRONG><a name="[232]"></a>do_blocking_move_to_xy(float, float, float)</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, motion.o(i._Z22do_blocking_move_to_xyfff))
<BR><BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_blocking_move_to(float, float, float, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nozzle::park(unsigned char, const XYZval&lang;float&rang;&)
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_blocking_move_to_xy(const XYval&lang;float&rang;&, float)
</UL>

<P><STRONG><a name="[233]"></a>dual_x_carriage_unpark()</STRONG> (Thumb, 558 bytes, Stack size 0 bytes, motion.o(i._Z22dual_x_carriage_unparkv))
<BR><BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_duplication_enabled(bool, signed char)
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idex_set_parked(bool)
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::synchronize()
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_plan_position()
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::buffer_line(float, float, float, float, float, unsigned char, float)
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::set_directions()
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::set_position_mm(float, float, float, float)
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_to_current_position(float)
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to motion_cpp]::NOLESS&lang;float, float&rang;(T1&, T2)
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepare_line_to_destination()
</UL>

<P><STRONG><a name="[236]"></a>idex_set_mirrored_mode(bool)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, motion.o(i._Z22idex_set_mirrored_modeb))
<BR><BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::set_directions()
</UL>
<BR>[Called By]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M605()
</UL>

<P><STRONG><a name="[18e]"></a>invalid_extruder_error(unsigned char)</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, tool_change.o(i._Z22invalid_extruder_errorh))
<BR><BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void SERIAL_ECHO&lang;unsigned char&rang;(T1)
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SERIAL_CHAR(char)
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echo_start()
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tool_change(unsigned char, bool)
</UL>

<P><STRONG><a name="[237]"></a>tenlog_command_handler()</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, tenlog_touch_lcd.o(i._Z22tenlog_command_handlerv))
<BR><BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_command_gcode(long*)
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_command_dwn()
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_command(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TL_idle()
</UL>

<P><STRONG><a name="[238]"></a>report_current_position()</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, motion.o(i._Z23report_current_positionv))
<BR><BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_logical_position(const XYZEval&lang;float&rang;&)
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::report_positions()
</UL>
<BR>[Called By]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G92()
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nozzle::park(unsigned char, const XYZval&lang;float&rang;&)
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G28()
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M428()
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M206()
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::postprocess()
</UL>

<P><STRONG><a name="[239]"></a>report_logical_position(const XYZEval&lang;float&rang;&)</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, motion.o(i._Z23report_logical_positionRK7XYZEvalIfE))
<BR><BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echopair_PGM(const char*, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_current_position()
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_current_position_projected()
</UL>

<P><STRONG><a name="[235]"></a>set_duplication_enabled(bool, signed char)</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, motion.o(i._Z23set_duplication_enabledba))
<BR><BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::set_directions()
</UL>
<BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G28()
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M605()
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dual_x_carriage_unpark()
</UL>

<P><STRONG><a name="[1d1]"></a>update_workspace_offset(AxisEnum)</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, motion.o(i._Z23update_workspace_offset8AxisEnum))
<BR><BR>[Called By]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G92()
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_home_offset(AxisEnum, float)
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::postprocess()
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_axis_is_at_home(AxisEnum)
</UL>

<P><STRONG><a name="[23b]"></a>HAL_adc_start_conversion(unsigned char)</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, hal.o(i._Z24HAL_adc_start_conversionh))
<BR><BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_read
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::isr()
</UL>

<P><STRONG><a name="[c3]"></a>Usart1TxCmpltIrqCallback()</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, usart.o(i._Z24Usart1TxCmpltIrqCallbackv))
<BR><BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_FuncCmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart.o(i.usart_enable)
</UL>
<P><STRONG><a name="[c2]"></a>Usart2TxCmpltIrqCallback()</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, usart.o(i._Z24Usart2TxCmpltIrqCallbackv))
<BR><BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_FuncCmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart.o(i.usart_enable)
</UL>
<P><STRONG><a name="[c1]"></a>Usart3TxCmpltIrqCallback()</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, usart.o(i._Z24Usart3TxCmpltIrqCallbackv))
<BR><BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_FuncCmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart.o(i.usart_enable)
</UL>
<P><STRONG><a name="[c0]"></a>Usart4TxCmpltIrqCallback()</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, usart.o(i._Z24Usart4TxCmpltIrqCallbackv))
<BR><BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_FuncCmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart.o(i.usart_enable)
</UL>
<P><STRONG><a name="[229]"></a>do_blocking_move_to_xy_z(const XYval&lang;float&rang;&, float, float)</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, motion.o(i._Z24do_blocking_move_to_xy_zRK5XYvalIfEff))
<BR><BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_blocking_move_to(float, float, float, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_blocking_move_to_z(float, float)
</UL>

<P><STRONG><a name="[23d]"></a>get_homing_bump_feedrate(AxisEnum)</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, motion.o(i._Z24get_homing_bump_feedrate8AxisEnum))
<BR><BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echo_start()
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;homeaxis(AxisEnum)
</UL>

<P><STRONG><a name="[1d8]"></a>line_to_current_position(float)</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, motion.o(i._Z24line_to_current_positionf))
<BR><BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::buffer_line(float, float, float, float, float, unsigned char, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dualx_tool_change(unsigned char, bool&)
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_line_to_current(AxisEnum, float)
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dual_x_carriage_unpark()
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_blocking_move_to(float, float, float, float)
</UL>

<P><STRONG><a name="[220]"></a>tenlog_screen_update_dwn()</STRONG> (Thumb, 1530 bytes, Stack size 0 bytes, tenlog_touch_lcd.o(i._Z24tenlog_screen_update_dwnv))
<BR><BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay(unsigned long)
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::degHotend(unsigned char)
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::isHeatingHotend(unsigned char)
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::degTargetHotend(unsigned char)
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::isHeatingBed()
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::degTargetBed()
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::percentDone()
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWN_Text(long, int, const char*, bool)
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWN_Page(int)
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWN_Data(long, long, int)
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWN_LED(int)
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setting_ECO_MODE()
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::isFileOpen()
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tenlog_screen_update()
</UL>

<P><STRONG><a name="[18f]"></a>update_software_endstops(AxisEnum, unsigned char, unsigned char)</STRONG> (Thumb, 348 bytes, Stack size 0 bytes, motion.o(i._Z24update_software_endstops8AxisEnumhh))
<BR><BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echopair_PGM(const char*, float)
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echopair_PGM(const char*, SerialChar)
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SERIAL_CHAR(char)
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tool_change(unsigned char, bool)
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M605()
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::postprocess()
</UL>

<P><STRONG><a name="[23e]"></a>HAL_timer_interrupt_enabled(unsigned char)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, timers.o(i._Z27HAL_timer_interrupt_enabledh))
<BR><BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_irq_enabled
</UL>
<BR>[Called By]<UL><LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::suspend()
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::quick_stop()
</UL>

<P><STRONG><a name="[240]"></a>get_cartesian_from_steppers()</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, motion.o(i._Z27get_cartesian_from_steppersv))
<BR><BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::get_axis_position_mm(AxisEnum)
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_current_from_steppers_for_axis(AxisEnum)
</UL>

<P><STRONG><a name="[1ec]"></a>prepare_line_to_destination()</STRONG> (Thumb, 382 bytes, Stack size 0 bytes, motion.o(i._Z27prepare_line_to_destinationv))
<BR><BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echo_start()
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::buffer_line(float, float, float, float, float, unsigned char, float)
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_motion_limits(XYZval&lang;float&rang;&)
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dual_x_carriage_unpark()
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::set_e_position_mm(float)
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;const T1 [local to motion_cpp]::ABS&lang;float&rang;(T1)
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;manage_inactivity(bool)
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G0_G1()
</UL>

<P><STRONG><a name="[315]"></a>restore_feedrate_and_scaling()</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, motion.o(i._Z28restore_feedrate_and_scalingv))
<BR><BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G28()
</UL>

<P><STRONG><a name="[243]"></a>remember_feedrate_and_scaling()</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, motion.o(i._Z29remember_feedrate_and_scalingv))
<BR><BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remember_feedrate_scaling_off()
</UL>

<P><STRONG><a name="[242]"></a>remember_feedrate_scaling_off()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, motion.o(i._Z29remember_feedrate_scaling_offv))
<BR><BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remember_feedrate_and_scaling()
</UL>
<BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G28()
</UL>

<P><STRONG><a name="[244]"></a>report_current_position_projected()</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, motion.o(i._Z33report_current_position_projectedv))
<BR><BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_logical_position(const XYZEval&lang;float&rang;&)
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::report_a_position(const XYZval&lang;int&rang;&)
</UL>
<BR>[Called By]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M114()
</UL>

<P><STRONG><a name="[1f0]"></a>set_current_from_steppers_for_axis(AxisEnum)</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, motion.o(i._Z34set_current_from_steppers_for_axis8AxisEnum))
<BR><BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::get_axis_position_mm(AxisEnum)
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_cartesian_from_steppers()
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quickstop_stepper()
</UL>

<P><STRONG><a name="[246]"></a>idle()</STRONG> (Thumb, 116 bytes, Stack size 0 bytes, marlincore.o(i._Z4idlev))
<BR><BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFilamentMonitor&lang;RunoutResponseDebounced, FilamentSensorSwitch&rang;::run()
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;manage_inactivity(bool)
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::AutoReportTemp::report()
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::manage_heater()
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::host_keepalive()
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::manage_media()
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TL_idle()
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_watchdog_refresh()
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_idletask()
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plr_outage()
</UL>
<BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::finish_and_disable()
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_sleep(float)
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::synchronize()
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::enqueue_one_now(const char*)
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::wait_for_bed(bool)
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::wait_for_hotend(unsigned char, bool)
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::dwell(unsigned)
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_arc(const XYZEval&lang;float&rang;&, const XYval&lang;float&rang;&, bool, unsigned char)
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::buffer_sync_block()
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::_buffer_steps(const XYZEval&lang;int&rang;&, float, unsigned char, float)
</UL>

<P><STRONG><a name="[1a6]"></a>kill(const char*, const char*, bool)</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, marlincore.o(i._Z4killPKcS0_b))
<BR><BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SERIAL_CHAR(char)
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::disable_all_heaters()
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_error_start()
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echo_start()
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;minkill(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M112()
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;manage_inactivity(bool)
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initTLScreen()
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::get_serial_commands()
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::openFileRead(const char*, unsigned char)
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Endstops::validate_homing_move()
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_outage()
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::get_sdcard_commands()
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::analog_to_celsius_hotend(short, unsigned char)
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::_temp_error(heater_id_t, const char*, const char*)
</UL>

<P><STRONG><a name="[3b1]"></a>crc16(unsigned short*, const void*, unsigned short)</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, crc16.o(i._Z5crc16PtPKvt))
<BR><BR>[Called By]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PersistentStore::read_data(int&, unsigned char*, unsigned, unsigned short*, bool)
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PersistentStore::write_data(int&, const unsigned char*, unsigned, unsigned short*)
</UL>

<P><STRONG><a name="[163]"></a>delay(unsigned long)</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, wirish_time.o(i._Z5delaym))
<BR><BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yield
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLFilamentRunout()
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TlIsPLR()
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TlLoadingMessage(const char*, int, int)
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initTLScreen()
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;safe_delay(unsigned)
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TlPageMain()
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::mount()
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::plr_recovery()
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::tl_ls()
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLVersion()
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tenlog_screen_update_dwn()
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TJCPauseResumePrinting(bool, int)
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_command_gcode(long*)
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tenlog_status_update(bool)
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_command_dwn()
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWN_MessageHandler(bool)
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readWriteDWNLogo(int)
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlInitSetting()
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_command(int)
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWN_Message(int, const char*, bool)
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DETECT_TLS()
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL24CXX::writeOneByte(unsigned short, unsigned char)
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PersistentStore::write_data(int&, const unsigned char*, unsigned, unsigned short*)
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to temperature_cpp]::print_heater_state(float, float, float, heater_id_t)
</UL>

<P><STRONG><a name="[207]"></a>DWN_LED(int)</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, tenlog_touch_lcd.o(i._Z7DWN_LEDi))
<BR><BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::write(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tenlog_screen_update_dwn()
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_command_dwn()
</UL>

<P><STRONG><a name="[24b]"></a>TL_idle()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tenlog_touch_lcd.o(i._Z7TL_idlev))
<BR><BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tenlog_command_handler()
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tenlog_screen_update()
</UL>
<BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle()
</UL>

<P><STRONG><a name="[24f]"></a>TlIsPLR()</STRONG> (Thumb, 234 bytes, Stack size 0 bytes, tenlog_touch_lcd.o(i._Z7TlIsPLRv))
<BR><BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay(unsigned long)
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::mount()
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::isMounted()
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::fileExists(const char*)
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWN_Page(int)
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLSTJC_println(const char*)
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLSTJC_print(const char*)
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup
</UL>

<P><STRONG><a name="[17a]"></a>_outage()</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, tenlog_touch_lcd.o(i._Z7_outagev))
<BR><BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_ResetBitsMapp
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kill(const char*, const char*, bool)
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::degTargetHotend(unsigned char)
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::plr_save(unsigned, short, short, short, short, float, float)
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWN_Page(int)
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLSTJC_println(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plr_outage()
</UL>

<P><STRONG><a name="[24d]"></a>minkill(bool)</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, marlincore.o(i._Z7minkillb))
<BR><BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::disable_all_heaters()
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_watchdog_refresh()
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_reboot()
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disable_all_steppers()
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disable_e_steppers()
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ddl_Delay1us
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kill(const char*, const char*, bool)
</UL>

<P><STRONG><a name="[255]"></a>pinMode(unsigned char, WiringPinMode)</STRONG> (Thumb, 172 bytes, Stack size 0 bytes, wirish_digital_f1.o(i._Z7pinModeh13WiringPinMode))
<BR><BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::init()
</UL>

<P><STRONG><a name="[ce]"></a>premain()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, main.o(i._Z7premainv))
<BR><BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.init_array.00101)
</UL>
<P><STRONG><a name="[183]"></a>DWN_Data(long, long, int)</STRONG> (Thumb, 244 bytes, Stack size 0 bytes, tenlog_touch_lcd.o(i._Z8DWN_Datalli))
<BR><BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::write(int)
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::write(long)
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::tl_ls()
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tenlog_screen_update_dwn()
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_command_dwn()
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readWriteDWNLogo(int)
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlInitSetting()
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showDWNLogo()
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWN_Message(int, const char*, bool)
</UL>

<P><STRONG><a name="[176]"></a>DWN_Page(int)</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, tenlog_touch_lcd.o(i._Z8DWN_Pagei))
<BR><BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::write(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TlIsPLR()
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initTLScreen()
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TlPageMain()
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_outage()
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tenlog_screen_update_dwn()
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_command_dwn()
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWN_MessageHandler(bool)
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLAbortPrinting()
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWN_Message(int, const char*, bool)
</UL>

<P><STRONG><a name="[171]"></a>DWN_Text(long, int, const char*, bool)</STRONG> (Thumb, 282 bytes, Stack size 0 bytes, tenlog_touch_lcd.o(i._Z8DWN_TextliPKcb))
<BR><BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::write(int)
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(const char*)
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TlLoadingMessage(const char*, int, int)
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initTLScreen()
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::tl_ls()
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLVersion()
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tenlog_screen_update_dwn()
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWN_MessageHandler(bool)
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWN_Message(int, const char*, bool)
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DETECT_TLS()
</UL>

<P><STRONG><a name="[22c]"></a>GCodelng(char, long, long*, bool)</STRONG> (Thumb, 378 bytes, Stack size 0 bytes, tenlog_touch_lcd.o(i._Z8GCodelngclPlb))
<BR><BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TJCPauseResumePrinting(bool, int)
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_command_gcode(long*)
</UL>

<P><STRONG><a name="[45c]"></a>HAL_init()</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, hal.o(i._Z8HAL_initv))
<BR><BR>[Called By]<UL><LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup
</UL>

<P><STRONG><a name="[1b9]"></a>home_dir(AxisEnum)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, motion.o(i._Z8home_dir8AxisEnum))
<BR><BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;homeaxis(AxisEnum)
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_homing_move(AxisEnum, float, float, bool)
</UL>

<P><STRONG><a name="[258]"></a>homeaxis(AxisEnum)</STRONG> (Thumb, 464 bytes, Stack size 0 bytes, motion.o(i._Z8homeaxis8AxisEnum))
<BR><BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_plan_position()
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;home_dir(AxisEnum)
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_homing_bump_feedrate(AxisEnum)
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_axis_is_at_home(AxisEnum)
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_homing_move(AxisEnum, float, float, bool)
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;const T1 [local to motion_cpp]::ABS&lang;float&rang;(T1)
</UL>
<BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G28()
</UL>

<P><STRONG><a name="[1e1]"></a>my_sleep(float)</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, tenlog_touch_lcd.o(i._Z8my_sleepf))
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::synchronize()
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle()
</UL>
<BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G28()
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLSDPrintFinished()
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::plr_recovery()
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TJCPauseResumePrinting(bool, int)
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_command_gcode(long*)
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_command_dwn()
</UL>

<P><STRONG><a name="[259]"></a>plan_arc(const XYZEval&lang;float&rang;&, const XYval&lang;float&rang;&, bool, unsigned char)</STRONG> (Thumb, 1952 bytes, Stack size 0 bytes, g2_g3.o(i._Z8plan_arcRK7XYZEvalIfERK5XYvalIfEbh))
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::manage_heater()
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle()
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::buffer_line(float, float, float, float, float, unsigned char, float)
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_motion_limits(XYZval&lang;float&rang;&)
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;const T1 [local to G2_G3_cpp]::ABS&lang;float&rang;(T1)
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_floorf
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_ceilf
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
</UL>
<BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G2_G3(bool)
</UL>

<P><STRONG><a name="[1dd]"></a>DWN_RData(long, int)</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, tenlog_touch_lcd.o(i._Z9DWN_RDatali))
<BR><BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::write(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readWriteDWNLogo(int)
</UL>

<P><STRONG><a name="[193]"></a>IsRunning()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, marlincore.o(i._Z9IsRunningv))
<BR><BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tool_change(unsigned char, bool)
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;manage_inactivity(bool)
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dualx_tool_change(unsigned char, bool&)
</UL>

<P><STRONG><a name="[261]"></a>SDIO_Init()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sdio.o(i._Z9SDIO_Initv))
<BR><BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;steup_sdio
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiskIODriver_SDIO::init(unsigned char, signed char)
</UL>

<P><STRONG><a name="[1b3]"></a>TLVersion()</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, tenlog_touch_lcd.o(i._Z9TLVersionv))
<BR><BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay(unsigned long)
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWN_Text(long, int, const char*, bool)
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLSTJC_println(const char*)
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlInitSetting()
</UL>

<P><STRONG><a name="[263]"></a>plr_setup()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tenlog_touch_lcd.o(i._Z9plr_setupv))
<BR><BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set_mode(unsigned char, WiringPinMode)
</UL>
<BR>[Called By]<UL><LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup
</UL>

<P><STRONG><a name="[264]"></a>print_xyz(const XYZval&lang;float&rang;&, const char*, const char*)</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, m211.o(i._Z9print_xyzRK6XYZvalIfEPKcS4_))
<BR><BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_xyz(float, float, float, const char*, const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M211()
</UL>

<P><STRONG><a name="[265]"></a>print_xyz(float, float, float, const char*, const char*)</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, serial.o(i._Z9print_xyzfffPKcS0_))
<BR><BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echopair_PGM(const char*, float)
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SERIAL_CHAR(char)
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_xyz(const XYZval&lang;float&rang;&, const char*, const char*)
</UL>

<P><STRONG><a name="[266]"></a>CardReader::diveToFile(bool, SdFile*&, const char*, bool)</STRONG> (Thumb, 368 bytes, Stack size 0 bytes, cardreader.o(i._ZN10CardReader10diveToFileEbRP6SdFilePKcb))
<BR><BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void SERIAL_ECHOLN&lang;char*&rang;(T1)
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdFile::SdFile()
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::close()
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::open(SdBaseFile*, const char*, unsigned char)
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openFailed(const char*)
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::removeFile(const char*)
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::openFileWrite(const char*)
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::openFileRead(const char*, unsigned char)
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::fileExists(const char*)
</UL>

<P><STRONG><a name="[252]"></a>CardReader::fileExists(const char*)</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, cardreader.o(i._ZN10CardReader10fileExistsEPKc))
<BR><BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::isMounted()
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdFile::~SdFile()
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdFile::SdFile()
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::close()
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::open(SdBaseFile*, const char*, unsigned char)
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::diveToFile(bool, SdFile*&, const char*, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TlIsPLR()
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::autofile_check()
</UL>

<P><STRONG><a name="[1dc]"></a>CardReader::isFileOpen()</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, cardreader.o(i._ZN10CardReader10isFileOpenEv))
<BR><BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::isMounted()
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::isOpen() const
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;manage_inactivity(bool)
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::endFilePrint()
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printingIsPaused()
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::openFileRead(const char*, unsigned char)
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::percentDone()
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tenlog_screen_update_dwn()
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tenlog_status_update(bool)
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_command_dwn()
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWN_MessageHandler(bool)
</UL>

<P><STRONG><a name="[26d]"></a>CardReader::removeFile(const char*)</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, cardreader.o(i._ZN10CardReader10removeFileEPKc))
<BR><BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SERIAL_CHAR(char)
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echopair_PGM(const char*, const char*)
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::isMounted()
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::remove(SdBaseFile*, const char*)
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::diveToFile(bool, SdFile*&, const char*, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M30()
</UL>

<P><STRONG><a name="[26f]"></a>CardReader::openLogFile(const char*)</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, cardreader.o(i._ZN10CardReader11openLogFileEPKc))
<BR><BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::openFileWrite(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M928()
</UL>

<P><STRONG><a name="[224]"></a>CardReader::percentDone()</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, tenlog_touch_lcd.o(i._ZN10CardReader11percentDoneEv))
<BR><BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::isFileOpen()
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tenlog_screen_update_dwn()
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tenlog_status_update(bool)
</UL>

<P><STRONG><a name="[1c8]"></a>CardReader::endFilePrint()</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, cardreader.o(i._ZN10CardReader12endFilePrintEv))
<BR><BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::isFileOpen()
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::close()
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abortSDPrinting()
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::fileHasFinished()
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::openFileWrite(const char*)
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::openFileRead(const char*, unsigned char)
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::release()
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLAbortPrinting()
</UL>

<P><STRONG><a name="[249]"></a>CardReader::manage_media()</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, cardreader.o(i._ZN10CardReader12manage_mediaEv))
<BR><BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_GetBit
</UL>
<BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle()
</UL>

<P><STRONG><a name="[271]"></a>CardReader::openFileRead(const char*, unsigned char)</STRONG> (Thumb, 342 bytes, Stack size 0 bytes, cardreader.o(i._ZN10CardReader12openFileReadEPKch))
<BR><BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SERIAL_CHAR(char)
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::endFilePrint()
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echopair_PGM(const char*, unsigned)
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echopair_PGM(const char*, int)
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echopair_PGM(const char*, const char*)
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_error_start()
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echo_start()
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kill(const char*, const char*, bool)
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::isMounted()
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::isFileOpen()
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::open(SdBaseFile*, const char*, unsigned char)
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::selectFileByName(const char*)
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::getAbsFilename(char*)
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::diveToFile(bool, SdFile*&, const char*, bool)
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;announceOpen(unsigned char, const char*)
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openFailed(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::fileHasFinished()
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M32()
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M23()
</UL>

<P><STRONG><a name="[274]"></a>CardReader::printListing(SdFile, const char*)</STRONG> (Thumb, 270 bytes, Stack size 0 bytes, cardreader.o(i._ZN10CardReader12printListingE6SdFilePKc))
<BR><BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void SERIAL_ECHO&lang;const char*&rang;(T1)
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SERIAL_CHAR(char)
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echopair_PGM(const char*, const char*)
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echo_start()
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void SERIAL_ECHOLN&lang;unsigned&rang;(T1)
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void SERIAL_ECHO&lang;char*&rang;(T1)
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdFile::~SdFile()
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdFile::SdFile()
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::readDir(directoryEntry*, char*)
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::open(SdBaseFile*, const char*, unsigned char)
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::is_dir_or_gcode(const directoryEntry&, bool)
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::printListing(SdFile, const char*)
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFilename(char*, const directoryEntry&)
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to cardreader_cpp]::DIR_IS_SUBDIR(const directoryEntry*)
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::ls()
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::printListing(SdFile, const char*)
</UL>

<P><STRONG><a name="[27d]"></a>CardReader::selectByName(SdFile, const char*)</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, cardreader.o(i._ZN10CardReader12selectByNameE6SdFilePKc))
<BR><BR>[Calls]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::readDir(directoryEntry*, char*)
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::is_dir_or_gcode(const directoryEntry&, bool)
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFilename(char*, const directoryEntry&)
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcasecmp
</UL>
<BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::selectFileByName(const char*)
</UL>

<P><STRONG><a name="[270]"></a>CardReader::openFileWrite(const char*)</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, cardreader.o(i._ZN10CardReader13openFileWriteEPKc))
<BR><BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::endFilePrint()
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::isMounted()
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::open(SdBaseFile*, const char*, unsigned char)
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::selectFileByName(const char*)
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::diveToFile(bool, SdFile*&, const char*, bool)
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;announceOpen(unsigned char, const char*)
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openFailed(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::openLogFile(const char*)
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M28()
</UL>

<P><STRONG><a name="[27e]"></a>CardReader::printFilename()</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, cardreader.o(i._ZN10CardReader13printFilenameEv))
<BR><BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SERIAL_CHAR(char)
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void SERIAL_ECHO&lang;char*&rang;(T1)
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::isOpen() const
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::getDosName(char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M27()
</UL>

<P><STRONG><a name="[280]"></a>CardReader::report_status()</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cardreader.o(i._ZN10CardReader13report_statusEv))
<BR><BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SERIAL_CHAR(char)
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echopair_PGM(const char*, unsigned)
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void SERIAL_ECHOLN&lang;unsigned&rang;(T1)
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M27()
</UL>

<P><STRONG><a name="[281]"></a>CardReader::write_command(char*)</STRONG> (Thumb, 102 bytes, Stack size 0 bytes, cardreader.o(i._ZN10CardReader13write_commandEPc))
<BR><BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_error_start()
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::strchr(char*, int)
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdFile::write(const char*)
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::advance()
</UL>

<P><STRONG><a name="[284]"></a>CardReader::autofile_check()</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, cardreader.o(i._ZN10CardReader14autofile_checkEv))
<BR><BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::mount()
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::isMounted()
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::fileExists(const char*)
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::cdroot()
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::openAndPrintFile(const char*)
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M1001()
</UL>

<P><STRONG><a name="[272]"></a>CardReader::getAbsFilename(char*)</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, cardreader.o(i._ZN10CardReader14getAbsFilenameEPc))
<BR><BR>[Calls]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::getAbsFilename(char*)::[lambda(SdFile&) (instance 1)]::operator ()(SdFile&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::openFileRead(const char*, unsigned char)
</UL>

<P><STRONG><a name="[288]"></a>CardReader::startFileprint()</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, cardreader.o(i._ZN10CardReader14startFileprintEv))
<BR><BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::isMounted()
</UL>
<BR>[Called By]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::fileHasFinished()
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M32()
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M24()
</UL>

<P><STRONG><a name="[289]"></a>CardReader::fileHasFinished()</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, cardreader.o(i._ZN10CardReader15fileHasFinishedEv))
<BR><BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::synchronize()
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::endFilePrint()
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::seekSet(unsigned)
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::startFileprint()
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::openFileRead(const char*, unsigned char)
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::close()
</UL>
<BR>[Called By]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::get_sdcard_commands()
</UL>

<P><STRONG><a name="[279]"></a>CardReader::is_dir_or_gcode(const directoryEntry&, bool)</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, cardreader.o(i._ZN10CardReader15is_dir_or_gcodeERK14directoryEntryb))
<BR><BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to cardreader_cpp]::DIR_IS_SUBDIR(const directoryEntry*)
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::tl_ls()
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::selectByName(SdFile, const char*)
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::printListing(SdFile, const char*)
</UL>

<P><STRONG><a name="[286]"></a>CardReader::openAndPrintFile(const char*)</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, cardreader.o(i._ZN10CardReader16openAndPrintFileEPKc))
<BR><BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tolower
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::autofile_check()
</UL>

<P><STRONG><a name="[273]"></a>CardReader::selectFileByName(const char*)</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, cardreader.o(i._ZN10CardReader16selectFileByNameEPKc))
<BR><BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdFile::~SdFile()
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::rewind()
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::selectByName(SdFile, const char*)
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::openFileWrite(const char*)
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::openFileRead(const char*, unsigned char)
</UL>

<P><STRONG><a name="[28c]"></a>CardReader::ls()</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, cardreader.o(i._ZN10CardReader2lsEv))
<BR><BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdFile::~SdFile()
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::rewind()
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::printListing(SdFile, const char*)
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M20()
</UL>

<P><STRONG><a name="[29c]"></a>CardReader::eof()</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, queue.o(i._ZN10CardReader3eofEv))
<BR><BR>[Called By]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::get_sdcard_commands()
</UL>

<P><STRONG><a name="[251]"></a>CardReader::mount()</STRONG> (Thumb, 194 bytes, Stack size 0 bytes, cardreader.o(i._ZN10CardReader5mountEv))
<BR><BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay(unsigned long)
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_error_start()
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echo_start()
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::isOpen() const
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdVolume::init(DiskIODriver*, unsigned char)
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::openRoot(SdVolume*)
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::close()
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::cdroot()
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TlIsPLR()
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::autofile_check()
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M21()
</UL>

<P><STRONG><a name="[20c]"></a>CardReader::tl_ls()</STRONG> (Thumb, 768 bytes, Stack size 0 bytes, cardreader.o(i._ZN10CardReader5tl_lsEv))
<BR><BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay(unsigned long)
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SERIAL_CHAR(char)
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWN_Text(long, int, const char*, bool)
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWN_Data(long, long, int)
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLSTJC_println(const char*)
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::rewind()
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::readDir(directoryEntry*, char*)
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::is_dir_or_gcode(const directoryEntry&, bool)
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFilename(char*, const directoryEntry&)
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_command_gcode(long*)
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_command_dwn()
</UL>

<P><STRONG><a name="[285]"></a>CardReader::cdroot()</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, cardreader.o(i._ZN10CardReader6cdrootEv))
<BR><BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::autofile_check()
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::mount()
</UL>

<P><STRONG><a name="[28f]"></a>CardReader::release()</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, cardreader.o(i._ZN10CardReader7releaseEv))
<BR><BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::endFilePrint()
</UL>
<BR>[Called By]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M22()
</UL>

<P><STRONG><a name="[1f3]"></a>CardReader::closefile(bool)</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, cardreader.o(i._ZN10CardReader9closefileEb))
<BR><BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::close()
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::sync()
</UL>
<BR>[Called By]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::advance()
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M524()
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M30()
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWN_MessageHandler(bool)
</UL>

<P><STRONG><a name="[250]"></a>CardReader::isMounted()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tenlog_touch_lcd.o(i._ZN10CardReader9isMountedEv))
<BR><BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TlIsPLR()
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::autofile_check()
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::removeFile(const char*)
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::openFileWrite(const char*)
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::startFileprint()
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::openFileRead(const char*, unsigned char)
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::fileExists(const char*)
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::isFileOpen()
</UL>

<P><STRONG><a name="[291]"></a>CardReader::CardReader()</STRONG> (Thumb, 108 bytes, Stack size 0 bytes, cardreader.o(i._ZN10CardReaderC1Ev))
<BR><BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set_mode(unsigned char, WiringPinMode)
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___14_MarlinCore_cpp_card
</UL>

<P><STRONG><a name="[292]"></a>GCodeQueue::RingBuffer::ok_to_send()</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, queue.o(i._ZN10GCodeQueue10RingBuffer10ok_to_sendEv))
<BR><BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SERIAL_CHAR(char)
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::advance()
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[294]"></a>GCodeQueue::RingBuffer::advance_pos(unsigned char&, int)</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, queue.o(i._ZN10GCodeQueue10RingBuffer11advance_posERhi))
<BR><BR>[Called By]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::advance()
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::RingBuffer::commit_command(bool)
</UL>

<P><STRONG><a name="[293]"></a>GCodeQueue::RingBuffer::commit_command(bool)</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, queue.o(i._ZN10GCodeQueue10RingBuffer14commit_commandEb))
<BR><BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::RingBuffer::advance_pos(unsigned char&, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::RingBuffer::enqueue(const char*, bool)
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::get_sdcard_commands()
</UL>

<P><STRONG><a name="[295]"></a>GCodeQueue::RingBuffer::enqueue(const char*, bool)</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, queue.o(i._ZN10GCodeQueue10RingBuffer7enqueueEPKcb))
<BR><BR>[Calls]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::RingBuffer::commit_command(bool)
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::enqueue_one_P(const char*)
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::get_serial_commands()
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::enqueue_one(const char*)
</UL>

<P><STRONG><a name="[296]"></a>GCodeQueue::enqueue_one(const char*)</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, queue.o(i._ZN10GCodeQueue11enqueue_oneEPKc))
<BR><BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echopair_PGM(const char*, const char*)
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echo_start()
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::RingBuffer::enqueue(const char*, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::enqueue_one_now(const char*)
</UL>

<P><STRONG><a name="[297]"></a>GCodeQueue::enqueue_one_P(const char*)</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, queue.o(i._ZN10GCodeQueue13enqueue_one_PEPKc))
<BR><BR>[Calls]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::RingBuffer::enqueue(const char*, bool)
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop
</UL>

<P><STRONG><a name="[1cd]"></a>GCodeQueue::enqueue_one_now(const char*)</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, queue.o(i._ZN10GCodeQueue15enqueue_one_nowEPKc))
<BR><BR>[Calls]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle()
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::enqueue_one(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abortSDPrinting()
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLAbortPrinting()
</UL>

<P><STRONG><a name="[299]"></a>GCodeQueue::gcode_line_error(const char*, serial_index_t)</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, queue.o(i._ZN10GCodeQueue16gcode_line_errorEPKc14serial_index_t))
<BR><BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::flush_and_request_resend(serial_index_t)
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echopair_PGM(const char*, long)
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SERIAL_CHAR(char)
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_error_start()
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_serial(serial_index_t)
</UL>
<BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::get_serial_commands()
</UL>

<P><STRONG><a name="[29b]"></a>GCodeQueue::get_sdcard_commands()</STRONG> (Thumb, 286 bytes, Stack size 0 bytes, queue.o(i._ZN10GCodeQueue19get_sdcard_commandsEv))
<BR><BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_watchdog_refresh()
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_error_start()
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kill(const char*, const char*, bool)
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::read()
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::fileHasFinished()
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::RingBuffer::commit_command(bool)
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::RingBuffer::full(unsigned char) const
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::eof()
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_stream_char(char, unsigned char&, char(&)[96], int&)
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_line_done(unsigned char&, char(&)[96], int&)
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::get_available_commands()
</UL>

<P><STRONG><a name="[2a0]"></a>GCodeQueue::get_serial_commands()</STRONG> (Thumb, 692 bytes, Stack size 0 bytes, queue.o(i._ZN10GCodeQueue19get_serial_commandsEv))
<BR><BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_error_start()
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quickstop_stepper()
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kill(const char*, const char*, bool)
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::gcode_line_error(const char*, serial_index_t)
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::RingBuffer::enqueue(const char*, bool)
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to queue_cpp]::serial_data_available(serial_index_t)
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::strchr(char*, int)
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::RingBuffer::full(unsigned char) const
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_index_t::serial_index_t(signed char)
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_stream_char(char, unsigned char&, char(&)[96], int&)
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_line_done(unsigned char&, char(&)[96], int&)
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_serial(serial_index_t)
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::flush()
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strrchr
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::get_available_commands()
</UL>

<P><STRONG><a name="[1e9]"></a>GCodeQueue::get_available_commands()</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, queue.o(i._ZN10GCodeQueue22get_available_commandsEv))
<BR><BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::get_serial_commands()
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::RingBuffer::full(unsigned char) const
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::get_sdcard_commands()
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;manage_inactivity(bool)
</UL>

<P><STRONG><a name="[29a]"></a>GCodeQueue::flush_and_request_resend(serial_index_t)</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, queue.o(i._ZN10GCodeQueue24flush_and_request_resendE14serial_index_t))
<BR><BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void SERIAL_ECHOLN&lang;long&rang;(T1)
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::flush()
</UL>
<BR>[Called By]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M999()
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::gcode_line_error(const char*, serial_index_t)
</UL>

<P><STRONG><a name="[2a6]"></a>GCodeQueue::process_injected_command()</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, queue.o(i._ZN10GCodeQueue24process_injected_commandEv))
<BR><BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::parse(char*)
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::advance()
</UL>

<P><STRONG><a name="[2a9]"></a>GCodeQueue::process_injected_command_P()</STRONG> (Thumb, 102 bytes, Stack size 0 bytes, queue.o(i._ZN10GCodeQueue26process_injected_command_PEv))
<BR><BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::parse(char*)
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::advance()
</UL>

<P><STRONG><a name="[2aa]"></a>GCodeQueue::advance()</STRONG> (Thumb, 182 bytes, Stack size 0 bytes, queue.o(i._ZN10GCodeQueue7advanceEv))
<BR><BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::write_command(char*)
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::process_injected_command_P()
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::process_injected_command()
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::RingBuffer::ok_to_send()
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_next_command()
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::closefile(bool)
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::RingBuffer::occupied() const
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::RingBuffer::advance_pos(unsigned char&, int)
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop
</UL>

<P><STRONG><a name="[24a]"></a>GcodeSuite::host_keepalive()</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, gcode.o(i._ZN10GcodeSuite14host_keepaliveEv))
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echo_start()
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle()
</UL>

<P><STRONG><a name="[309]"></a>GcodeSuite::axis_is_relative(AxisEnum)</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, gcode.o(i._ZN10GcodeSuite16axis_is_relativeE8AxisEnum))
<BR><BR>[Called By]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::get_destination_from_command()
</UL>

<P><STRONG><a name="[2b5]"></a>GcodeSuite::set_relative_mode(bool)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gcode.o(i._ZN10GcodeSuite17set_relative_modeEb))
<BR><BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[2ad]"></a>GcodeSuite::T(signed char)</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, t.o(i._ZN10GcodeSuite1TEa))
<BR><BR>[Calls]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::boolval(char, bool)
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_subcommands_now(char*)
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tool_change(unsigned char, bool)
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[2ac]"></a>GcodeSuite::process_next_command()</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, gcode.o(i._ZN10GcodeSuite20process_next_commandEv))
<BR><BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echo_start()
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::parse(char*)
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void SERIAL_ECHOLN&lang;char*&rang;(T1)
</UL>
<BR>[Called By]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::advance()
</UL>

<P><STRONG><a name="[2a8]"></a>GcodeSuite::process_parsed_command(bool)</STRONG> (Thumb, 1212 bytes, Stack size 0 bytes, gcode.o(i._ZN10GcodeSuite22process_parsed_commandEb))
<BR><BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G92()
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M413()
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G27()
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M504()
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M503()
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M502()
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M501()
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M500()
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::T(signed char)
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M999()
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M997()
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M400()
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M211()
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M121()
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M120()
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M111()
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M410()
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M112()
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M108()
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M85()
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M81()
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M18_M84()
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M17()
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M302()
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M301()
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M221()
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M220()
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M205()
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M204()
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M203()
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M201()
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M200()
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M92()
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G28()
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restorer&lang;GcodeSuite::MarlinBusyState&rang;::~restorer()
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::set_relative_mode(bool)
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::msgDone()
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::unknown_command_warning()
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M666()
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M605()
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M412()
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M218()
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M217()
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G34()
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::RingBuffer::ok_to_send()
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M83()
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M82()
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M303()
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M155()
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M190()
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M140()
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M107()
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M106()
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M105()
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M109()
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M104()
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M77()
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M76()
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M75()
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M31()
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M1001()
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M928()
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M524()
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M32()
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M30()
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M29()
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M28()
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M27()
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M26()
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M25()
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M24()
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M23()
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M22()
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M21()
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M20()
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M290()
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G4()
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G2_G3(bool)
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G0_G1()
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M117()
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M119()
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M118()
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M115()
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M114()
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M113()
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M110()
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M428()
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M206()
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_subcommands_now(char*)
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::process_injected_command_P()
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::process_injected_command()
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_next_command()
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_subcommands_now_P(const char*)
</UL>

<P><STRONG><a name="[1b0]"></a>GcodeSuite::process_subcommands_now(char*)</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, gcode.o(i._ZN10GcodeSuite23process_subcommands_nowEPc))
<BR><BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::parse(char*)
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Called By]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::T(signed char)
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G28()
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLFilamentRunout()
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::plr_recovery()
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TJCPauseResumePrinting(bool, int)
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_command_gcode(long*)
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_command_dwn()
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWN_MessageHandler(bool)
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_filament(int, int)
</UL>

<P><STRONG><a name="[305]"></a>GcodeSuite::process_subcommands_now_P(const char*)</STRONG> (Thumb, 116 bytes, Stack size 0 bytes, gcode.o(i._ZN10GcodeSuite25process_subcommands_now_PEPKc))
<BR><BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SERIAL_CHAR(char)
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echopair_PGM(const char*, unsigned)
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::parse(char*)
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M1001()
</UL>

<P><STRONG><a name="[306]"></a>GcodeSuite::get_destination_from_command()</STRONG> (Thumb, 254 bytes, Stack size 0 bytes, gcode.o(i._ZN10GcodeSuite28get_destination_from_commandEv))
<BR><BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::value_linear_units()
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::value_axis_units(AxisEnum)
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::seenval(char)
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::axis_is_relative(AxisEnum)
</UL>
<BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G2_G3(bool)
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G0_G1()
</UL>

<P><STRONG><a name="[2b1]"></a>GcodeSuite::G4()</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, g4.o(i._ZN10GcodeSuite2G4Ev))
<BR><BR>[Calls]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::seenval(char)
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::value_float()
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::synchronize()
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::dwell(unsigned)
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[30d]"></a>GcodeSuite::get_target_extruder_from_command()</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, gcode.o(i._ZN10GcodeSuite32get_target_extruder_from_commandEv))
<BR><BR>[Calls]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::seenval(char)
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::value_long()
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SERIAL_CHAR(char)
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echopair_PGM(const char*, int)
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echo_start()
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void SERIAL_ECHO&lang;unsigned short&rang;(T1)
</UL>
<BR>[Called By]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M221()
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M203()
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M201()
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M200()
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M92()
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M218()
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M105()
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M109()
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M104()
</UL>

<P><STRONG><a name="[2b2]"></a>GcodeSuite::G27()</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, g27.o(i._ZN10GcodeSuite3G27Ev))
<BR><BR>[Calls]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::ushortval(char, unsigned short)
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nozzle::park(unsigned char, const XYZval&lang;float&rang;&)
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[2b3]"></a>GcodeSuite::G28()</STRONG> (Thumb, 704 bytes, Stack size 0 bytes, g28.o(i._ZN10GcodeSuite3G28Ev))
<BR><BR>[Calls]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::seenval(char)
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::boolval(char, bool)
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::seen(char)
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::value_float()
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Endstops::enable(bool)
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Endstops::not_homing()
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_subcommands_now(char*)
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_sleep(float)
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;homeaxis(AxisEnum)
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remember_feedrate_scaling_off()
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_feedrate_and_scaling()
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_duplication_enabled(bool, signed char)
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_current_position()
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idex_set_parked(bool)
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_z_clearance(float, bool)
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tool_change(unsigned char, bool)
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;axes_should_home(unsigned char)
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::synchronize()
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_plan_position()
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[2b4]"></a>GcodeSuite::G34()</STRONG> (Thumb, 170 bytes, Stack size 0 bytes, g34_m422.o(i._ZN10GcodeSuite3G34Ev))
<BR><BR>[Calls]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::seenval(char)
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::boolval(char, bool)
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::seen(char)
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::value_long()
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::synchronize()
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[2b6]"></a>GcodeSuite::G92()</STRONG> (Thumb, 262 bytes, Stack size 0 bytes, g92.o(i._ZN10GcodeSuite3G92Ev))
<BR><BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_workspace_offset(AxisEnum)
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_plan_position_e()
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::value_axis_units(AxisEnum)
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::seenval(char)
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_current_position()
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_plan_position()
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[2b8]"></a>GcodeSuite::M17()</STRONG> (Thumb, 280 bytes, Stack size 0 bytes, m17_m18_m84.o(i._ZN10GcodeSuite3M17Ev))
<BR><BR>[Calls]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::seen(char)
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_ResetBitsMapp
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_all_steppers()
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[2b9]"></a>GcodeSuite::M20()</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, m20.o(i._ZN10GcodeSuite3M20Ev))
<BR><BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echo_start()
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::ls()
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[2ba]"></a>GcodeSuite::M21()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, m21_m22.o(i._ZN10GcodeSuite3M21Ev))
<BR><BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::mount()
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[2bb]"></a>GcodeSuite::M22()</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, m21_m22.o(i._ZN10GcodeSuite3M22Ev))
<BR><BR>[Calls]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::release()
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[2bc]"></a>GcodeSuite::M23()</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, m23.o(i._ZN10GcodeSuite3M23Ev))
<BR><BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::openFileRead(const char*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[2bd]"></a>GcodeSuite::M24()</STRONG> (Thumb, 134 bytes, Stack size 0 bytes, m24_m25.o(i._ZN10GcodeSuite3M24Ev))
<BR><BR>[Calls]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::seen(char)
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startOrResumeJob()
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::seekSet(unsigned)
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::startFileprint()
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[2be]"></a>GcodeSuite::M25()</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, m24_m25.o(i._ZN10GcodeSuite3M25Ev))
<BR><BR>[Calls]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stopwatch::pause()
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[2bf]"></a>GcodeSuite::M26()</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, m26.o(i._ZN10GcodeSuite3M26Ev))
<BR><BR>[Calls]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::seen(char)
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::seekSet(unsigned)
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[2c0]"></a>GcodeSuite::M27()</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, m27.o(i._ZN10GcodeSuite3M27Ev))
<BR><BR>[Calls]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::seen(char)
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::report_status()
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::printFilename()
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[2c1]"></a>GcodeSuite::M28()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, m28_m29.o(i._ZN10GcodeSuite3M28Ev))
<BR><BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::openFileWrite(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[2c2]"></a>GcodeSuite::M29()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, m28_m29.o(i._ZN10GcodeSuite3M29Ev))
<BR><BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[2c3]"></a>GcodeSuite::M30()</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, m30.o(i._ZN10GcodeSuite3M30Ev))
<BR><BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::closefile(bool)
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::removeFile(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[2c6]"></a>GcodeSuite::M31()</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, m31.o(i._ZN10GcodeSuite3M31Ev))
<BR><BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echopair_PGM(const char*, const char*)
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echo_start()
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duration_t::toString(char*) const
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stopwatch::duration()
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[2c4]"></a>GcodeSuite::M32()</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, m32.o(i._ZN10GcodeSuite3M32Ev))
<BR><BR>[Calls]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::seenval(char)
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::boolval(char, bool)
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::value_long()
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::synchronize()
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startOrResumeJob()
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::seekSet(unsigned)
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::startFileprint()
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::openFileRead(const char*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[2c7]"></a>GcodeSuite::M75()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, m75-m78.o(i._ZN10GcodeSuite3M75Ev))
<BR><BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startOrResumeJob()
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[2c8]"></a>GcodeSuite::M76()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, m75-m78.o(i._ZN10GcodeSuite3M76Ev))
<BR><BR>[Calls]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stopwatch::pause()
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[2c9]"></a>GcodeSuite::M77()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, m75-m78.o(i._ZN10GcodeSuite3M77Ev))
<BR><BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stopwatch::stop()
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[2d9]"></a>GcodeSuite::M81()</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, m80_m81.o(i._ZN10GcodeSuite3M81Ev))
<BR><BR>[Calls]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::finish_and_disable()
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stopwatch::stop()
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::disable_all_heaters()
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::set_fan_speed(unsigned char, unsigned short)
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;safe_delay(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[2da]"></a>GcodeSuite::M82()</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, m82_m83.o(i._ZN10GcodeSuite3M82Ev))
<BR><BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[2db]"></a>GcodeSuite::M83()</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, m82_m83.o(i._ZN10GcodeSuite3M83Ev))
<BR><BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[2dd]"></a>GcodeSuite::M85()</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, m85.o(i._ZN10GcodeSuite3M85Ev))
<BR><BR>[Calls]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::seen(char)
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::value_float()
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[2de]"></a>GcodeSuite::M92()</STRONG> (Thumb, 422 bytes, Stack size 0 bytes, m92.o(i._ZN10GcodeSuite3M92Ev))
<BR><BR>[Calls]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::value_per_axis_units(AxisEnum)
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::refresh_positioning()
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::get_target_extruder_from_command()
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_M92(bool, signed char)
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::seen(char)
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[2ca]"></a>GcodeSuite::M104()</STRONG> (Thumb, 116 bytes, Stack size 0 bytes, m104_m109.o(i._ZN10GcodeSuite4M104Ev))
<BR><BR>[Calls]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::get_target_extruder_from_command()
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::seenval(char)
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::setTargetHotend(short, unsigned char)
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::value_celsius()
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::autotemp_M104_M109()
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::auto_job_check_timer(bool, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[2cc]"></a>GcodeSuite::M105()</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, m105.o(i._ZN10GcodeSuite4M105Ev))
<BR><BR>[Calls]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::get_target_extruder_from_command()
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::print_heater_states(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[2ce]"></a>GcodeSuite::M106()</STRONG> (Thumb, 118 bytes, Stack size 0 bytes, m106_m107.o(i._ZN10GcodeSuite4M106Ev))
<BR><BR>[Calls]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::seenval(char)
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::seen(char)
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::value_long()
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::set_fan_speed(unsigned char, unsigned short)
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::byteval(char, unsigned char)
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decltype(((const param#1+const param#2))) [local to M106_M107_cpp]::_MIN&lang;unsigned char, int&rang;(T1, T2)
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[2cf]"></a>GcodeSuite::M107()</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, m106_m107.o(i._ZN10GcodeSuite4M107Ev))
<BR><BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::set_fan_speed(unsigned char, unsigned short)
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::byteval(char, unsigned char)
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decltype(((const param#1+const param#2))) [local to M106_M107_cpp]::_MIN&lang;unsigned char, int&rang;(T1, T2)
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[2d2]"></a>GcodeSuite::M108()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, m108_m112_m410.o(i._ZN10GcodeSuite4M108Ev))
<BR><BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[2cb]"></a>GcodeSuite::M109()</STRONG> (Thumb, 176 bytes, Stack size 0 bytes, m104_m109.o(i._ZN10GcodeSuite4M109Ev))
<BR><BR>[Calls]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::get_target_extruder_from_command()
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::seenval(char)
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::setTargetHotend(short, unsigned char)
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::value_celsius()
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::autotemp_M104_M109()
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::auto_job_check_timer(bool, bool)
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::wait_for_hotend(unsigned char, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[2d0]"></a>GcodeSuite::M110()</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, m110.o(i._ZN10GcodeSuite4M110Ev))
<BR><BR>[Calls]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::seen(char)
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[2d1]"></a>GcodeSuite::M111()</STRONG> (Thumb, 106 bytes, Stack size 0 bytes, m111.o(i._ZN10GcodeSuite4M111Ev))
<BR><BR>[Calls]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::seen(char)
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SERIAL_CHAR(char)
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echo_start()
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::byteval(char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[2d3]"></a>GcodeSuite::M112()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, m108_m112_m410.o(i._ZN10GcodeSuite4M112Ev))
<BR><BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kill(const char*, const char*, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[2d5]"></a>GcodeSuite::M113()</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, m113.o(i._ZN10GcodeSuite4M113Ev))
<BR><BR>[Calls]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::seen(char)
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::value_long()
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echopair_PGM(const char*, unsigned char)
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echo_start()
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[2df]"></a>GcodeSuite::M114()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, m114.o(i._ZN10GcodeSuite4M114Ev))
<BR><BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_current_position_projected()
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[2e0]"></a>GcodeSuite::M115()</STRONG> (Thumb, 264 bytes, Stack size 0 bytes, m115.o(i._ZN10GcodeSuite4M115Ev))
<BR><BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SERIAL_CHAR(char)
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to M115_cpp]::cap_line(const char*, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[2e1]"></a>GcodeSuite::M117()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, m117.o(i._ZN10GcodeSuite4M117Ev))
<BR><BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[2e2]"></a>GcodeSuite::M118()</STRONG> (Thumb, 118 bytes, Stack size 0 bytes, m118.o(i._ZN10GcodeSuite4M118Ev))
<BR><BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echo_start()
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void SERIAL_ECHOLN&lang;char*&rang;(T1)
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[2e3]"></a>GcodeSuite::M119()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, m119.o(i._ZN10GcodeSuite4M119Ev))
<BR><BR>[Calls]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Endstops::report_states()
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[2e4]"></a>GcodeSuite::M120()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, m120_m121.o(i._ZN10GcodeSuite4M120Ev))
<BR><BR>[Calls]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Endstops::enable_globally(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[2e5]"></a>GcodeSuite::M121()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, m120_m121.o(i._ZN10GcodeSuite4M121Ev))
<BR><BR>[Calls]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Endstops::enable_globally(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[2d6]"></a>GcodeSuite::M140()</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, m140_m190.o(i._ZN10GcodeSuite4M140Ev))
<BR><BR>[Calls]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::seenval(char)
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::setTargetBed(short)
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::value_celsius()
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::auto_job_check_timer(bool, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[2d8]"></a>GcodeSuite::M155()</STRONG> (Thumb, 110 bytes, Stack size 0 bytes, m155.o(i._ZN10GcodeSuite4M155Ev))
<BR><BR>[Calls]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::seen(char)
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::value_long()
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[2d7]"></a>GcodeSuite::M190()</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, m140_m190.o(i._ZN10GcodeSuite4M190Ev))
<BR><BR>[Calls]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::seenval(char)
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::setTargetBed(short)
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::wait_for_bed(bool)
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::value_celsius()
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::auto_job_check_timer(bool, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[2e6]"></a>GcodeSuite::M200()</STRONG> (Thumb, 194 bytes, Stack size 0 bytes, m200-m205.o(i._ZN10GcodeSuite4M200Ev))
<BR><BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::value_linear_units()
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::calculate_volumetric_multipliers()
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::get_target_extruder_from_command()
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::seenval(char)
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::boolval(char, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[2e7]"></a>GcodeSuite::M201()</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, m200-m205.o(i._ZN10GcodeSuite4M201Ev))
<BR><BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::value_axis_units(AxisEnum)
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::set_max_acceleration(unsigned char, float)
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::get_target_extruder_from_command()
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::seen(char)
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[2e8]"></a>GcodeSuite::M203()</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, m200-m205.o(i._ZN10GcodeSuite4M203Ev))
<BR><BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::value_axis_units(AxisEnum)
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::set_max_feedrate(unsigned char, float)
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::get_target_extruder_from_command()
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::seen(char)
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[2e9]"></a>GcodeSuite::M204()</STRONG> (Thumb, 360 bytes, Stack size 0 bytes, m200-m205.o(i._ZN10GcodeSuite4M204Ev))
<BR><BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::value_linear_units()
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::seenval(char)
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echopair_PGM(const char*, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[2ea]"></a>GcodeSuite::M205()</STRONG> (Thumb, 388 bytes, Stack size 0 bytes, m200-m205.o(i._ZN10GcodeSuite4M205Ev))
<BR><BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::value_linear_units()
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::set_max_jerk(AxisEnum, float)
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::seen(char)
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[2eb]"></a>GcodeSuite::M206()</STRONG> (Thumb, 284 bytes, Stack size 0 bytes, m206_m428.o(i._ZN10GcodeSuite4M206Ev))
<BR><BR>[Calls]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::seen(char)
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::value_float()
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_current_position()
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_home_offset(AxisEnum, float)
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M206_report()
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[2ec]"></a>GcodeSuite::M211()</STRONG> (Thumb, 136 bytes, Stack size 0 bytes, m211.o(i._ZN10GcodeSuite4M211Ev))
<BR><BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_xyz(const XYZval&lang;float&rang;&, const char*, const char*)
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::seen(char)
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::value_long()
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprint_onoff(bool)
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echo_start()
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[2ed]"></a>GcodeSuite::M217()</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, m217.o(i._ZN10GcodeSuite4M217Ev))
<BR><BR>[Calls]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::seen(char)
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::value_float()
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M217_report(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[2ee]"></a>GcodeSuite::M218()</STRONG> (Thumb, 480 bytes, Stack size 0 bytes, m218.o(i._ZN10GcodeSuite4M218Ev))
<BR><BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::value_linear_units()
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::get_target_extruder_from_command()
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::seenval(char)
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void SERIAL_ECHO&lang;float&rang;(T1)
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(double, int)
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SERIAL_CHAR(char)
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echo_start()
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[2ef]"></a>GcodeSuite::M220()</STRONG> (Thumb, 146 bytes, Stack size 0 bytes, m220.o(i._ZN10GcodeSuite4M220Ev))
<BR><BR>[Calls]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::seen(char)
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SERIAL_CHAR(char)
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echopair_PGM(const char*, int)
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[2f0]"></a>GcodeSuite::M221()</STRONG> (Thumb, 178 bytes, Stack size 0 bytes, m221.o(i._ZN10GcodeSuite4M221Ev))
<BR><BR>[Calls]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void SERIAL_CHAR&lang;&lang;int&rang;&rang;(char, T1...)
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::get_target_extruder_from_command()
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::seen(char)
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SERIAL_CHAR(char)
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echopair_PGM(const char*, int)
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echo_start()
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[2f1]"></a>GcodeSuite::M290()</STRONG> (Thumb, 410 bytes, Stack size 0 bytes, m290.o(i._ZN10GcodeSuite4M290Ev))
<BR><BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::value_axis_units(AxisEnum)
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::seenval(char)
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::seen(char)
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Babystep::add_mm(AxisEnum, float)
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echopair_PGM(const char*, int)
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echo_start()
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[2f2]"></a>GcodeSuite::M301()</STRONG> (Thumb, 274 bytes, Stack size 0 bytes, m301.o(i._ZN10GcodeSuite4M301Ev))
<BR><BR>[Calls]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::seen(char)
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::value_float()
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echopair_PGM(const char*, float)
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_error_start()
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echo_start()
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::byteval(char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[2f3]"></a>GcodeSuite::M302()</STRONG> (Thumb, 184 bytes, Stack size 0 bytes, m302.o(i._ZN10GcodeSuite4M302Ev))
<BR><BR>[Calls]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::seen(char)
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::value_long()
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echopair_PGM(const char*, int)
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echo_start()
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[2f4]"></a>GcodeSuite::M303()</STRONG> (Thumb, 136 bytes, Stack size 0 bytes, m303.o(i._ZN10GcodeSuite4M303Ev))
<BR><BR>[Calls]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::seenval(char)
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::boolval(char, bool)
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::value_int()
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::intval(char, short)
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::PID_autotune(short, heater_id_t, signed char, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[2f5]"></a>GcodeSuite::M400()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, m400.o(i._ZN10GcodeSuite4M400Ev))
<BR><BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::synchronize()
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[2d4]"></a>GcodeSuite::M410()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, m108_m112_m410.o(i._ZN10GcodeSuite4M410Ev))
<BR><BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quickstop_stepper()
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[2f6]"></a>GcodeSuite::M412()</STRONG> (Thumb, 360 bytes, Stack size 0 bytes, m412.o(i._ZN10GcodeSuite4M412Ev))
<BR><BR>[Calls]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::seen(char)
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::value_long()
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintln_onoff(bool)
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echo_start()
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[302]"></a>GcodeSuite::M413()</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, m413.o(i._ZN10GcodeSuite4M413Ev))
<BR><BR>[Calls]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::seen(char)
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::value_long()
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintln_onoff(bool)
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echo_start()
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[2f7]"></a>GcodeSuite::M428()</STRONG> (Thumb, 276 bytes, Stack size 0 bytes, m206_m428.o(i._ZN10GcodeSuite4M428Ev))
<BR><BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_current_position()
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_error_start()
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;homing_needed_error(unsigned char)
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_home_offset(AxisEnum, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[2f8]"></a>GcodeSuite::M500()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, m500-m504.o(i._ZN10GcodeSuite4M500Ev))
<BR><BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::save()
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[2f9]"></a>GcodeSuite::M501()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, m500-m504.o(i._ZN10GcodeSuite4M501Ev))
<BR><BR>[Calls]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::load()
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[2fa]"></a>GcodeSuite::M502()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, m500-m504.o(i._ZN10GcodeSuite4M502Ev))
<BR><BR>[Calls]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::reset()
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[2fb]"></a>GcodeSuite::M503()</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, m500-m504.o(i._ZN10GcodeSuite4M503Ev))
<BR><BR>[Calls]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::report(bool)
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::boolval(char, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[2fc]"></a>GcodeSuite::M504()</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, m500-m504.o(i._ZN10GcodeSuite4M504Ev))
<BR><BR>[Calls]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::validate()
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echo_start()
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[2fd]"></a>GcodeSuite::M524()</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, m524.o(i._ZN10GcodeSuite4M524Ev))
<BR><BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::closefile(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[2fe]"></a>GcodeSuite::M605()</STRONG> (Thumb, 360 bytes, Stack size 0 bytes, m605.o(i._ZN10GcodeSuite4M605Ev))
<BR><BR>[Calls]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::seen(char)
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::value_float()
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::value_long()
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_duplication_enabled(bool, signed char)
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idex_set_parked(bool)
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tool_change(unsigned char, bool)
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::synchronize()
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::buffer_line(float, float, float, float, float, unsigned char, float)
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_software_endstops(AxisEnum, unsigned char, unsigned char)
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idex_set_mirrored_mode(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[2ff]"></a>GcodeSuite::M666()</STRONG> (Thumb, 302 bytes, Stack size 0 bytes, m666.o(i._ZN10GcodeSuite4M666Ev))
<BR><BR>[Calls]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::seen(char)
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::value_float()
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echopair_PGM(const char*, float)
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[2c5]"></a>GcodeSuite::M928()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, m928.o(i._ZN10GcodeSuite4M928Ev))
<BR><BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::openLogFile(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[300]"></a>GcodeSuite::M997()</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, m997.o(i._ZN10GcodeSuite4M997Ev))
<BR><BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flashFirmware(short)
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::intval(char, short)
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[301]"></a>GcodeSuite::M999()</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, m999.o(i._ZN10GcodeSuite4M999Ev))
<BR><BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::flush_and_request_resend(serial_index_t)
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::boolval(char, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[2af]"></a>GcodeSuite::G0_G1()</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, g0_g1.o(i._ZN10GcodeSuite5G0_G1Ev))
<BR><BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepare_line_to_destination()
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::get_destination_from_command()
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[2b0]"></a>GcodeSuite::G2_G3(bool)</STRONG> (Thumb, 782 bytes, Stack size 0 bytes, g2_g3.o(i._ZN10GcodeSuite5G2_G3Eb))
<BR><BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::value_linear_units()
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::seenval(char)
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_error_start()
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_arc(const XYZEval&lang;float&rang;&, const XYval&lang;float&rang;&, bool, unsigned char)
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::get_destination_from_command()
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[303]"></a>GcodeSuite::M1001()</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, m1001.o(i._ZN10GcodeSuite5M1001Ev))
<BR><BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stopwatch::duration()
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_subcommands_now_P(const char*)
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::autofile_check()
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[30c]"></a>GcodeSuite::dwell(unsigned)</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, gcode.o(i._ZN10GcodeSuite5dwellEj))
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle()
</UL>
<BR>[Called By]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G4()
</UL>

<P><STRONG><a name="[2dc]"></a>GcodeSuite::M18_M84()</STRONG> (Thumb, 412 bytes, Stack size 0 bytes, m17_m18_m84.o(i._ZN10GcodeSuite7M18_M84Ev))
<BR><BR>[Calls]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::finish_and_disable()
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::seen(char)
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::value_float()
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetBitsMapp
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::synchronize()
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[336]"></a>SdBaseFile::addCluster()</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, sdbasefile.o(i._ZN10SdBaseFile10addClusterEv))
<BR><BR>[Calls]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdVolume::allocContiguous(unsigned, unsigned*)
</UL>
<BR>[Called By]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::write(const void*, unsigned short)
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::addDirCluster()
</UL>

<P><STRONG><a name="[27f]"></a>SdBaseFile::getDosName(char*)</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, sdbasefile.o(i._ZN10SdBaseFile10getDosNameEPc))
<BR><BR>[Calls]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::isRoot() const
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::dirName(const directoryEntry&, char*)
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::cacheDirEntry(unsigned char)
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::isOpen() const
</UL>
<BR>[Called By]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::printFilename()
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::getAbsFilename(char*)::[lambda(SdFile&) (instance 1)]::operator ()(SdFile&) const
</UL>

<P><STRONG><a name="[34c]"></a>SdBaseFile::make83Name(const char*, unsigned char*, const char**)</STRONG> (Thumb, 160 bytes, Stack size 0 bytes, sdbasefile.o(i._ZN10SdBaseFile10make83NameEPKcPhPS1_))
<BR><BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::open(SdBaseFile*, const char*, unsigned char)
</UL>

<P><STRONG><a name="[33b]"></a>SdBaseFile::readDirCache()</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, sdbasefile.o(i._ZN10SdBaseFile12readDirCacheEv))
<BR><BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::read()
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::isDir() const
</UL>
<BR>[Called By]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::open(SdBaseFile*, const unsigned char*, unsigned char)
</UL>

<P><STRONG><a name="[33d]"></a>SdBaseFile::addDirCluster()</STRONG> (Thumb, 124 bytes, Stack size 0 bytes, sdbasefile.o(i._ZN10SdBaseFile13addDirClusterEv))
<BR><BR>[Calls]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdVolume::clusterStartBlock(unsigned) const
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdVolume::cacheSetBlockNumber(unsigned, bool)
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdVolume::writeBlock(unsigned, const unsigned char*)
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdVolume::cacheFlush()
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::addCluster()
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::open(SdBaseFile*, const unsigned char*, unsigned char)
</UL>

<P><STRONG><a name="[339]"></a>SdBaseFile::cacheDirEntry(unsigned char)</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, sdbasefile.o(i._ZN10SdBaseFile13cacheDirEntryEh))
<BR><BR>[Calls]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdVolume::cacheRawBlock(unsigned, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::remove()
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::open(SdBaseFile*, const unsigned char*, unsigned char)
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::sync()
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::getDosName(char*)
</UL>

<P><STRONG><a name="[343]"></a>SdBaseFile::openCachedEntry(unsigned char, unsigned char)</STRONG> (Thumb, 170 bytes, Stack size 0 bytes, sdbasefile.o(i._ZN10SdBaseFile15openCachedEntryEhh))
<BR><BR>[Calls]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdVolume::cacheBlockNumber() const
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::seekEnd(int)
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdVolume::chainSize(unsigned, unsigned*)
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::truncate(unsigned)
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to SdBaseFile_cpp]::DIR_IS_SUBDIR(const directoryEntry*)
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to SdBaseFile_cpp]::DIR_IS_FILE(const directoryEntry*)
</UL>
<BR>[Called By]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::open(SdBaseFile*, const unsigned char*, unsigned char)
</UL>

<P><STRONG><a name="[26a]"></a>SdBaseFile::open(SdBaseFile*, const char*, unsigned char)</STRONG> (Thumb, 260 bytes, Stack size 0 bytes, sdbasefile.o(i._ZN10SdBaseFile4openEPS_PKch))
<BR><BR>[Calls]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::isRoot() const
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::~SdBaseFile()
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::SdBaseFile()
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::open(SdBaseFile*, const unsigned char*, unsigned char)
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::make83Name(const char*, unsigned char*, const char**)
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::isOpen() const
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::openRoot(SdVolume*)
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::close()
</UL>
<BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::openFileWrite(const char*)
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::openFileRead(const char*, unsigned char)
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::fileExists(const char*)
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::remove(SdBaseFile*, const char*)
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::printListing(SdFile, const char*)
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::diveToFile(bool, SdFile*&, const char*, bool)
</UL>

<P><STRONG><a name="[34d]"></a>SdBaseFile::open(SdBaseFile*, const unsigned char*, unsigned char)</STRONG> (Thumb, 306 bytes, Stack size 0 bytes, sdbasefile.o(i._ZN10SdBaseFile4openEPS_PKhh))
<BR><BR>[Calls]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdVolume::cacheBlockNumber() const
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdVolume::cacheFlush()
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::openCachedEntry(unsigned char, unsigned char)
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::cacheDirEntry(unsigned char)
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::addDirCluster()
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::readDirCache()
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::rewind()
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::open(SdBaseFile*, const char*, unsigned char)
</UL>

<P><STRONG><a name="[34f]"></a>SdBaseFile::read(void*, unsigned short)</STRONG> (Thumb, 290 bytes, Stack size 0 bytes, sdbasefile.o(i._ZN10SdBaseFile4readEPvt))
<BR><BR>[Calls]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdVolume::clusterStartBlock(unsigned) const
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdVolume::cacheBlockNumber() const
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdVolume::blockOfCluster(unsigned) const
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdVolume::fatGet(unsigned, unsigned*)
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdVolume::cacheRawBlock(unsigned, bool)
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::isOpen() const
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::read()
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::readDir(directoryEntry*, char*)
</UL>

<P><STRONG><a name="[29d]"></a>SdBaseFile::read()</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, sdbasefile.o(i._ZN10SdBaseFile4readEv))
<BR><BR>[Calls]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::read(void*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::get_sdcard_commands()
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::readDirCache()
</UL>

<P><STRONG><a name="[290]"></a>SdBaseFile::sync()</STRONG> (Thumb, 110 bytes, Stack size 0 bytes, sdbasefile.o(i._ZN10SdBaseFile4syncEv))
<BR><BR>[Calls]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::isDir() const
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdVolume::cacheFlush()
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::cacheDirEntry(unsigned char)
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::isOpen() const
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::closefile(bool)
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::truncate(unsigned)
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::write(const void*, unsigned short)
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::close()
</UL>

<P><STRONG><a name="[269]"></a>SdBaseFile::close()</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, sdbasefile.o(i._ZN10SdBaseFile5closeEv))
<BR><BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::sync()
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::endFilePrint()
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::fileHasFinished()
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::closefile(bool)
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::mount()
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::fileExists(const char*)
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::~SdBaseFile()
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdFile::~SdFile()
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::open(SdBaseFile*, const char*, unsigned char)
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::diveToFile(bool, SdFile*&, const char*, bool)
</UL>

<P><STRONG><a name="[352]"></a>SdBaseFile::write(const void*, unsigned short)</STRONG> (Thumb, 398 bytes, Stack size 0 bytes, sdbasefile.o(i._ZN10SdBaseFile5writeEPKvt))
<BR><BR>[Calls]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdVolume::isEOC(unsigned) const
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdVolume::clusterStartBlock(unsigned) const
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdVolume::cacheBlockNumber() const
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdVolume::blockOfCluster(unsigned) const
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::isFile() const
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdVolume::cacheSetBlockNumber(unsigned, bool)
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdVolume::writeBlock(unsigned, const unsigned char*)
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::seekEnd(int)
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdVolume::fatGet(unsigned, unsigned*)
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdVolume::cacheRawBlock(unsigned, bool)
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdVolume::cacheFlush()
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::addCluster()
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::sync()
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdFile::write(const char*)
</UL>

<P><STRONG><a name="[26e]"></a>SdBaseFile::remove(SdBaseFile*, const char*)</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, sdbasefile.o(i._ZN10SdBaseFile6removeEPS_PKc))
<BR><BR>[Calls]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::~SdBaseFile()
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::SdBaseFile()
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::remove()
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::open(SdBaseFile*, const char*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::removeFile(const char*)
</UL>

<P><STRONG><a name="[355]"></a>SdBaseFile::remove()</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, sdbasefile.o(i._ZN10SdBaseFile6removeEv))
<BR><BR>[Calls]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdVolume::cacheFlush()
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::truncate(unsigned)
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::cacheDirEntry(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::remove(SdBaseFile*, const char*)
</UL>

<P><STRONG><a name="[28b]"></a>SdBaseFile::rewind()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, cardreader.o(i._ZN10SdBaseFile6rewindEv))
<BR><BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::seekSet(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::ls()
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::tl_ls()
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::open(SdBaseFile*, const unsigned char*, unsigned char)
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::selectFileByName(const char*)
</UL>

<P><STRONG><a name="[33a]"></a>SdBaseFile::dirName(const directoryEntry&, char*)</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, sdbasefile.o(i._ZN10SdBaseFile7dirNameERK14directoryEntryPc))
<BR><BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::getDosName(char*)
</UL>

<P><STRONG><a name="[27c]"></a>SdBaseFile::readDir(directoryEntry*, char*)</STRONG> (Thumb, 336 bytes, Stack size 0 bytes, sdbasefile.o(i._ZN10SdBaseFile7readDirEP14directoryEntryPc))
<BR><BR>[Calls]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::isDir() const
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::read(void*, unsigned short)
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfn_checksum(const unsigned char*)
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to SdBaseFile_cpp]::DIR_IS_FILE_OR_SUBDIR(const directoryEntry*)
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::tl_ls()
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::selectByName(SdFile, const char*)
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::printListing(SdFile, const char*)
</UL>

<P><STRONG><a name="[349]"></a>SdBaseFile::seekEnd(int)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, sdbasefile.o(i._ZN10SdBaseFile7seekEndEi))
<BR><BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::seekSet(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::write(const void*, unsigned short)
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::openCachedEntry(unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[28a]"></a>SdBaseFile::seekSet(unsigned)</STRONG> (Thumb, 126 bytes, Stack size 0 bytes, sdbasefile.o(i._ZN10SdBaseFile7seekSetEj))
<BR><BR>[Calls]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdVolume::fatGet(unsigned, unsigned*)
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::isOpen() const
</UL>
<BR>[Called By]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::fileHasFinished()
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M32()
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M26()
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M24()
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::buffer_line(float, float, float, float, float, unsigned char, float)
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::seekEnd(int)
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::truncate(unsigned)
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::rewind()
</UL>

<P><STRONG><a name="[28e]"></a>SdBaseFile::openRoot(SdVolume*)</STRONG> (Thumb, 110 bytes, Stack size 0 bytes, sdbasefile.o(i._ZN10SdBaseFile8openRootEP8SdVolume))
<BR><BR>[Calls]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdVolume::chainSize(unsigned, unsigned*)
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::isOpen() const
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::mount()
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::open(SdBaseFile*, const char*, unsigned char)
</UL>

<P><STRONG><a name="[348]"></a>SdBaseFile::truncate(unsigned)</STRONG> (Thumb, 194 bytes, Stack size 0 bytes, sdbasefile.o(i._ZN10SdBaseFile8truncateEj))
<BR><BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::seekSet(unsigned)
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdVolume::isEOC(unsigned) const
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::isFile() const
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdVolume::freeChain(unsigned)
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdVolume::fatPut(unsigned, unsigned)
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdVolume::fatGet(unsigned, unsigned*)
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::sync()
</UL>
<BR>[Called By]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::remove()
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::openCachedEntry(unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[34a]"></a>SdBaseFile::SdBaseFile()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sdbasefile.o(i._ZN10SdBaseFileC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::remove(SdBaseFile*, const char*)
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::open(SdBaseFile*, const char*, unsigned char)
</UL>

<P><STRONG><a name="[34b]"></a>SdBaseFile::~SdBaseFile()</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, sdbasefile.o(i._ZN10SdBaseFileD1Ev))
<BR><BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::isOpen() const
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::close()
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::remove(SdBaseFile*, const char*)
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::open(SdBaseFile*, const char*, unsigned char)
</UL>

<P><STRONG><a name="[30e]"></a>GCodeParser::value_long()</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, g28.o(i._ZN11GCodeParser10value_longEv))
<BR><BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>
<BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M413()
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M211()
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M302()
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::get_target_extruder_from_command()
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::boolval(char, bool)
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M605()
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M412()
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G34()
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::value_int()
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M155()
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::byteval(char, unsigned char)
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M106()
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M32()
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M113()
</UL>

<P><STRONG><a name="[30b]"></a>GCodeParser::value_float()</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, g28.o(i._ZN11GCodeParser11value_floatEv))
<BR><BR>[Calls]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_strtof
</UL>
<BR>[Called By]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M85()
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M18_M84()
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M301()
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::value_linear_units()
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::value_axis_units(AxisEnum)
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::value_per_axis_units(AxisEnum)
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G28()
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M666()
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M605()
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M217()
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::autotemp_M104_M109()
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G4()
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M206()
</UL>

<P><STRONG><a name="[31c]"></a>GCodeParser::value_celsius()</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, m104_m109.o(i._ZN11GCodeParser13value_celsiusEv))
<BR><BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>
<BR>[Called By]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M190()
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M140()
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::autotemp_M104_M109()
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M109()
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M104()
</UL>

<P><STRONG><a name="[308]"></a>GCodeParser::value_axis_units(AxisEnum)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, m200-m205.o(i._ZN11GCodeParser16value_axis_unitsE8AxisEnum))
<BR><BR>[Calls]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::value_float()
</UL>
<BR>[Called By]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G92()
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M203()
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M201()
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M290()
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::get_destination_from_command()
</UL>

<P><STRONG><a name="[30a]"></a>GCodeParser::value_linear_units()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, m200-m205.o(i._ZN11GCodeParser18value_linear_unitsEv))
<BR><BR>[Calls]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::value_float()
</UL>
<BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M205()
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M204()
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M200()
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M218()
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G2_G3(bool)
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::get_destination_from_command()
</UL>

<P><STRONG><a name="[31a]"></a>GCodeParser::value_per_axis_units(AxisEnum)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, m92.o(i._ZN11GCodeParser20value_per_axis_unitsE8AxisEnum))
<BR><BR>[Calls]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::value_float()
</UL>
<BR>[Called By]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M92()
</UL>

<P><STRONG><a name="[2b7]"></a>GCodeParser::unknown_command_warning()</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, parser.o(i._ZN11GCodeParser23unknown_command_warningEv))
<BR><BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echopair_PGM(const char*, const char*)
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echo_start()
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[313]"></a>GCodeParser::seen(char)</STRONG> (Thumb, 188 bytes, Stack size 0 bytes, g28.o(i._ZN11GCodeParser4seenEc))
<BR><BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M413()
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::ushortval(char, unsigned short)
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M211()
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M111()
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M85()
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M18_M84()
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M17()
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M302()
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M301()
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M221()
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M220()
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M205()
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M203()
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M201()
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M92()
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::seenval(char)
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::boolval(char, bool)
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G28()
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M666()
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M605()
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M412()
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M217()
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G34()
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M155()
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M106()
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::autotemp_M104_M109()
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M27()
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M26()
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M24()
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M290()
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M113()
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M110()
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M206()
</UL>

<P><STRONG><a name="[2a7]"></a>GCodeParser::parse(char*)</STRONG> (Thumb, 740 bytes, Stack size 0 bytes, parser.o(i._ZN11GCodeParser5parseEPc))
<BR><BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::strchr(char*, int)
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::reset()
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_subcommands_now(char*)
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::process_injected_command_P()
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::process_injected_command()
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_next_command()
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_subcommands_now_P(const char*)
</UL>

<P><STRONG><a name="[35b]"></a>GCodeParser::reset()</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, parser.o(i._ZN11GCodeParser5resetEv))
<BR><BR>[Called By]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::parse(char*)
</UL>

<P><STRONG><a name="[32e]"></a>GCodeParser::intval(char, short)</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, m303.o(i._ZN11GCodeParser6intvalEcs))
<BR><BR>[Calls]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::seenval(char)
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::value_int()
</UL>
<BR>[Called By]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M997()
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M303()
</UL>

<P><STRONG><a name="[2ae]"></a>GCodeParser::boolval(char, bool)</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, g28.o(i._ZN11GCodeParser7boolvalEcb))
<BR><BR>[Calls]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::seenval(char)
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::seen(char)
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::value_long()
</UL>
<BR>[Called By]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M503()
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::T(signed char)
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M999()
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M200()
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G28()
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G34()
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M303()
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M32()
</UL>

<P><STRONG><a name="[321]"></a>GCodeParser::byteval(char, unsigned char)</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, m106_m107.o(i._ZN11GCodeParser7bytevalEch))
<BR><BR>[Calls]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::seenval(char)
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::value_long()
</UL>
<BR>[Called By]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M111()
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M301()
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M107()
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M106()
</UL>

<P><STRONG><a name="[307]"></a>GCodeParser::seenval(char)</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, g28.o(i._ZN11GCodeParser7seenvalEc))
<BR><BR>[Calls]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::seen(char)
</UL>
<BR>[Called By]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G92()
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M204()
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M200()
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::get_target_extruder_from_command()
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::boolval(char, bool)
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G28()
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M218()
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G34()
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::intval(char, short)
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M303()
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M190()
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M140()
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::byteval(char, unsigned char)
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M106()
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::autotemp_M104_M109()
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M109()
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M104()
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M32()
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M290()
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G4()
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G2_G3(bool)
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::get_destination_from_command()
</UL>

<P><STRONG><a name="[310]"></a>GCodeParser::ushortval(char, unsigned short)</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, g27.o(i._ZN11GCodeParser9ushortvalEct))
<BR><BR>[Calls]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::seen(char)
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>
<BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G27()
</UL>

<P><STRONG><a name="[32f]"></a>GCodeParser::value_int()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, m303.o(i._ZN11GCodeParser9value_intEv))
<BR><BR>[Calls]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::value_long()
</UL>
<BR>[Called By]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::intval(char, short)
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M303()
</UL>

<P><STRONG><a name="[35c]"></a>Sdioc_Class::init()</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, sdio_hal.o(i._ZN11Sdioc_Class4initEv))
<BR><BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCARD_Init
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;steup_sdio
</UL>

<P><STRONG><a name="[142]"></a>Sdioc_Class::read(unsigned, unsigned short, unsigned char*)</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, sdio_hal.o(i._ZN11Sdioc_Class4readEjtPh))
<BR><BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCARD_ReadBlocks
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ReadBlock_DMA
</UL>

<P><STRONG><a name="[144]"></a>Sdioc_Class::write(unsigned, unsigned short, const unsigned char*)</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, sdio_hal.o(i._ZN11Sdioc_Class5writeEjtPKh))
<BR><BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCARD_WriteBlocks
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_WriteBlockDMA
</UL>

<P><STRONG><a name="[35d]"></a>Sdioc_Class::Sdioc_Class(M4_SDIOC_TypeDef*)</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, sdio_hal.o(i._ZN11Sdioc_ClassC1EP16M4_SDIOC_TypeDef))
<BR><BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetFuncMapp
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;steup_sdio
</UL>

<P><STRONG><a name="[465]"></a>Sdioc_Class::~Sdioc_Class()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sdio_hal.o(i._ZN11Sdioc_ClassD1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;steup_sdio
</UL>

<P><STRONG><a name="[35e]"></a>Temperature::_temp_error(heater_id_t, const char*, const char*)</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, temperature.o(i._ZN11Temperature11_temp_errorE11heater_id_tPKcS2_))
<BR><BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SERIAL_CHAR(char)
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::disable_all_heaters()
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_watchdog_refresh()
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_error_start()
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kill(const char*, const char*, bool)
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void SERIAL_ECHO&lang;heater_id_t&rang;(T1)
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::manage_heater()
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::PID_autotune(short, heater_id_t, signed char, bool)
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::tr_state_machine_t::run(float, float, heater_id_t, unsigned short, short)
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::min_temp_error(heater_id_t)
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::max_temp_error(heater_id_t)
</UL>

<P><STRONG><a name="[330]"></a>Temperature::PID_autotune(short, heater_id_t, signed char, bool)</STRONG> (Thumb, 1560 bytes, Stack size 0 bytes, temperature.o(i._ZN11Temperature12PID_autotuneEs11heater_id_tab))
<BR><BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echopair_PGM(const char*, long)
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echopair_PGM(const char*, float)
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SERIAL_CHAR(char)
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::disable_all_heaters()
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_idletask()
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::print_heater_states(unsigned char)
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::degHotend(unsigned char)
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::updateTemperaturesFromRawValues()
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::checkExtruderAutoFans()
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::_temp_error(heater_id_t, const char*, const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M303()
</UL>

<P><STRONG><a name="[17b]"></a>Temperature::degTargetBed()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tenlog_touch_lcd.o(i._ZN11Temperature12degTargetBedEv))
<BR><BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plr_outage()
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::start_watching_bed()
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::wait_for_bed(bool)
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::print_heater_states(unsigned char)
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tenlog_screen_update_dwn()
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TJCPauseResumePrinting(bool, int)
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tenlog_status_update(bool)
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setting_ECO_MODE()
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::auto_job_over_threshold()
</UL>

<P><STRONG><a name="[226]"></a>Temperature::isHeatingBed()</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, tenlog_touch_lcd.o(i._ZN11Temperature12isHeatingBedEv))
<BR><BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tenlog_screen_update_dwn()
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tenlog_status_update(bool)
</UL>

<P><STRONG><a name="[1d3]"></a>Temperature::setTargetBed(short)</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, m140_m190.o(i._ZN11Temperature12setTargetBedEs))
<BR><BR>[Calls]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::start_watching_bed()
</UL>
<BR>[Called By]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M190()
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M140()
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_command_gcode(long*)
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_command_dwn()
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setting_ECO_MODE()
</UL>

<P><STRONG><a name="[326]"></a>Temperature::wait_for_bed(bool)</STRONG> (Thumb, 338 bytes, Stack size 0 bytes, temperature.o(i._ZN11Temperature12wait_for_bedEb))
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle()
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::degTargetBed()
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::degBed()
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;const T1 [local to temperature_cpp]::ABS&lang;float&rang;(T1)
</UL>
<BR>[Called By]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M190()
</UL>

<P><STRONG><a name="[181]"></a>Temperature::manage_heater()</STRONG> (Thumb, 642 bytes, Stack size 0 bytes, temperature.o(i._ZN11Temperature13manage_heaterEv))
<BR><BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_ResetBitsMapp
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_watchdog_refresh()
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::start_watching_bed()
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::start_watching_hotend(unsigned char)
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::degHotend(unsigned char)
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::degBed()
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::updateTemperaturesFromRawValues()
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::get_pid_output_hotend(unsigned char)
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::checkExtruderAutoFans()
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::tr_state_machine_t::run(float, float, heater_id_t, unsigned short, short)
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::max_temp_error(heater_id_t)
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::_temp_error(heater_id_t, const char*, const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;safe_delay(unsigned)
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle()
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_arc(const XYZEval&lang;float&rang;&, const XYval&lang;float&rang;&, bool, unsigned char)
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_line_done(unsigned char&, char(&)[96], int&)
</UL>

<P><STRONG><a name="[36e]"></a>Temperature::rawHotendTemp(unsigned char)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, temperature.o(i._ZN11Temperature13rawHotendTempEh))
<BR><BR>[Called By]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::print_heater_states(unsigned char)
</UL>

<P><STRONG><a name="[1cf]"></a>Temperature::set_fan_speed(unsigned char, unsigned short)</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, temperature.o(i._ZN11Temperature13set_fan_speedEht))
<BR><BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M81()
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abortSDPrinting()
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M107()
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M106()
</UL>

<P><STRONG><a name="[24c]"></a>Temperature::AutoReportTemp::report()</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, temperature.o(i._ZN11Temperature14AutoReportTemp6reportEv))
<BR><BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SERIAL_CHAR(char)
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::print_heater_states(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle()
</UL>

<P><STRONG><a name="[370]"></a>Temperature::getHeaterPower(heater_id_t)</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, temperature.o(i._ZN11Temperature14getHeaterPowerE11heater_id_t))
<BR><BR>[Called By]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::print_heater_states(unsigned char)
</UL>

<P><STRONG><a name="[365]"></a>Temperature::max_temp_error(heater_id_t)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, temperature.o(i._ZN11Temperature14max_temp_errorE11heater_id_t))
<BR><BR>[Calls]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::_temp_error(heater_id_t, const char*, const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::manage_heater()
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::readings_ready()
</UL>

<P><STRONG><a name="[369]"></a>Temperature::min_temp_error(heater_id_t)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, temperature.o(i._ZN11Temperature14min_temp_errorE11heater_id_t))
<BR><BR>[Calls]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::_temp_error(heater_id_t, const char*, const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::readings_ready()
</UL>

<P><STRONG><a name="[36a]"></a>Temperature::readings_ready()</STRONG> (Thumb, 246 bytes, Stack size 0 bytes, temperature.o(i._ZN11Temperature14readings_readyEv))
<BR><BR>[Calls]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TempInfo::reset()
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::update_raw_temperatures()
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::min_temp_error(heater_id_t)
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::max_temp_error(heater_id_t)
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::isr()
</UL>

<P><STRONG><a name="[41a]"></a>Temperature::scaledFanSpeed(unsigned char, unsigned char)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, planner.o(i._ZN11Temperature14scaledFanSpeedEhh))
<BR><BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::check_axes_activity()
</UL>

<P><STRONG><a name="[222]"></a>Temperature::degTargetHotend(unsigned char)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, tenlog_touch_lcd.o(i._ZN11Temperature15degTargetHotendEh))
<BR><BR>[Called By]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::print_heater_states(unsigned char)
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::start_watching_hotend(unsigned char)
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::wait_for_hotend(unsigned char, bool)
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_outage()
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tenlog_screen_update_dwn()
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TJCPauseResumePrinting(bool, int)
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tenlog_status_update(bool)
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::auto_job_over_threshold()
</UL>

<P><STRONG><a name="[225]"></a>Temperature::isHeatingHotend(unsigned char)</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, tenlog_touch_lcd.o(i._ZN11Temperature15isHeatingHotendEh))
<BR><BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tenlog_screen_update_dwn()
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tenlog_status_update(bool)
</UL>

<P><STRONG><a name="[209]"></a>Temperature::setTargetHotend(short, unsigned char)</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, m104_m109.o(i._ZN11Temperature15setTargetHotendEsh))
<BR><BR>[Calls]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::start_watching_hotend(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M109()
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M104()
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TJCPauseResumePrinting(bool, int)
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_command_gcode(long*)
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_command_dwn()
</UL>

<P><STRONG><a name="[322]"></a>Temperature::wait_for_hotend(unsigned char, bool)</STRONG> (Thumb, 406 bytes, Stack size 0 bytes, temperature.o(i._ZN11Temperature15wait_for_hotendEhb))
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle()
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::degHotend(unsigned char)
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::degTargetHotend(unsigned char)
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restorer&lang;bool&rang;::~restorer()
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;const T1 [local to temperature_cpp]::ABS&lang;float&rang;(T1)
</UL>
<BR>[Called By]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M109()
</UL>

<P><STRONG><a name="[362]"></a>Temperature::start_watching_bed()</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, temperature.o(i._ZN11Temperature18start_watching_bedEv))
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::degTargetBed()
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::degBed()
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::disable_all_heaters()
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::manage_heater()
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::setTargetBed(short)
</UL>

<P><STRONG><a name="[366]"></a>Temperature::tr_state_machine_t::run(float, float, heater_id_t, unsigned short, short)</STRONG> (Thumb, 186 bytes, Stack size 0 bytes, temperature.o(i._ZN11Temperature18tr_state_machine_t3runEff11heater_id_tts))
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::_temp_error(heater_id_t, const char*, const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::manage_heater()
</UL>

<P><STRONG><a name="[b0]"></a>Temperature::tr_state_machine_t::tr_state_machine_t()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, temperature.o(i._ZN11Temperature18tr_state_machine_tC1Ev))
<BR>[Address Reference Count : 1]<UL><LI> temperature.o(i.__sti___15_temperature_cpp_ca4fe824)
</UL>
<P><STRONG><a name="[1cb]"></a>Temperature::disable_all_heaters()</STRONG> (Thumb, 148 bytes, Stack size 0 bytes, temperature.o(i._ZN11Temperature19disable_all_heatersEv))
<BR><BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_ResetBitsMapp
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::start_watching_bed()
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::start_watching_hotend(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M81()
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abortSDPrinting()
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;minkill(bool)
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kill(const char*, const char*, bool)
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::PID_autotune(short, heater_id_t, signed char, bool)
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLAbortPrinting()
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::_temp_error(heater_id_t, const char*, const char*)
</UL>

<P><STRONG><a name="[31f]"></a>Temperature::print_heater_states(unsigned char)</STRONG> (Thumb, 280 bytes, Stack size 0 bytes, temperature.o(i._ZN11Temperature19print_heater_statesEh))
<BR><BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SERIAL_CHAR(char)
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echopair_PGM(const char*, int)
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::degHotend(unsigned char)
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::degTargetHotend(unsigned char)
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::degTargetBed()
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void SERIAL_ECHO&lang;short&rang;(T1)
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::degBed()
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::rawHotendTemp(unsigned char)
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::getHeaterPower(heater_id_t)
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to temperature_cpp]::print_heater_state(float, float, float, heater_id_t)
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::AutoReportTemp::report()
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::PID_autotune(short, heater_id_t, signed char, bool)
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M105()
</UL>

<P><STRONG><a name="[31d]"></a>Temperature::auto_job_check_timer(bool, bool)</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, temperature.o(i._ZN11Temperature20auto_job_check_timerEbb))
<BR><BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stopwatch::stop()
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startOrResumeJob()
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::auto_job_over_threshold()
</UL>
<BR>[Called By]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M190()
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M140()
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M109()
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M104()
</UL>

<P><STRONG><a name="[375]"></a>Temperature::analog_to_celsius_bed(short)</STRONG> (Thumb, 194 bytes, Stack size 0 bytes, temperature.o(i._ZN11Temperature21analog_to_celsius_bedEs))
<BR><BR>[Called By]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::init()
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::updateTemperaturesFromRawValues()
</UL>

<P><STRONG><a name="[361]"></a>Temperature::checkExtruderAutoFans()</STRONG> (Thumb, 194 bytes, Stack size 0 bytes, temperature.o(i._ZN11Temperature21checkExtruderAutoFansEv))
<BR><BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetBitsMapp
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_ResetBitsMapp
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::manage_heater()
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::PID_autotune(short, heater_id_t, signed char, bool)
</UL>

<P><STRONG><a name="[367]"></a>Temperature::get_pid_output_hotend(unsigned char)</STRONG> (Thumb, 620 bytes, Stack size 0 bytes, temperature.o(i._ZN11Temperature21get_pid_output_hotendEh))
<BR><BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::manage_heater()
</UL>

<P><STRONG><a name="[368]"></a>Temperature::start_watching_hotend(unsigned char)</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, temperature.o(i._ZN11Temperature21start_watching_hotendEh))
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::degHotend(unsigned char)
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::degTargetHotend(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::disable_all_heaters()
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::manage_heater()
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::setTargetHotend(short, unsigned char)
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::autotemp_task()
</UL>

<P><STRONG><a name="[372]"></a>Temperature::auto_job_over_threshold()</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, temperature.o(i._ZN11Temperature23auto_job_over_thresholdEv))
<BR><BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::degTargetHotend(unsigned char)
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::degTargetBed()
</UL>
<BR>[Called By]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::auto_job_check_timer(bool, bool)
</UL>

<P><STRONG><a name="[36b]"></a>Temperature::update_raw_temperatures()</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, temperature.o(i._ZN11Temperature23update_raw_temperaturesEv))
<BR><BR>[Calls]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TempInfo::update()
</UL>
<BR>[Called By]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::readings_ready()
</UL>

<P><STRONG><a name="[374]"></a>Temperature::analog_to_celsius_hotend(short, unsigned char)</STRONG> (Thumb, 278 bytes, Stack size 0 bytes, temperature.o(i._ZN11Temperature24analog_to_celsius_hotendEsh))
<BR><BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void SERIAL_ECHO&lang;unsigned char&rang;(T1)
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_error_start()
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kill(const char*, const char*, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::init()
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::updateTemperaturesFromRawValues()
</UL>

<P><STRONG><a name="[360]"></a>Temperature::updateTemperaturesFromRawValues()</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, temperature.o(i._ZN11Temperature31updateTemperaturesFromRawValuesEv))
<BR><BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_watchdog_refresh()
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::analog_to_celsius_hotend(short, unsigned char)
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::analog_to_celsius_bed(short)
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::manage_heater()
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::PID_autotune(short, heater_id_t, signed char, bool)
</UL>

<P><STRONG><a name="[1f6]"></a>Temperature::isr()</STRONG> (Thumb, 484 bytes, Stack size 0 bytes, temperature.o(i._ZN11Temperature3isrEv))
<BR><BR>[Calls]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Babystep::step_axis(AxisEnum)
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetBitsMapp
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_ResetBitsMapp
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Endstops::poll()
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_adc_start_conversion(unsigned char)
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TempInfo::sample(unsigned short)
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftPWM::add(unsigned char, unsigned char)
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::readings_ready()
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TEMP_TIMER_ISR()
</UL>

<P><STRONG><a name="[37a]"></a>Temperature::init()</STRONG> (Thumb, 504 bytes, Stack size 0 bytes, temperature.o(i._ZN11Temperature4initEv))
<BR><BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetBitsMapp
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_ResetBitsMapp
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set_mode(unsigned char, WiringPinMode)
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_enable_irq
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_timer_start(unsigned char, unsigned)
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_adc_init()
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinMode(unsigned char, WiringPinMode)
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::analog_to_celsius_hotend(short, unsigned char)
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::analog_to_celsius_bed(short)
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decltype(((const param#1+const param#2))) [local to temperature_cpp]::_MIN&lang;int, int&rang;(T1, T2)
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decltype(((const param#1+const param#2))) [local to temperature_cpp]::_MAX&lang;int, int&rang;(T1, T2)
</UL>
<BR>[Called By]<UL><LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup
</UL>

<P><STRONG><a name="[363]"></a>Temperature::degBed()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, temperature.o(i._ZN11Temperature6degBedEv))
<BR><BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::manage_heater()
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::start_watching_bed()
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::wait_for_bed(bool)
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::print_heater_states(unsigned char)
</UL>

<P><STRONG><a name="[223]"></a>Temperature::degHotend(unsigned char)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, tenlog_touch_lcd.o(i._ZN11Temperature9degHotendEh))
<BR><BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::manage_heater()
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::PID_autotune(short, heater_id_t, signed char, bool)
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::print_heater_states(unsigned char)
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::start_watching_hotend(unsigned char)
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::wait_for_hotend(unsigned char, bool)
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tenlog_screen_update_dwn()
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tenlog_status_update(bool)
</UL>

<P><STRONG><a name="[1d5]"></a>HardwareSerial::end()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hardwareserial.o(i._ZN14HardwareSerial3endEv))
<BR><BR>[Calls]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TenlogScreen_end()
</UL>

<P><STRONG><a name="[c9]"></a>HardwareSerial::read()</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, hardwareserial.o(i._ZN14HardwareSerial4readEv))
<BR><BR>[Calls]<UL><LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to HardwareSerial_cpp]::usart_data_available(usart_dev*)
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MTLSERIAL_read()
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_serial(serial_index_t)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hardwareserial.o(.constdata__ZTV14HardwareSerial)
</UL>
<P><STRONG><a name="[1f7]"></a>HardwareSerial::begin(unsigned)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, hardwareserial.o(i._ZN14HardwareSerial5beginEj))
<BR><BR>[Calls]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::begin(unsigned, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TenlogScreen_begin(long)
</UL>

<P><STRONG><a name="[381]"></a>HardwareSerial::begin(unsigned, unsigned char)</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, hardwareserial.o(i._ZN14HardwareSerial5beginEjh))
<BR><BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetFuncMapp
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_set_baud_rate
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_init
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::begin(unsigned)
</UL>

<P><STRONG><a name="[ca]"></a>HardwareSerial::flush()</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, hardwareserial.o(i._ZN14HardwareSerial5flushEv))
<BR><BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::flush_and_request_resend(serial_index_t)
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::get_serial_commands()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hardwareserial.o(.constdata__ZTV14HardwareSerial)
</UL>
<P><STRONG><a name="[c5]"></a>HardwareSerial::write(unsigned char)</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, hardwareserial.o(i._ZN14HardwareSerial5writeEh))
<BR><BR>[Calls]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_tx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hardwareserial.o(.constdata__ZTV14HardwareSerial)
</UL>
<P><STRONG><a name="[174]"></a>HardwareSerial::write(int)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, m221.o(i._ZN14HardwareSerial5writeEi))
<BR><BR>[Called By]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void SERIAL_CHAR&lang;&lang;int&rang;&rang;(char, T1...)
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWN_RData(long, int)
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWN_Text(long, int, const char*, bool)
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWN_Page(int)
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWN_Data(long, long, int)
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWN_LED(int)
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLSTJC_printEmptyend()
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLSTJC_printend()
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWN_Change_Icon(int, int, int)
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWN_NORFData(long, long, int, bool)
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWN_Get_Ver()
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWN_VClick(int, int)
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void SERIAL_CHAR&lang;&lang;char&rang;&rang;(char, T1...)
</UL>

<P><STRONG><a name="[257]"></a>HardwareSerial::write(long)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, tenlog_touch_lcd.o(i._ZN14HardwareSerial5writeEl))
<BR><BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWN_Data(long, long, int)
</UL>

<P><STRONG><a name="[304]"></a>HardwareSerial::msgDone()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hardwareserial.o(i._ZN14HardwareSerial7msgDoneEv))
<BR><BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[c8]"></a>HardwareSerial::available()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hardwareserial.o(i._ZN14HardwareSerial9availableEv))
<BR><BR>[Calls]<UL><LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to HardwareSerial_cpp]::usart_data_available(usart_dev*)
</UL>
<BR>[Called By]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to queue_cpp]::serial_data_available(serial_index_t)
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MTLSERIAL_available()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hardwareserial.o(.constdata__ZTV14HardwareSerial)
</UL>
<P><STRONG><a name="[45b]"></a>HardwareSerial::connected()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hardwareserial.o(i._ZN14HardwareSerial9connectedEv))
<BR><BR>[Called By]<UL><LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup
</UL>

<P><STRONG><a name="[44a]"></a>HardwareSerial::HardwareSerial(usart_dev*, unsigned char, unsigned char)</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, hardwareserial.o(i._ZN14HardwareSerialC1EP9usart_devhh))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___12_board_gpio_c_PIN_MAP
</UL>

<P><STRONG><a name="[386]"></a>MarlinSettings::size_error(unsigned short)</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, settings.o(i._ZN14MarlinSettings10size_errorEt))
<BR><BR>[Calls]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::datasize()
</UL>
<BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::save()
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::_load()
</UL>

<P><STRONG><a name="[388]"></a>MarlinSettings::EEPROM_READ(unsigned char*, unsigned)</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, settings.o(i._ZN14MarlinSettings11EEPROM_READEPhj))
<BR><BR>[Calls]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PersistentStore::read_data(int&, unsigned char*, unsigned, unsigned short*, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::_load()
</UL>

<P><STRONG><a name="[1f4]"></a>MarlinSettings::plr_fn_save(int)</STRONG> (Thumb, 114 bytes, Stack size 0 bytes, settings.o(i._ZN14MarlinSettings11plr_fn_saveEi))
<BR><BR>[Calls]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PersistentStore::write_data(int&, const unsigned char*, unsigned, unsigned short*)
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void MarlinSettings::PLR_EEPROM_WRITE&lang;char&rang;(const T1&)
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::PLR_EEPROM_START(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::plr_reset()
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_command_gcode(long*)
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWN_MessageHandler(bool)
</UL>

<P><STRONG><a name="[38d]"></a>MarlinSettings::postprocess()</STRONG> (Thumb, 134 bytes, Stack size 0 bytes, settings.o(i._ZN14MarlinSettings11postprocessEv))
<BR><BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_workspace_offset(AxisEnum)
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::calculate_volumetric_multipliers()
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::refresh_positioning()
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_current_position()
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_software_endstops(AxisEnum, unsigned char, unsigned char)
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::reset_acceleration_rates()
</UL>
<BR>[Called By]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::reset()
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::_load()
</UL>

<P><STRONG><a name="[38f]"></a>MarlinSettings::EEPROM_START(int)</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, settings.o(i._ZN14MarlinSettings12EEPROM_STARTEi))
<BR><BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echo_start()
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PersistentStore::access_start()
</UL>
<BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::save()
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::_load()
</UL>

<P><STRONG><a name="[17c]"></a>MarlinSettings::plr_pre_save(unsigned, short, short, float, unsigned short)</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, settings.o(i._ZN14MarlinSettings12plr_pre_saveEjssft))
<BR><BR>[Calls]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PersistentStore::write_data(int&, const unsigned char*, unsigned, unsigned short*)
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void MarlinSettings::PLR_EEPROM_WRITE&lang;short&rang;(const T1&)
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void MarlinSettings::PLR_EEPROM_WRITE&lang;float&rang;(const T1&)
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::PLR_EEPROM_START(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::plr_reset()
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plr_outage()
</UL>

<P><STRONG><a name="[230]"></a>MarlinSettings::plr_recovery()</STRONG> (Thumb, 920 bytes, Stack size 0 bytes, settings.o(i._ZN14MarlinSettings12plr_recoveryEv))
<BR><BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_subcommands_now(char*)
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_sleep(float)
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay(unsigned long)
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SERIAL_CHAR(char)
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dtostrf
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLSTJC_println(const char*)
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PersistentStore::read_data(int&, unsigned char*, unsigned, unsigned short*, bool)
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void MarlinSettings::PLR_EEPROM_READ&lang;short&rang;(T1&)
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void MarlinSettings::PLR_EEPROM_READ&lang;unsigned&rang;(T1&)
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void MarlinSettings::PLR_EEPROM_READ&lang;float&rang;(T1&)
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::PLR_EEPROM_START(int)
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_command_gcode(long*)
</UL>

<P><STRONG><a name="[38a]"></a>MarlinSettings::PLR_EEPROM_START(int)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, settings.o(i._ZN14MarlinSettings16PLR_EEPROM_STARTEi))
<BR><BR>[Called By]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::plr_is_pl()
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::plr_save(unsigned, short, short, short, short, float, float)
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::plr_recovery()
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::plr_pre_save(unsigned, short, short, float, unsigned short)
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::plr_fn_save(int)
</UL>

<P><STRONG><a name="[332]"></a>MarlinSettings::load()</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, settings.o(i._ZN14MarlinSettings4loadEv))
<BR><BR>[Calls]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::validate()
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::reset()
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::save()
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echo_start()
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::_load()
</UL>
<BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M501()
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup
</UL>

<P><STRONG><a name="[331]"></a>MarlinSettings::save()</STRONG> (Thumb, 1218 bytes, Stack size 0 bytes, settings.o(i._ZN14MarlinSettings4saveEv))
<BR><BR>[Calls]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PersistentStore::access_finish()
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PersistentStore::write_data(int&, const unsigned char*, unsigned, unsigned short*)
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void MarlinSettings::EEPROM_WRITE&lang;short&rang;(const T1&)
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void MarlinSettings::EEPROM_WRITE&lang;unsigned char&rang;(const T1&)
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void MarlinSettings::EEPROM_WRITE&lang;float&rang;(const T1&)
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void MarlinSettings::EEPROM_WRITE&lang;bool&rang;(const T1&)
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void MarlinSettings::EEPROM_WRITE&lang;signed char&rang;(const T1&)
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void MarlinSettings::EEPROM_WRITE&lang;char[4]&rang;(const T1&)
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void MarlinSettings::EEPROM_WRITE&lang;XYZval&lang;float&rang;&rang;(const T1&)
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void MarlinSettings::EEPROM_WRITE&lang;XYval&lang;float&rang;&rang;(const T1&)
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void MarlinSettings::EEPROM_WRITE&lang;PID_t&rang;(const T1&)
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::EEPROM_START(int)
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::size_error(unsigned short)
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M500()
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::load()
</UL>

<P><STRONG><a name="[396]"></a>MarlinSettings::_load()</STRONG> (Thumb, 1926 bytes, Stack size 0 bytes, settings.o(i._ZN14MarlinSettings5_loadEv))
<BR><BR>[Calls]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::report(bool)
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_stepper_drivers()
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlInitSetting()
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PersistentStore::read_data(int&, unsigned char*, unsigned, unsigned short*, bool)
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PersistentStore::access_finish()
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFilamentMonitor&lang;RunoutResponseDebounced, FilamentSensorSwitch&rang;::reset()
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void MarlinSettings::EEPROM_READ_ALWAYS&lang;unsigned char&rang;(T1&)
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void MarlinSettings::EEPROM_READ&lang;short&rang;(T1&)
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void MarlinSettings::EEPROM_READ&lang;unsigned char&rang;(T1&)
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void MarlinSettings::EEPROM_READ&lang;float&rang;(T1&)
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void MarlinSettings::EEPROM_READ&lang;bool&rang;(T1&)
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void MarlinSettings::EEPROM_READ&lang;signed char&rang;(T1&)
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void MarlinSettings::EEPROM_READ&lang;XYZval&lang;float&rang;&rang;(T1&)
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void MarlinSettings::EEPROM_READ&lang;XYval&lang;float&rang;&rang;(T1&)
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void MarlinSettings::EEPROM_READ&lang;PID_t&rang;(T1&)
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::EEPROM_START(int)
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::EEPROM_READ(unsigned char*, unsigned)
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::postprocess()
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::size_error(unsigned short)
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decltype(((const param#1+const param#2))) [local to settings_cpp]::_MIN&lang;unsigned char, int&rang;(T1, T2)
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::validate()
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::load()
</UL>

<P><STRONG><a name="[333]"></a>MarlinSettings::reset()</STRONG> (Thumb, 356 bytes, Stack size 0 bytes, settings.o(i._ZN14MarlinSettings5resetEv))
<BR><BR>[Calls]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Endstops::enable_globally(bool)
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_stepper_drivers()
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlResetEEPROM()
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFilamentMonitor&lang;RunoutResponseDebounced, FilamentSensorSwitch&rang;::reset()
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::postprocess()
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decltype(((const param#1+const param#2))) [local to settings_cpp]::_MIN&lang;unsigned char, int&rang;(T1, T2)
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_hotend_offsets()
</UL>
<BR>[Called By]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M502()
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::load()
</UL>

<P><STRONG><a name="[334]"></a>MarlinSettings::report(bool)</STRONG> (Thumb, 1796 bytes, Stack size 0 bytes, settings.o(i._ZN14MarlinSettings6reportEb))
<BR><BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_M92(bool, signed char)
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(double, int)
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echopair_PGM(const char*, float)
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SERIAL_CHAR(char)
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echopair_PGM(const char*, int)
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echopair_PGM(const char*, unsigned char)
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echo_start()
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M217_report(bool)
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echopair_PGM(const char*, bool)
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to settings_cpp]::config_heading(bool, const char*, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M503()
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::_load()
</UL>

<P><STRONG><a name="[387]"></a>MarlinSettings::datasize()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, settings.o(i._ZN14MarlinSettings8datasizeEv))
<BR><BR>[Called By]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::size_error(unsigned short)
</UL>

<P><STRONG><a name="[253]"></a>MarlinSettings::plr_save(unsigned, short, short, short, short, float, float)</STRONG> (Thumb, 126 bytes, Stack size 0 bytes, settings.o(i._ZN14MarlinSettings8plr_saveEjssssff))
<BR><BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PersistentStore::write_data(int&, const unsigned char*, unsigned, unsigned short*)
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void MarlinSettings::PLR_EEPROM_WRITE&lang;short&rang;(const T1&)
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void MarlinSettings::PLR_EEPROM_WRITE&lang;float&rang;(const T1&)
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::PLR_EEPROM_START(int)
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::plr_reset()
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_outage()
</UL>

<P><STRONG><a name="[335]"></a>MarlinSettings::validate()</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, settings.o(i._ZN14MarlinSettings8validateEv))
<BR><BR>[Calls]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::_load()
</UL>
<BR>[Called By]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M504()
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::load()
</UL>

<P><STRONG><a name="[3b0]"></a>MarlinSettings::plr_is_pl()</STRONG> (Thumb, 114 bytes, Stack size 0 bytes, settings.o(i._ZN14MarlinSettings9plr_is_plEv))
<BR><BR>[Calls]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PersistentStore::read_data(int&, unsigned char*, unsigned, unsigned short*, bool)
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void MarlinSettings::PLR_EEPROM_READ&lang;unsigned&rang;(T1&)
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::PLR_EEPROM_START(int)
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup
</UL>

<P><STRONG><a name="[1cc]"></a>MarlinSettings::plr_reset()</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, settings.o(i._ZN14MarlinSettings9plr_resetEv))
<BR><BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::plr_save(unsigned, short, short, short, short, float, float)
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::plr_pre_save(unsigned, short, short, float, unsigned short)
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::plr_fn_save(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abortSDPrinting()
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLSDPrintFinished()
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_command_gcode(long*)
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLAbortPrinting()
</UL>

<P><STRONG><a name="[2a1]"></a>serial_index_t::serial_index_t(signed char)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, queue.o(i._ZN14serial_index_tC1Ea))
<BR><BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::get_serial_commands()
</UL>

<P><STRONG><a name="[38c]"></a>PersistentStore::write_data(int&, const unsigned char*, unsigned, unsigned short*)</STRONG> (Thumb, 144 bytes, Stack size 0 bytes, eeprom_bl24cxx.o(i._ZN15PersistentStore10write_dataERiPKhjPt))
<BR><BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay(unsigned long)
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echo_start()
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;safe_delay(unsigned)
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc16(unsigned short*, const void*, unsigned short)
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_write_byte(unsigned char*, unsigned char)
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_read_byte(unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::save()
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::plr_save(unsigned, short, short, short, short, float, float)
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::plr_pre_save(unsigned, short, short, float, unsigned short)
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::plr_fn_save(int)
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void MarlinSettings::PLR_EEPROM_WRITE&lang;short&rang;(const T1&)
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void MarlinSettings::PLR_EEPROM_WRITE&lang;float&rang;(const T1&)
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void MarlinSettings::PLR_EEPROM_WRITE&lang;char&rang;(const T1&)
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void MarlinSettings::EEPROM_WRITE&lang;short&rang;(const T1&)
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void MarlinSettings::EEPROM_WRITE&lang;unsigned char&rang;(const T1&)
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void MarlinSettings::EEPROM_WRITE&lang;float&rang;(const T1&)
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void MarlinSettings::EEPROM_WRITE&lang;bool&rang;(const T1&)
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void MarlinSettings::EEPROM_WRITE&lang;signed char&rang;(const T1&)
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void MarlinSettings::EEPROM_WRITE&lang;char[4]&rang;(const T1&)
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void MarlinSettings::EEPROM_WRITE&lang;XYZval&lang;float&rang;&rang;(const T1&)
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void MarlinSettings::EEPROM_WRITE&lang;XYval&lang;float&rang;&rang;(const T1&)
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void MarlinSettings::EEPROM_WRITE&lang;PID_t&rang;(const T1&)
</UL>

<P><STRONG><a name="[390]"></a>PersistentStore::access_start()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, eeprom_bl24cxx.o(i._ZN15PersistentStore12access_startEv))
<BR><BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_init()
</UL>
<BR>[Called By]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::EEPROM_START(int)
</UL>

<P><STRONG><a name="[3a0]"></a>PersistentStore::access_finish()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, eeprom_bl24cxx.o(i._ZN15PersistentStore13access_finishEv))
<BR><BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::save()
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::_load()
</UL>

<P><STRONG><a name="[389]"></a>PersistentStore::read_data(int&, unsigned char*, unsigned, unsigned short*, bool)</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, eeprom_bl24cxx.o(i._ZN15PersistentStore9read_dataERiPhjPtb))
<BR><BR>[Calls]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc16(unsigned short*, const void*, unsigned short)
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_read_byte(unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::plr_is_pl()
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::plr_recovery()
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void MarlinSettings::EEPROM_READ_ALWAYS&lang;unsigned char&rang;(T1&)
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void MarlinSettings::PLR_EEPROM_READ&lang;short&rang;(T1&)
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void MarlinSettings::PLR_EEPROM_READ&lang;unsigned&rang;(T1&)
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void MarlinSettings::PLR_EEPROM_READ&lang;float&rang;(T1&)
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void MarlinSettings::EEPROM_READ&lang;short&rang;(T1&)
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void MarlinSettings::EEPROM_READ&lang;unsigned char&rang;(T1&)
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void MarlinSettings::EEPROM_READ&lang;float&rang;(T1&)
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void MarlinSettings::EEPROM_READ&lang;bool&rang;(T1&)
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void MarlinSettings::EEPROM_READ&lang;signed char&rang;(T1&)
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void MarlinSettings::EEPROM_READ&lang;XYZval&lang;float&rang;&rang;(T1&)
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void MarlinSettings::EEPROM_READ&lang;XYval&lang;float&rang;&rang;(T1&)
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void MarlinSettings::EEPROM_READ&lang;PID_t&rang;(T1&)
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::EEPROM_READ(unsigned char*, unsigned)
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::_load()
</UL>

<P><STRONG><a name="[cd]"></a>DiskIODriver_SDIO::writeBlock(unsigned, const unsigned char*)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, cardreader.o(i._ZN17DiskIODriver_SDIO10writeBlockEjPKh))
<BR><BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_WriteBlock(unsigned, const unsigned char*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cardreader.o(.constdata__ZTV17DiskIODriver_SDIO)
</UL>
<P><STRONG><a name="[cb]"></a>DiskIODriver_SDIO::init(unsigned char, signed char)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, cardreader.o(i._ZN17DiskIODriver_SDIO4initEha))
<BR><BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_Init()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cardreader.o(.constdata__ZTV17DiskIODriver_SDIO)
</UL>
<P><STRONG><a name="[cc]"></a>DiskIODriver_SDIO::readBlock(unsigned, unsigned char*)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, cardreader.o(i._ZN17DiskIODriver_SDIO9readBlockEjPh))
<BR><BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ReadBlock(unsigned, unsigned char*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cardreader.o(.constdata__ZTV17DiskIODriver_SDIO)
</UL>
<P><STRONG><a name="[3b2]"></a>FilamentSensorBase::poll_runout_states()</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, marlincore.o(i._ZN18FilamentSensorBase18poll_runout_statesEv))
<BR><BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_GetBit
</UL>
<BR>[Called By]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FilamentSensorSwitch::run()
</UL>

<P><STRONG><a name="[3b3]"></a>FilamentSensorSwitch::run()</STRONG> (Thumb, 118 bytes, Stack size 0 bytes, marlincore.o(i._ZN20FilamentSensorSwitch3runEv))
<BR><BR>[Calls]<UL><LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunoutResponseDebounced::filament_present(unsigned char)
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FilamentSensorBase::poll_runout_states()
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echopair_PGM(const char*, int)
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFilamentMonitor&lang;RunoutResponseDebounced, FilamentSensorSwitch&rang;::run()
</UL>

<P><STRONG><a name="[3b4]"></a>RunoutResponseDebounced::filament_present(unsigned char)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, marlincore.o(i._ZN23RunoutResponseDebounced16filament_presentEh))
<BR><BR>[Called By]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FilamentSensorSwitch::run()
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup
</UL>

<P><STRONG><a name="[3e0]"></a>IIC::ack()</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, bl24cxx.o(i._ZN3IIC3ackEv))
<BR><BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetBitsMapp
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_ResetBitsMapp
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set_mode(unsigned char, WiringPinMode)
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ddl_Delay1us
</UL>
<BR>[Called By]<UL><LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC::read_byte(unsigned char)
</UL>

<P><STRONG><a name="[3e1]"></a>IIC::init()</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, bl24cxx.o(i._ZN3IIC4initEv))
<BR><BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetBitsMapp
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_ResetBitsMapp
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set_mode(unsigned char, WiringPinMode)
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL24CXX::init()
</UL>

<P><STRONG><a name="[3e2]"></a>IIC::nAck()</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, bl24cxx.o(i._ZN3IIC4nAckEv))
<BR><BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetBitsMapp
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_ResetBitsMapp
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set_mode(unsigned char, WiringPinMode)
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ddl_Delay1us
</UL>
<BR>[Called By]<UL><LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC::read_byte(unsigned char)
</UL>

<P><STRONG><a name="[3e3]"></a>IIC::stop()</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, bl24cxx.o(i._ZN3IIC4stopEv))
<BR><BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetBitsMapp
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_ResetBitsMapp
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set_mode(unsigned char, WiringPinMode)
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ddl_Delay1us
</UL>
<BR>[Called By]<UL><LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC::wait_ack()
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL24CXX::writeOneByte(unsigned short, unsigned char)
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL24CXX::readOneByte(unsigned short)
</UL>

<P><STRONG><a name="[3e4]"></a>IIC::start()</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, bl24cxx.o(i._ZN3IIC5startEv))
<BR><BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetBitsMapp
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_ResetBitsMapp
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set_mode(unsigned char, WiringPinMode)
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ddl_Delay1us
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL24CXX::writeOneByte(unsigned short, unsigned char)
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL24CXX::readOneByte(unsigned short)
</UL>

<P><STRONG><a name="[3e5]"></a>IIC::wait_ack()</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, bl24cxx.o(i._ZN3IIC8wait_ackEv))
<BR><BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetBitsMapp
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_ResetBitsMapp
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set_mode(unsigned char, WiringPinMode)
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ddl_Delay1us
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC::stop()
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_GetBitMapp
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL24CXX::writeOneByte(unsigned short, unsigned char)
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL24CXX::readOneByte(unsigned short)
</UL>

<P><STRONG><a name="[3e6]"></a>IIC::read_byte(unsigned char)</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, bl24cxx.o(i._ZN3IIC9read_byteEh))
<BR><BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetBitsMapp
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_ResetBitsMapp
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set_mode(unsigned char, WiringPinMode)
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ddl_Delay1us
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC::nAck()
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC::ack()
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_GetBitMapp
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL24CXX::readOneByte(unsigned short)
</UL>

<P><STRONG><a name="[3e7]"></a>IIC::send_byte(unsigned char)</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, bl24cxx.o(i._ZN3IIC9send_byteEh))
<BR><BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetBitsMapp
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_ResetBitsMapp
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set_mode(unsigned char, WiringPinMode)
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ddl_Delay1us
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL24CXX::writeOneByte(unsigned short, unsigned char)
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL24CXX::readOneByte(unsigned short)
</UL>

<P><STRONG><a name="[3ea]"></a>Print::printFloat(double, unsigned char)</STRONG> (Thumb, 366 bytes, Stack size 0 bytes, print.o(i._ZN5Print10printFloatEdh))
<BR><BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(char)
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(const char*)
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(int, int)
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_l2d
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2lz
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(long long, int)
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(double, int)
</UL>

<P><STRONG><a name="[3ef]"></a>Print::printNumber(unsigned long long, unsigned char)</STRONG> (Thumb, 144 bytes, Stack size 0 bytes, print.o(i._ZN5Print11printNumberEyh))
<BR><BR>[Calls]<UL><LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(char)
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(unsigned long long, int)
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(long long, int)
</UL>

<P><STRONG><a name="[19c]"></a>Print::print(const char*)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, print.o(i._ZN5Print5printEPKc))
<BR><BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void SERIAL_ECHO&lang;const char*&rang;(T1)
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println(const char*)
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWN_Text(long, int, const char*, bool)
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLSTJC_println(const char*)
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLSTJC_print(const char*)
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void SERIAL_ECHO&lang;char*&rang;(T1)
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::printFloat(double, unsigned char)
</UL>

<P><STRONG><a name="[3ec]"></a>Print::print(char)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, print.o(i._ZN5Print5printEc))
<BR><BR>[Called By]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println()
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(long long, int)
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::printNumber(unsigned long long, unsigned char)
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::printFloat(double, unsigned char)
</UL>

<P><STRONG><a name="[32b]"></a>Print::print(double, int)</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, print.o(i._ZN5Print5printEdi))
<BR><BR>[Calls]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::printFloat(double, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::report(bool)
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void SERIAL_ECHO&lang;float&rang;(T1)
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M218()
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void SERIAL_PRINT&lang;float, int&rang;(T1, T2)
</UL>

<P><STRONG><a name="[3f0]"></a>Print::print(unsigned char, int)</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, print.o(i._ZN5Print5printEhi))
<BR><BR>[Calls]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(unsigned long long, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void SERIAL_ECHO&lang;unsigned char&rang;(T1)
</UL>

<P><STRONG><a name="[3ee]"></a>Print::print(int, int)</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, print.o(i._ZN5Print5printEii))
<BR><BR>[Calls]<UL><LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(long long, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void SERIAL_ECHO&lang;int&rang;(T1)
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void SERIAL_ECHO&lang;unsigned short&rang;(T1)
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void SERIAL_ECHO&lang;short&rang;(T1)
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void SERIAL_ECHO&lang;heater_id_t&rang;(T1)
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::printFloat(double, unsigned char)
</UL>

<P><STRONG><a name="[3f2]"></a>Print::print(unsigned, int)</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, print.o(i._ZN5Print5printEji))
<BR><BR>[Calls]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(unsigned long long, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void SERIAL_ECHO&lang;unsigned&rang;(T1)
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println(unsigned, int)
</UL>

<P><STRONG><a name="[3f3]"></a>Print::print(long, int)</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, print.o(i._ZN5Print5printEli))
<BR><BR>[Calls]<UL><LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(long long, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void SERIAL_ECHO&lang;long&rang;(T1)
</UL>

<P><STRONG><a name="[3ed]"></a>Print::print(long long, int)</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, print.o(i._ZN5Print5printExi))
<BR><BR>[Calls]<UL><LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(char)
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::printNumber(unsigned long long, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(long, int)
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(int, int)
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println(long, int)
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::printFloat(double, unsigned char)
</UL>

<P><STRONG><a name="[3f1]"></a>Print::print(unsigned long long, int)</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, print.o(i._ZN5Print5printEyi))
<BR><BR>[Calls]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::printNumber(unsigned long long, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(unsigned, int)
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(unsigned char, int)
</UL>

<P><STRONG><a name="[c6]"></a>Print::write(const char*)</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, print.o(i._ZN5Print5writeEPKc))
<BR><BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 3]<UL><LI> hardwareserial.o(.constdata__ZTV14HardwareSerial)
<LI> hardwareserial.o(.constdata__ZTV6Stream)
<LI> print.o(.constdata__ZTV5Print)
</UL>
<P><STRONG><a name="[c7]"></a>Print::write(const void*, unsigned)</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, print.o(i._ZN5Print5writeEPKvj))
<BR>[Address Reference Count : 3]<UL><LI> hardwareserial.o(.constdata__ZTV14HardwareSerial)
<LI> hardwareserial.o(.constdata__ZTV6Stream)
<LI> print.o(.constdata__ZTV5Print)
</UL>
<P><STRONG><a name="[3f4]"></a>Print::println(const char*)</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, print.o(i._ZN5Print7printlnEPKc))
<BR><BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(const char*)
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println()
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void SERIAL_ECHOLN&lang;char*&rang;(T1)
</UL>

<P><STRONG><a name="[3f6]"></a>Print::println(unsigned, int)</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, print.o(i._ZN5Print7printlnEji))
<BR><BR>[Calls]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(unsigned, int)
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println()
</UL>
<BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void SERIAL_ECHOLN&lang;unsigned&rang;(T1)
</UL>

<P><STRONG><a name="[3f7]"></a>Print::println(long, int)</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, print.o(i._ZN5Print7printlnEli))
<BR><BR>[Calls]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println()
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(long long, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void SERIAL_ECHOLN&lang;long&rang;(T1)
</UL>

<P><STRONG><a name="[3f5]"></a>Print::println()</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, print.o(i._ZN5Print7printlnEv))
<BR><BR>[Calls]<UL><LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(char)
</UL>
<BR>[Called By]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println(const char*)
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println(long, int)
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println(unsigned, int)
</UL>

<P><STRONG><a name="[3f8]"></a>Nozzle::park_mode_0_height(float)</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, nozzle.o(i._ZN6Nozzle18park_mode_0_heightEf))
<BR><BR>[Called By]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nozzle::park(unsigned char, const XYZval&lang;float&rang;&)
</UL>

<P><STRONG><a name="[311]"></a>Nozzle::park(unsigned char, const XYZval&lang;float&rang;&)</STRONG> (Thumb, 186 bytes, Stack size 0 bytes, nozzle.o(i._ZN6Nozzle4parkEhRK6XYZvalIfE))
<BR><BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_current_position()
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_blocking_move_to_xy(float, float, float)
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_blocking_move_to_z(float, float)
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nozzle::park_mode_0_height(float)
</UL>
<BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G27()
</UL>

<P><STRONG><a name="[283]"></a>SdFile::write(const char*)</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, sdfile.o(i._ZN6SdFile5writeEPKc))
<BR><BR>[Calls]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::write(const void*, unsigned short)
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::write_command(char*)
</UL>

<P><STRONG><a name="[ae]"></a>SdFile::SdFile()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, cardreader.o(i._ZN6SdFileC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::fileExists(const char*)
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::printListing(SdFile, const char*)
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::diveToFile(bool, SdFile*&, const char*, bool)
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___14_cardreader_cpp_M23_STR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cardreader.o(i.__sti___14_cardreader_cpp_M23_STR)
</UL>
<P><STRONG><a name="[aa]"></a>SdFile::~SdFile()</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, cardreader.o(i._ZN6SdFileD1Ev))
<BR><BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::isOpen() const
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::close()
</UL>
<BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::ls()
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::fileExists(const char*)
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::selectFileByName(const char*)
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::printListing(SdFile, const char*)
</UL>
<BR>[Address Reference Count : 3]<UL><LI> cardreader.o(i.<Func48>)
<LI> cardreader.o(i._ZN10CardReader10diveToFileEbRP6SdFilePKcb)
<LI> cardreader.o(i.__sti___14_cardreader_cpp_M23_STR)
</UL>
<P><STRONG><a name="[1da]"></a>BL24CXX::readOneByte(unsigned short)</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, bl24cxx.o(i._ZN7BL24CXX11readOneByteEt))
<BR><BR>[Calls]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC::send_byte(unsigned char)
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC::read_byte(unsigned char)
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC::wait_ack()
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC::start()
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC::stop()
</UL>
<BR>[Called By]<UL><LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL24CXX::_check()
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_read_byte(unsigned char*)
</UL>

<P><STRONG><a name="[1e6]"></a>BL24CXX::writeOneByte(unsigned short, unsigned char)</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, bl24cxx.o(i._ZN7BL24CXX12writeOneByteEth))
<BR><BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay(unsigned long)
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC::send_byte(unsigned char)
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC::wait_ack()
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC::start()
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC::stop()
</UL>
<BR>[Called By]<UL><LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL24CXX::check()
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_write_byte(unsigned char*, unsigned char)
</UL>

<P><STRONG><a name="[187]"></a>BL24CXX::init()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bl24cxx.o(i._ZN7BL24CXX4initEv))
<BR><BR>[Calls]<UL><LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC::init()
</UL>
<BR>[Called By]<UL><LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_init()
</UL>

<P><STRONG><a name="[3f9]"></a>BL24CXX::check()</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, bl24cxx.o(i._ZN7BL24CXX5checkEv))
<BR><BR>[Calls]<UL><LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL24CXX::_check()
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL24CXX::writeOneByte(unsigned short, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup
</UL>

<P><STRONG><a name="[3fa]"></a>BL24CXX::_check()</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, bl24cxx.o(i._ZN7BL24CXX6_checkEv))
<BR><BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL24CXX::readOneByte(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL24CXX::check()
</UL>

<P><STRONG><a name="[1ef]"></a>Planner::quick_stop()</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, planner.o(i._ZN7Planner10quick_stopEv))
<BR><BR>[Calls]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_enable_irq
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_disable_irq
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_timer_interrupt_enabled(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quickstop_stepper()
</UL>

<P><STRONG><a name="[234]"></a>Planner::buffer_line(float, float, float, float, float, unsigned char, float)</STRONG> (Thumb, 648 bytes, Stack size 0 bytes, planner.o(i._ZN7Planner11buffer_lineEfffffhf))
<BR><BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::seekSet(unsigned)
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::fabs(float)
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::set_position_mm(float, float, float, float)
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::buffer_segment(float, float, float, float, float, unsigned char, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepare_line_to_destination()
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M605()
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_arc(const XYZEval&lang;float&rang;&, const XYval&lang;float&rang;&, bool, unsigned char)
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dual_x_carriage_unpark()
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_to_current_position(float)
</UL>

<P><STRONG><a name="[3fd]"></a>Planner::recalculate()</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, planner.o(i._ZN7Planner11recalculateEv))
<BR><BR>[Calls]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::prev_block_index(unsigned char)
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::recalculate_trapezoids()
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::reverse_pass()
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::forward_pass()
</UL>
<BR>[Called By]<UL><LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::_buffer_steps(const XYZEval&lang;int&rang;&, float, unsigned char, float)
</UL>

<P><STRONG><a name="[18d]"></a>Planner::synchronize()</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, planner.o(i._ZN7Planner11synchronizeEv))
<BR><BR>[Calls]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle()
</UL>
<BR>[Called By]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M400()
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M18_M84()
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_sleep(float)
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tool_change(unsigned char, bool)
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G28()
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFilamentMonitor&lang;RunoutResponseDebounced, FilamentSensorSwitch&rang;::run()
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;manage_inactivity(bool)
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quickstop_stepper()
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::fileHasFinished()
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M605()
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G34()
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M32()
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G4()
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWN_MessageHandler(bool)
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dualx_tool_change(unsigned char, bool&)
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::set_axis_position(AxisEnum, const int&)
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::set_position(const int&, const int&, const int&, const int&)
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dual_x_carriage_unpark()
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_blocking_move_to(float, float, float, float)
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_homing_move(AxisEnum, float, float, bool)
</UL>

<P><STRONG><a name="[400]"></a>Planner::forward_pass()</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, planner.o(i._ZN7Planner12forward_passEv))
<BR><BR>[Calls]<UL><LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::next_block_index(unsigned char)
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::is_block_busy(const block_t*)
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::forward_pass_kernel(const block_t*, block_t*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::recalculate()
</UL>

<P><STRONG><a name="[3ff]"></a>Planner::reverse_pass()</STRONG> (Thumb, 110 bytes, Stack size 0 bytes, planner.o(i._ZN7Planner12reverse_passEv))
<BR><BR>[Calls]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::prev_block_index(unsigned char)
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::next_block_index(unsigned char)
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::reverse_pass_kernel(block_t*, const block_t*)
</UL>
<BR>[Called By]<UL><LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::recalculate()
</UL>

<P><STRONG><a name="[32a]"></a>Planner::set_max_jerk(AxisEnum, float)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, planner.o(i._ZN7Planner12set_max_jerkE8AxisEnumf))
<BR><BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M205()
</UL>

<P><STRONG><a name="[406]"></a>Planner::_buffer_steps(const XYZEval&lang;int&rang;&, float, unsigned char, float)</STRONG> (Thumb, 166 bytes, Stack size 0 bytes, planner.o(i._ZN7Planner13_buffer_stepsERK7XYZEvalIiEfhf))
<BR><BR>[Calls]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle()
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::next_block_index(unsigned char)
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::_populate_block(block_t*, bool, const XYZEval&lang;int&rang;&, float, unsigned char, float)
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::recalculate()
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::buffer_segment(float, float, float, float, float, unsigned char, float)
</UL>

<P><STRONG><a name="[408]"></a>Planner::autotemp_task()</STRONG> (Thumb, 408 bytes, Stack size 0 bytes, planner.o(i._ZN7Planner13autotemp_taskEv))
<BR><BR>[Calls]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::start_watching_hotend(unsigned char)
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::next_block_index(unsigned char)
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to planner_cpp]::NOLESS&lang;float, float&rang;(T1&, T2)
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::check_axes_activity()
</UL>

<P><STRONG><a name="[1bc]"></a>Planner::buffer_segment(float, float, float, float, float, unsigned char, float)</STRONG> (Thumb, 184 bytes, Stack size 0 bytes, planner.o(i._ZN7Planner14buffer_segmentEfffffhf))
<BR><BR>[Calls]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_enable_irq
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::_buffer_steps(const XYZEval&lang;int&rang;&, float, unsigned char, float)
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_lroundf
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::buffer_line(float, float, float, float, float, unsigned char, float)
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_homing_move(AxisEnum, float, float, bool)
</UL>

<P><STRONG><a name="[407]"></a>Planner::_populate_block(block_t*, bool, const XYZEval&lang;int&rang;&, float, unsigned char, float)</STRONG> (Thumb, 3692 bytes, Stack size 0 bytes, planner.o(i._ZN7Planner15_populate_blockEP7block_tbRK7XYZEvalIiEfhf))
<BR><BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_ResetBitsMapp
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echo_start()
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::max_allowable_speed_sqr(float, float, float)
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to planner_cpp]::NOMORE&lang;unsigned, unsigned&rang;(T1&, T2)
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to planner_cpp]::NOMORE&lang;unsigned, float&rang;(T1&, T2)
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to planner_cpp]::NOMORE&lang;float, float&rang;(T1&, T2)
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to planner_cpp]::NOLESS&lang;float, float&rang;(T1&, T2)
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decltype(((const param#1+const param#2))) [local to planner_cpp]::_MIN&lang;float, float&rang;(T1, T2)
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decltype(((const param#1+const param#2))) [local to planner_cpp]::_MAX&lang;unsigned, unsigned&rang;(T1, T2)
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decltype(((const param#1+const param#2))) [local to planner_cpp]::_MAX&lang;float, float&rang;(T1, T2)
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;const T1 [local to planner_cpp]::ABS&lang;int&rang;(T1)
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;const T1 [local to planner_cpp]::ABS&lang;float&rang;(T1)
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_lroundf
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_ceilf
</UL>
<BR>[Called By]<UL><LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::_buffer_steps(const XYZEval&lang;int&rang;&, float, unsigned char, float)
</UL>

<P><STRONG><a name="[1f9]"></a>Planner::set_position_mm(float, float, float, float)</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, planner.o(i._ZN7Planner15set_position_mmEffff))
<BR><BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::set_machine_position_mm(float, float, float, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::refresh_positioning()
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_plan_position()
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::buffer_line(float, float, float, float, float, unsigned char, float)
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dual_x_carriage_unpark()
</UL>

<P><STRONG><a name="[414]"></a>Planner::sync_fan_speeds(unsigned char(&)[1])</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, planner.o(i._ZN7Planner15sync_fan_speedsERA1_h))
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::check_axes_activity()
</UL>

<P><STRONG><a name="[404]"></a>Planner::next_block_index(unsigned char)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, planner.o(i._ZN7Planner16next_block_indexEh))
<BR><BR>[Called By]<UL><LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::recalculate_trapezoids()
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::get_current_block()
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::buffer_sync_block()
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::autotemp_task()
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::_buffer_steps(const XYZEval&lang;int&rang;&, float, unsigned char, float)
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::reverse_pass()
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::forward_pass()
</UL>

<P><STRONG><a name="[3fe]"></a>Planner::prev_block_index(unsigned char)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, planner.o(i._ZN7Planner16prev_block_indexEh))
<BR><BR>[Called By]<UL><LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::recalculate_trapezoids()
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::reverse_pass()
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::recalculate()
</UL>

<P><STRONG><a name="[329]"></a>Planner::set_max_feedrate(unsigned char, float)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, planner.o(i._ZN7Planner16set_max_feedrateEhf))
<BR><BR>[Called By]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M203()
</UL>

<P><STRONG><a name="[415]"></a>Planner::buffer_sync_block()</STRONG> (Thumb, 134 bytes, Stack size 0 bytes, planner.o(i._ZN7Planner17buffer_sync_blockEv))
<BR><BR>[Calls]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle()
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_enable_irq
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::next_block_index(unsigned char)
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::set_machine_position_mm(float, float, float, float)
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::set_e_position_mm(float)
</UL>

<P><STRONG><a name="[416]"></a>Planner::endstop_triggered(AxisEnum)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, planner.o(i._ZN7Planner17endstop_triggeredE8AxisEnum))
<BR><BR>[Calls]<UL><LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::endstop_triggered(AxisEnum)
</UL>
<BR>[Called By]<UL><LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Endstops::update()
</UL>

<P><STRONG><a name="[418]"></a>Planner::get_current_block()</STRONG> (Thumb, 130 bytes, Stack size 0 bytes, planner.o(i._ZN7Planner17get_current_blockEv))
<BR><BR>[Calls]<UL><LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::next_block_index(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::block_phase_isr()
</UL>

<P><STRONG><a name="[21e]"></a>Planner::set_e_position_mm(float)</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, planner.o(i._ZN7Planner17set_e_position_mmEf))
<BR><BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::set_axis_position(AxisEnum, const int&)
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::buffer_sync_block()
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_lroundf
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_plan_position_e()
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepare_line_to_destination()
</UL>

<P><STRONG><a name="[31e]"></a>Planner::autotemp_M104_M109()</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, planner.o(i._ZN7Planner18autotemp_M104_M109Ev))
<BR><BR>[Calls]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::seenval(char)
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::seen(char)
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::value_float()
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::value_celsius()
</UL>
<BR>[Called By]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M109()
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M104()
</UL>

<P><STRONG><a name="[319]"></a>Planner::finish_and_disable()</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, planner.o(i._ZN7Planner18finish_and_disableEv))
<BR><BR>[Calls]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle()
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disable_all_steppers()
</UL>
<BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M81()
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M18_M84()
</UL>

<P><STRONG><a name="[1ed]"></a>Planner::check_axes_activity()</STRONG> (Thumb, 112 bytes, Stack size 0 bytes, planner.o(i._ZN7Planner19check_axes_activityEv))
<BR><BR>[Calls]<UL><LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::scaledFanSpeed(unsigned char, unsigned char)
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::sync_fan_speeds(unsigned char(&)[1])
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::autotemp_task()
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;manage_inactivity(bool)
</UL>

<P><STRONG><a name="[403]"></a>Planner::forward_pass_kernel(const block_t*, block_t*, unsigned char)</STRONG> (Thumb, 158 bytes, Stack size 0 bytes, planner.o(i._ZN7Planner19forward_pass_kernelEPK7block_tPS0_h))
<BR><BR>[Calls]<UL><LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::max_allowable_speed_sqr(float, float, float)
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::is_block_busy(const block_t*)
</UL>
<BR>[Called By]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::forward_pass()
</UL>

<P><STRONG><a name="[31b]"></a>Planner::refresh_positioning()</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, planner.o(i._ZN7Planner19refresh_positioningEv))
<BR><BR>[Calls]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::reset_acceleration_rates()
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::set_position_mm(float, float, float, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M92()
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::postprocess()
</UL>

<P><STRONG><a name="[405]"></a>Planner::reverse_pass_kernel(block_t*, const block_t*)</STRONG> (Thumb, 172 bytes, Stack size 0 bytes, planner.o(i._ZN7Planner19reverse_pass_kernelEP7block_tPKS0_))
<BR><BR>[Calls]<UL><LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::max_allowable_speed_sqr(float, float, float)
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::is_block_busy(const block_t*)
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decltype(((const param#1+const param#2))) [local to planner_cpp]::_MIN&lang;float, float&rang;(T1, T2)
</UL>
<BR>[Called By]<UL><LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::reverse_pass()
</UL>

<P><STRONG><a name="[1ba]"></a>Planner::get_axis_position_mm(AxisEnum)</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, planner.o(i._ZN7Planner20get_axis_position_mmE8AxisEnum))
<BR><BR>[Calls]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::position(AxisEnum)
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_current_from_steppers_for_axis(AxisEnum)
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_cartesian_from_steppers()
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_homing_move(AxisEnum, float, float, bool)
</UL>

<P><STRONG><a name="[328]"></a>Planner::set_max_acceleration(unsigned char, float)</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, planner.o(i._ZN7Planner20set_max_accelerationEhf))
<BR><BR>[Calls]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::reset_acceleration_rates()
</UL>
<BR>[Called By]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M201()
</UL>

<P><STRONG><a name="[41c]"></a>Planner::triggered_position_mm(AxisEnum)</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, planner.o(i._ZN7Planner21triggered_position_mmE8AxisEnum))
<BR><BR>[Calls]<UL><LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::triggered_position(AxisEnum)
</UL>
<BR>[Called By]<UL><LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Endstops::event_handler()
</UL>

<P><STRONG><a name="[401]"></a>Planner::recalculate_trapezoids()</STRONG> (Thumb, 318 bytes, Stack size 0 bytes, planner.o(i._ZN7Planner22recalculate_trapezoidsEv))
<BR><BR>[Calls]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::prev_block_index(unsigned char)
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::next_block_index(unsigned char)
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::is_block_busy(const block_t*)
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::calculate_trapezoid_for_block(block_t*, float, float)
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
</UL>
<BR>[Called By]<UL><LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::recalculate()
</UL>

<P><STRONG><a name="[412]"></a>Planner::max_allowable_speed_sqr(float, float, float)</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, planner.o(i._ZN7Planner23max_allowable_speed_sqrEfff))
<BR><BR>[Called By]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::reverse_pass_kernel(block_t*, const block_t*)
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::forward_pass_kernel(const block_t*, block_t*, unsigned char)
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::_populate_block(block_t*, bool, const XYZEval&lang;int&rang;&, float, unsigned char, float)
</UL>

<P><STRONG><a name="[1bb]"></a>Planner::set_machine_position_mm(float, float, float, float)</STRONG> (Thumb, 172 bytes, Stack size 0 bytes, planner.o(i._ZN7Planner23set_machine_position_mmEffff))
<BR><BR>[Calls]<UL><LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::set_position(const int&, const int&, const int&, const int&)
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::buffer_sync_block()
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_lroundf
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::set_position_mm(float, float, float, float)
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_homing_move(AxisEnum, float, float, bool)
</UL>

<P><STRONG><a name="[38e]"></a>Planner::reset_acceleration_rates()</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, planner.o(i._ZN7Planner24reset_acceleration_ratesEv))
<BR><BR>[Calls]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to planner_cpp]::NOLESS&lang;unsigned, unsigned&rang;(T1&, T2)
</UL>
<BR>[Called By]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::set_max_acceleration(unsigned char, float)
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::refresh_positioning()
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::postprocess()
</UL>

<P><STRONG><a name="[41e]"></a>Planner::calculate_trapezoid_for_block(block_t*, float, float)</STRONG> (Thumb, 388 bytes, Stack size 0 bytes, planner.o(i._ZN7Planner29calculate_trapezoid_for_blockEP7block_tff))
<BR><BR>[Calls]<UL><LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::estimate_acceleration_distance(float, float, float)
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to planner_cpp]::NOLESS&lang;unsigned, unsigned&rang;(T1&, T2)
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_floorf
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_ceilf
</UL>
<BR>[Called By]<UL><LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::recalculate_trapezoids()
</UL>

<P><STRONG><a name="[421]"></a>Planner::estimate_acceleration_distance(float, float, float)</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, planner.o(i._ZN7Planner30estimate_acceleration_distanceEfff))
<BR><BR>[Called By]<UL><LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::calculate_trapezoid_for_block(block_t*, float, float)
</UL>

<P><STRONG><a name="[327]"></a>Planner::calculate_volumetric_multipliers()</STRONG> (Thumb, 134 bytes, Stack size 0 bytes, planner.o(i._ZN7Planner32calculate_volumetric_multipliersEv))
<BR><BR>[Called By]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M200()
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::postprocess()
</UL>

<P><STRONG><a name="[423]"></a>Planner::init()</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, planner.o(i._ZN7Planner4initEv))
<BR><BR>[Called By]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::Planner()
</UL>

<P><STRONG><a name="[422]"></a>Planner::Planner()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, planner.o(i._ZN7PlannerC1Ev))
<BR><BR>[Calls]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::init()
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___11_planner_cpp_planner
</UL>

<P><STRONG><a name="[376]"></a>SoftPWM::add(unsigned char, unsigned char)</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, temperature.o(i._ZN7SoftPWM3addEhh))
<BR><BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::isr()
</UL>

<P><STRONG><a name="[424]"></a>Stepper::do_babystep(AxisEnum, bool)</STRONG> (Thumb, 974 bytes, Stack size 0 bytes, stepper.o(i._ZN7Stepper11do_babystepE8AxisEnumb))
<BR><BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetBitsMapp
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_ResetBitsMapp
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ddl_Delay1us
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_GetBitMapp
</UL>
<BR>[Called By]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Babystep::step_axis(AxisEnum)
</UL>

<P><STRONG><a name="[41f]"></a>Stepper::set_position(const int&, const int&, const int&, const int&)</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, stepper.o(i._ZN7Stepper12set_positionERKiS1_S1_S1_))
<BR><BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::synchronize()
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_enable_irq
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::suspend()
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::_set_position(const int&, const int&, const int&, const int&)
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::set_machine_position_mm(float, float, float, float)
</UL>

<P><STRONG><a name="[426]"></a>Stepper::_set_position(const int&, const int&, const int&, const int&)</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stepper.o(i._ZN7Stepper13_set_positionERKiS1_S1_S1_))
<BR><BR>[Called By]<UL><LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::block_phase_isr()
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::set_position(const int&, const int&, const int&, const int&)
</UL>

<P><STRONG><a name="[402]"></a>Stepper::is_block_busy(const block_t*)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stepper.o(i._ZN7Stepper13is_block_busyEPK7block_t))
<BR><BR>[Called By]<UL><LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::recalculate_trapezoids()
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::reverse_pass_kernel(block_t*, const block_t*)
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::forward_pass_kernel(const block_t*, block_t*, unsigned char)
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::forward_pass()
</UL>

<P><STRONG><a name="[427]"></a>Stepper::set_directions(unsigned char)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stepper.o(i._ZN7Stepper14set_directionsEh))
<BR><BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::set_directions()
</UL>
<BR>[Called By]<UL><LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::init()
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::block_phase_isr()
</UL>

<P><STRONG><a name="[1e4]"></a>Stepper::set_directions()</STRONG> (Thumb, 508 bytes, Stack size 0 bytes, stepper.o(i._ZN7Stepper14set_directionsEv))
<BR><BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetBitsMapp
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_ResetBitsMapp
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_duplication_enabled(bool, signed char)
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idex_set_mirrored_mode(bool)
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dualx_tool_change(unsigned char, bool&)
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::set_directions(unsigned char)
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dual_x_carriage_unpark()
</UL>

<P><STRONG><a name="[428]"></a>Stepper::AWAIT_LOW_PULSE()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stepper.o(i._ZN7Stepper15AWAIT_LOW_PULSEEv))
<BR><BR>[Calls]<UL><LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::AWAIT_TIMED_PULSE(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::pulse_phase_isr()
</UL>

<P><STRONG><a name="[42a]"></a>Stepper::block_phase_isr()</STRONG> (Thumb, 3500 bytes, Stack size 0 bytes, stepper.o(i._ZN7Stepper15block_phase_isrEv))
<BR><BR>[Calls]<UL><LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Endstops::update()
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::set_directions(unsigned char)
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::_set_position(const int&, const int&, const int&, const int&)
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decltype(((const param#1+const param#2))) [local to stepper_cpp]::_MAX&lang;unsigned long, unsigned long&rang;(T1, T2)
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decltype(((const param#1+const param#2))) [local to stepper_cpp]::_MAX&lang;unsigned, unsigned long&rang;(T1, T2)
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::get_current_block()
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::isr()
</UL>

<P><STRONG><a name="[42e]"></a>Stepper::pulse_phase_isr()</STRONG> (Thumb, 1626 bytes, Stack size 0 bytes, stepper.o(i._ZN7Stepper15pulse_phase_isrEv))
<BR><BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetBitsMapp
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_ResetBitsMapp
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_get_count
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::AWAIT_HIGH_PULSE()
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::AWAIT_LOW_PULSE()
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::isr()
</UL>

<P><STRONG><a name="[430]"></a>Stepper::AWAIT_HIGH_PULSE()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stepper.o(i._ZN7Stepper16AWAIT_HIGH_PULSEEv))
<BR><BR>[Calls]<UL><LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::AWAIT_TIMED_PULSE(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::pulse_phase_isr()
</UL>

<P><STRONG><a name="[23a]"></a>Stepper::report_positions()</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stepper.o(i._ZN7Stepper16report_positionsEv))
<BR><BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::report_a_position(const XYZval&lang;int&rang;&)
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_current_position()
</UL>

<P><STRONG><a name="[429]"></a>Stepper::AWAIT_TIMED_PULSE(unsigned char)</STRONG> (Thumb, 190 bytes, Stack size 0 bytes, stepper.o(i._ZN7Stepper17AWAIT_TIMED_PULSEEh))
<BR><BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_watchdog_refresh()
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_get_count
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decltype(((const param#1+const param#2))) [local to stepper_cpp]::_MIN&lang;unsigned, unsigned long&rang;(T1, T2)
</UL>
<BR>[Called By]<UL><LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::AWAIT_HIGH_PULSE()
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::AWAIT_LOW_PULSE()
</UL>

<P><STRONG><a name="[417]"></a>Stepper::endstop_triggered(AxisEnum)</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, stepper.o(i._ZN7Stepper17endstop_triggeredE8AxisEnum))
<BR><BR>[Calls]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_enable_irq
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::suspend()
</UL>
<BR>[Called By]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::endstop_triggered(AxisEnum)
</UL>

<P><STRONG><a name="[245]"></a>Stepper::report_a_position(const XYZval&lang;int&rang;&)</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, stepper.o(i._ZN7Stepper17report_a_positionERK6XYZvalIiE))
<BR><BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echopair_PGM(const char*, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_current_position_projected()
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::report_positions()
</UL>

<P><STRONG><a name="[419]"></a>Stepper::set_axis_position(AxisEnum, const int&)</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stepper.o(i._ZN7Stepper17set_axis_positionE8AxisEnumRKi))
<BR><BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::synchronize()
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::set_e_position_mm(float)
</UL>

<P><STRONG><a name="[41d]"></a>Stepper::triggered_position(AxisEnum)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stepper.o(i._ZN7Stepper18triggered_positionE8AxisEnum))
<BR><BR>[Called By]<UL><LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::triggered_position_mm(AxisEnum)
</UL>

<P><STRONG><a name="[1f5]"></a>Stepper::isr()</STRONG> (Thumb, 140 bytes, Stack size 0 bytes, stepper.o(i._ZN7Stepper3isrEv))
<BR><BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_timer_set_compare(unsigned char, unsigned short)
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_get_count
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::pulse_phase_isr()
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::block_phase_isr()
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_STEP_TIMER_ISR()
</UL>

<P><STRONG><a name="[432]"></a>Stepper::init()</STRONG> (Thumb, 596 bytes, Stack size 0 bytes, stepper.o(i._ZN7Stepper4initEv))
<BR><BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetBitsMapp
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_ResetBitsMapp
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set_mode(unsigned char, WiringPinMode)
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_enable_irq
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_timer_start(unsigned char, unsigned)
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::set_directions(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup
</UL>

<P><STRONG><a name="[425]"></a>Stepper::suspend()</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stepper.o(i._ZN7Stepper7suspendEv))
<BR><BR>[Calls]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_disable_irq
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_timer_interrupt_enabled(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::endstop_triggered(AxisEnum)
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::set_position(const int&, const int&, const int&, const int&)
</UL>

<P><STRONG><a name="[41b]"></a>Stepper::position(AxisEnum)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stepper.o(i._ZN7Stepper8positionE8AxisEnum))
<BR><BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::get_axis_position_mm(AxisEnum)
</UL>

<P><STRONG><a name="[32d]"></a>Babystep::add_mm(AxisEnum, float)</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, babystep.o(i._ZN8Babystep6add_mmE8AxisEnumf))
<BR><BR>[Calls]<UL><LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Babystep::add_steps(AxisEnum, short)
</UL>
<BR>[Called By]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M290()
</UL>

<P><STRONG><a name="[433]"></a>Babystep::add_steps(AxisEnum, short)</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, babystep.o(i._ZN8Babystep9add_stepsE8AxisEnums))
<BR><BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;axes_should_home(unsigned char)
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
</UL>
<BR>[Called By]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Babystep::add_mm(AxisEnum, float)
</UL>

<P><STRONG><a name="[378]"></a>Babystep::step_axis(AxisEnum)</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, babystep.o(i._ZN8Babystep9step_axisE8AxisEnum))
<BR><BR>[Calls]<UL><LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::do_babystep(AxisEnum, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::isr()
</UL>

<P><STRONG><a name="[314]"></a>Endstops::not_homing()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, endstops.o(i._ZN8Endstops10not_homingEv))
<BR><BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G28()
</UL>

<P><STRONG><a name="[434]"></a>Endstops::event_handler()</STRONG> (Thumb, 180 bytes, Stack size 0 bytes, endstops.o(i._ZN8Endstops13event_handlerEv))
<BR><BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echopair_PGM(const char*, float)
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SERIAL_CHAR(char)
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echo_start()
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::triggered_position_mm(AxisEnum)
</UL>
<BR>[Called By]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop
</UL>

<P><STRONG><a name="[324]"></a>Endstops::report_states()</STRONG> (Thumb, 162 bytes, Stack size 0 bytes, endstops.o(i._ZN8Endstops13report_statesEv))
<BR><BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to endstops_cpp]::print_es_state(bool, const char*)
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_GetBitMapp
</UL>
<BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M119()
</UL>

<P><STRONG><a name="[325]"></a>Endstops::enable_globally(bool)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, endstops.o(i._ZN8Endstops15enable_globallyEb))
<BR><BR>[Calls]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Endstops::resync()
</UL>
<BR>[Called By]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::reset()
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M121()
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M120()
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Endstops::init()
</UL>

<P><STRONG><a name="[1bd]"></a>Endstops::validate_homing_move()</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, endstops.o(i._ZN8Endstops20validate_homing_moveEv))
<BR><BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kill(const char*, const char*, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_homing_move(AxisEnum, float, float, bool)
</UL>

<P><STRONG><a name="[436]"></a>Endstops::init()</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, endstops.o(i._ZN8Endstops4initEv))
<BR><BR>[Calls]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Endstops::enable_globally(bool)
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set_mode(unsigned char, WiringPinMode)
</UL>
<BR>[Called By]<UL><LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup
</UL>

<P><STRONG><a name="[379]"></a>Endstops::poll()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, endstops.o(i._ZN8Endstops4pollEv))
<BR><BR>[Calls]<UL><LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Endstops::update()
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::isr()
</UL>

<P><STRONG><a name="[312]"></a>Endstops::enable(bool)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, endstops.o(i._ZN8Endstops6enableEb))
<BR><BR>[Calls]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Endstops::resync()
</UL>
<BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G28()
</UL>

<P><STRONG><a name="[435]"></a>Endstops::resync()</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, endstops.o(i._ZN8Endstops6resyncEv))
<BR><BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;safe_delay(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Endstops::enable_globally(bool)
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Endstops::enable(bool)
</UL>

<P><STRONG><a name="[42d]"></a>Endstops::update()</STRONG> (Thumb, 578 bytes, Stack size 0 bytes, endstops.o(i._ZN8Endstops6updateEv))
<BR><BR>[Calls]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::endstop_triggered(AxisEnum)
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_GetBitMapp
</UL>
<BR>[Called By]<UL><LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Endstops::poll()
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::block_phase_isr()
</UL>

<P><STRONG><a name="[33e]"></a>SdVolume::cacheFlush()</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, sdvolume.o(i._ZN8SdVolume10cacheFlushEv))
<BR><BR>[Called By]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdVolume::cacheRawBlock(unsigned, bool)
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::remove()
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::write(const void*, unsigned short)
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::open(SdBaseFile*, const unsigned char*, unsigned char)
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::addDirCluster()
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::sync()
</UL>

<P><STRONG><a name="[341]"></a>SdVolume::writeBlock(unsigned, const unsigned char*)</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, sdbasefile.o(i._ZN8SdVolume10writeBlockEjPKh))
<BR><BR>[Called By]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::write(const void*, unsigned short)
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::addDirCluster()
</UL>

<P><STRONG><a name="[342]"></a>SdVolume::cacheRawBlock(unsigned, bool)</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, sdvolume.o(i._ZN8SdVolume13cacheRawBlockEjb))
<BR><BR>[Calls]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdVolume::cacheFlush()
</UL>
<BR>[Called By]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdVolume::fatPut(unsigned, unsigned)
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdVolume::fatGet(unsigned, unsigned*)
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::write(const void*, unsigned short)
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::read(void*, unsigned short)
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::cacheDirEntry(unsigned char)
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdVolume::init(DiskIODriver*, unsigned char)
</UL>

<P><STRONG><a name="[337]"></a>SdVolume::allocContiguous(unsigned, unsigned*)</STRONG> (Thumb, 198 bytes, Stack size 0 bytes, sdvolume.o(i._ZN8SdVolume15allocContiguousEjPj))
<BR><BR>[Calls]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdVolume::fatPut(unsigned, unsigned)
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdVolume::fatGet(unsigned, unsigned*)
</UL>
<BR>[Called By]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::addCluster()
</UL>

<P><STRONG><a name="[340]"></a>SdVolume::cacheSetBlockNumber(unsigned, bool)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, sdbasefile.o(i._ZN8SdVolume19cacheSetBlockNumberEjb))
<BR><BR>[Called By]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::write(const void*, unsigned short)
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::addDirCluster()
</UL>

<P><STRONG><a name="[28d]"></a>SdVolume::init(DiskIODriver*, unsigned char)</STRONG> (Thumb, 338 bytes, Stack size 0 bytes, sdvolume.o(i._ZN8SdVolume4initEP12DiskIODriverh))
<BR><BR>[Calls]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdVolume::cacheRawBlock(unsigned, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::mount()
</UL>

<P><STRONG><a name="[351]"></a>SdVolume::fatGet(unsigned, unsigned*)</STRONG> (Thumb, 120 bytes, Stack size 0 bytes, sdvolume.o(i._ZN8SdVolume6fatGetEjPj))
<BR><BR>[Calls]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdVolume::cacheRawBlock(unsigned, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::seekSet(unsigned)
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdVolume::freeChain(unsigned)
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdVolume::chainSize(unsigned, unsigned*)
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdVolume::allocContiguous(unsigned, unsigned*)
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::truncate(unsigned)
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::write(const void*, unsigned short)
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::read(void*, unsigned short)
</UL>

<P><STRONG><a name="[359]"></a>SdVolume::fatPut(unsigned, unsigned)</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, sdvolume.o(i._ZN8SdVolume6fatPutEjj))
<BR><BR>[Calls]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdVolume::cacheRawBlock(unsigned, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdVolume::freeChain(unsigned)
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdVolume::allocContiguous(unsigned, unsigned*)
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::truncate(unsigned)
</UL>

<P><STRONG><a name="[347]"></a>SdVolume::chainSize(unsigned, unsigned*)</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, sdvolume.o(i._ZN8SdVolume9chainSizeEjPj))
<BR><BR>[Calls]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdVolume::isEOC(unsigned) const
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdVolume::fatGet(unsigned, unsigned*)
</UL>
<BR>[Called By]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::openCachedEntry(unsigned char, unsigned char)
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::openRoot(SdVolume*)
</UL>

<P><STRONG><a name="[358]"></a>SdVolume::freeChain(unsigned)</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, sdvolume.o(i._ZN8SdVolume9freeChainEj))
<BR><BR>[Calls]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdVolume::isEOC(unsigned) const
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdVolume::fatPut(unsigned, unsigned)
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdVolume::fatGet(unsigned, unsigned*)
</UL>
<BR>[Called By]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::truncate(unsigned)
</UL>

<P><STRONG><a name="[36c]"></a>TempInfo::reset()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, temperature.o(i._ZN8TempInfo5resetEv))
<BR><BR>[Called By]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::readings_ready()
</UL>

<P><STRONG><a name="[377]"></a>TempInfo::sample(unsigned short)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, temperature.o(i._ZN8TempInfo6sampleEt))
<BR><BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::isr()
</UL>

<P><STRONG><a name="[373]"></a>TempInfo::update()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, temperature.o(i._ZN8TempInfo6updateEv))
<BR><BR>[Called By]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::update_raw_temperatures()
</UL>

<P><STRONG><a name="[437]"></a>IPAddress::IPAddress(unsigned char, unsigned char, unsigned char, unsigned char)</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, ipaddress.o(i._ZN9IPAddressC1Ehhhh))
<BR><BR>[Calls]<UL><LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Printable::Printable__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___13_IPAddress_cpp_0fe1e075
</UL>

<P><STRONG><a name="[438]"></a>Printable::Printable__sub_object()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ipaddress.o(i._ZN9PrintableC2Ev))
<BR><BR>[Called By]<UL><LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPAddress::IPAddress(unsigned char, unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[1ca]"></a>Stopwatch::stop()</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, stopwatch.o(i._ZN9Stopwatch4stopEv))
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
</UL>
<BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M81()
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abortSDPrinting()
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::auto_job_check_timer(bool, bool)
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M77()
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLAbortPrinting()
</UL>

<P><STRONG><a name="[316]"></a>Stopwatch::pause()</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, stopwatch.o(i._ZN9Stopwatch5pauseEv))
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
</UL>
<BR>[Called By]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M76()
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M25()
</UL>

<P><STRONG><a name="[439]"></a>Stopwatch::reset()</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stopwatch.o(i._ZN9Stopwatch5resetEv))
<BR><BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stopwatch::start()
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup
</UL>

<P><STRONG><a name="[1df]"></a>Stopwatch::start()</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, stopwatch.o(i._ZN9Stopwatch5startEv))
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stopwatch::reset()
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stopwatch::duration()
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startOrResumeJob()
</UL>

<P><STRONG><a name="[317]"></a>Stopwatch::duration()</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, stopwatch.o(i._ZN9Stopwatch8durationEv))
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stopwatch::start()
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M31()
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M1001()
</UL>

<P><STRONG><a name="[29f]"></a>GCodeQueue::RingBuffer::full(unsigned char) const</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, queue.o(i._ZNK10GCodeQueue10RingBuffer4fullEh))
<BR><BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::get_available_commands()
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::get_serial_commands()
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::get_sdcard_commands()
</UL>

<P><STRONG><a name="[2ab]"></a>GCodeQueue::RingBuffer::occupied() const</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, queue.o(i._ZNK10GCodeQueue10RingBuffer8occupiedEv))
<BR><BR>[Called By]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::advance()
</UL>

<P><STRONG><a name="[33c]"></a>SdBaseFile::isDir() const</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, sdbasefile.o(i._ZNK10SdBaseFile5isDirEv))
<BR><BR>[Called By]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::readDirCache()
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::readDir(directoryEntry*, char*)
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::sync()
</UL>

<P><STRONG><a name="[353]"></a>SdBaseFile::isFile() const</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, sdbasefile.o(i._ZNK10SdBaseFile6isFileEv))
<BR><BR>[Called By]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::truncate(unsigned)
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::write(const void*, unsigned short)
</UL>

<P><STRONG><a name="[26c]"></a>SdBaseFile::isOpen() const</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, cardreader.o(i._ZNK10SdBaseFile6isOpenEv))
<BR><BR>[Called By]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::printFilename()
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::seekSet(unsigned)
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::mount()
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::~SdBaseFile()
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::read(void*, unsigned short)
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdFile::~SdFile()
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::isFileOpen()
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::openRoot(SdVolume*)
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::sync()
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::open(SdBaseFile*, const char*, unsigned char)
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::getDosName(char*)
</UL>

<P><STRONG><a name="[338]"></a>SdBaseFile::isRoot() const</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, sdbasefile.o(i._ZNK10SdBaseFile6isRootEv))
<BR><BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::open(SdBaseFile*, const char*, unsigned char)
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::getDosName(char*)
</UL>

<P><STRONG><a name="[43a]"></a>duration_t::day() const</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, m31.o(i._ZNK10duration_t3dayEv))
<BR><BR>[Calls]<UL><LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duration_t::hour() const
</UL>
<BR>[Called By]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duration_t::toString(char*) const
</UL>

<P><STRONG><a name="[43b]"></a>duration_t::hour() const</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, m31.o(i._ZNK10duration_t4hourEv))
<BR><BR>[Calls]<UL><LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duration_t::minute() const
</UL>
<BR>[Called By]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duration_t::toString(char*) const
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duration_t::day() const
</UL>

<P><STRONG><a name="[43c]"></a>duration_t::minute() const</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, m31.o(i._ZNK10duration_t6minuteEv))
<BR><BR>[Called By]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duration_t::toString(char*) const
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duration_t::hour() const
</UL>

<P><STRONG><a name="[318]"></a>duration_t::toString(char*) const</STRONG> (Thumb, 190 bytes, Stack size 0 bytes, m31.o(i._ZNK10duration_t8toStringEPc))
<BR><BR>[Calls]<UL><LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duration_t::minute() const
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duration_t::hour() const
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duration_t::day() const
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M31()
</UL>

<P><STRONG><a name="[350]"></a>SdVolume::blockOfCluster(unsigned) const</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, sdbasefile.o(i._ZNK8SdVolume14blockOfClusterEj))
<BR><BR>[Called By]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::write(const void*, unsigned short)
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::read(void*, unsigned short)
</UL>

<P><STRONG><a name="[344]"></a>SdVolume::cacheBlockNumber() const</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sdbasefile.o(i._ZNK8SdVolume16cacheBlockNumberEv))
<BR><BR>[Called By]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::write(const void*, unsigned short)
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::read(void*, unsigned short)
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::open(SdBaseFile*, const unsigned char*, unsigned char)
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::openCachedEntry(unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[33f]"></a>SdVolume::clusterStartBlock(unsigned) const</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, sdbasefile.o(i._ZNK8SdVolume17clusterStartBlockEj))
<BR><BR>[Called By]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::write(const void*, unsigned short)
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::read(void*, unsigned short)
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::addDirCluster()
</UL>

<P><STRONG><a name="[354]"></a>SdVolume::isEOC(unsigned) const</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, sdbasefile.o(i._ZNK8SdVolume5isEOCEj))
<BR><BR>[Called By]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdVolume::freeChain(unsigned)
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdVolume::chainSize(unsigned, unsigned*)
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::truncate(unsigned)
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::write(const void*, unsigned short)
</UL>

<P><STRONG><a name="[3fc]"></a>std::fabs(float)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, planner.o(i._ZSt4fabsf))
<BR><BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::buffer_line(float, float, float, float, float, unsigned char, float)
</UL>

<P><STRONG><a name="[282]"></a>std::strchr(char*, int)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, parser.o(i._ZSt6strchrPci))
<BR><BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::write_command(char*)
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::get_serial_commands()
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::parse(char*)
</UL>

<P><STRONG><a name="[43d]"></a>__0printf</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[127]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, printfa.o(i.__0printf))
<BR><BR>[Called By]<UL><LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_WriteBlockDMA
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ReadBlock_DMA
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCARD_ReadBlocks
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCARD_Init
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getResetCause()
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sdioc_Class::init()
</UL>

<P><STRONG><a name="[43f]"></a>__0sprintf</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, printfa.o(i.__0sprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[169]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, printfa.o(i.__0sprintf))
<BR><BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLSDPrintFinished()
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initTLScreen()
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duration_t::toString(char*) const
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::autofile_check()
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;homing_needed_error(unsigned char)
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dtostrf
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::plr_save(unsigned, short, short, short, short, float, float)
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::plr_recovery()
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::tl_ls()
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLVersion()
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tenlog_screen_update_dwn()
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TJCPauseResumePrinting(bool, int)
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_command_gcode(long*)
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tenlog_status_update(bool)
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_command_dwn()
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWN_MessageHandler(bool)
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlInitSetting()
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_filament(int, int)
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DETECT_TLS()
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::openAndPrintFile(const char*)
</UL>

<P><STRONG><a name="[444]"></a>__ARM_fpclassifyf</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fpclassifyf.o(i.__ARM_fpclassifyf))
<BR><BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
</UL>

<P><STRONG><a name="[e9]"></a>__aeabi_errno_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[44b]"></a>__aeabi_vec_ctor_nocookie_nodtor</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, aeabi_vec_ctor_nocookie_nodtor.o(i.__aeabi_vec_ctor_nocookie_nodtor))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___14_cardreader_cpp_M23_STR
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___15_temperature_cpp_ca4fe824
</UL>

<P><STRONG><a name="[267]"></a>__cxa_guard_acquire</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, cxa_guard_acquire.o(i.__cxa_guard_acquire))
<BR><BR>[Called By]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::diveToFile(bool, SdFile*&, const char*, bool)
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::block_phase_isr()
</UL>

<P><STRONG><a name="[c4]"></a>__cxa_pure_virtual</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cxxabi-compat.o(i.__cxa_pure_virtual))
<BR>[Address Reference Count : 4]<UL><LI> ipaddress.o(.constdata__ZTV9Printable)
<LI> cardreader.o(.constdata__ZTV12DiskIODriver)
<LI> hardwareserial.o(.constdata__ZTV6Stream)
<LI> print.o(.constdata__ZTV5Print)
</UL>
<P><STRONG><a name="[440]"></a>__hardfp___mathlib_tofloat</STRONG> (Thumb, 232 bytes, Stack size 0 bytes, narrow.o(i.__hardfp___mathlib_tofloat))
<BR><BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee_status
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frexp
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_narrow
</UL>

<P><STRONG><a name="[25b]"></a>__hardfp_atan2f</STRONG> (Thumb, 594 bytes, Stack size 0 bytes, atan2f.o(i.__hardfp_atan2f))
<BR><BR>[Calls]<UL><LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan2
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
</UL>
<BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_arc(const XYZEval&lang;float&rang;&, const XYval&lang;float&rang;&, bool, unsigned char)
</UL>

<P><STRONG><a name="[25d]"></a>__hardfp_ceilf</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, ceilf.o(i.__hardfp_ceilf))
<BR><BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_arc(const XYZEval&lang;float&rang;&, const XYval&lang;float&rang;&, bool, unsigned char)
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::calculate_trapezoid_for_block(block_t*, float, float)
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::_populate_block(block_t*, bool, const XYZEval&lang;int&rang;&, float, unsigned char, float)
</UL>

<P><STRONG><a name="[25f]"></a>__hardfp_cosf</STRONG> (Thumb, 280 bytes, Stack size 0 bytes, cosf.o(i.__hardfp_cosf))
<BR><BR>[Calls]<UL><LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_arc(const XYZEval&lang;float&rang;&, const XYval&lang;float&rang;&, bool, unsigned char)
</UL>

<P><STRONG><a name="[25e]"></a>__hardfp_floorf</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, floorf.o(i.__hardfp_floorf))
<BR><BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_arc(const XYZEval&lang;float&rang;&, const XYval&lang;float&rang;&, bool, unsigned char)
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::calculate_trapezoid_for_block(block_t*, float, float)
</UL>

<P><STRONG><a name="[40a]"></a>__hardfp_lroundf</STRONG> (Thumb, 194 bytes, Stack size 0 bytes, lroundf.o(i.__hardfp_lroundf))
<BR><BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frnd
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ffix_r
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::_populate_block(block_t*, bool, const XYZEval&lang;int&rang;&, float, unsigned char, float)
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::set_machine_position_mm(float, float, float, float)
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::set_e_position_mm(float)
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::buffer_segment(float, float, float, float, float, unsigned char, float)
</UL>

<P><STRONG><a name="[260]"></a>__hardfp_sinf</STRONG> (Thumb, 344 bytes, Stack size 0 bytes, sinf.o(i.__hardfp_sinf))
<BR><BR>[Calls]<UL><LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
</UL>
<BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_arc(const XYZEval&lang;float&rang;&, const XYval&lang;float&rang;&, bool, unsigned char)
</UL>

<P><STRONG><a name="[25a]"></a>__hardfp_sqrtf</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, sqrtf.o(i.__hardfp_sqrtf))
<BR><BR>[Calls]<UL><LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G2_G3(bool)
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_arc(const XYZEval&lang;float&rang;&, const XYval&lang;float&rang;&, bool, unsigned char)
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::recalculate_trapezoids()
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::_populate_block(block_t*, bool, const XYZEval&lang;int&rang;&, float, unsigned char, float)
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::autotemp_task()
</UL>

<P><STRONG><a name="[35a]"></a>__hardfp_strtof</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, strtof.o(i.__hardfp_strtof))
<BR><BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtof_int
</UL>
<BR>[Called By]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::value_float()
</UL>

<P><STRONG><a name="[449]"></a>__mathlib_flt_infnan</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_infnan))
<BR><BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
</UL>

<P><STRONG><a name="[446]"></a>__mathlib_flt_infnan2</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_infnan2))
<BR><BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
</UL>

<P><STRONG><a name="[448]"></a>__mathlib_flt_invalid</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_invalid))
<BR><BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
</UL>

<P><STRONG><a name="[445]"></a>__mathlib_flt_underflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_underflow))
<BR><BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
</UL>

<P><STRONG><a name="[101]"></a>__mathlib_narrow</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, narrow.o(i.__mathlib_narrow))
<BR><BR>[Calls]<UL><LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp___mathlib_tofloat
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtof_int
</UL>

<P><STRONG><a name="[447]"></a>__mathlib_rredf2</STRONG> (Thumb, 316 bytes, Stack size 0 bytes, rredf.o(i.__mathlib_rredf2))
<BR><BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
</UL>

<P><STRONG><a name="[443]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno))
<BR><BR>[Called By]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_lroundf
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp___mathlib_tofloat
</UL>

<P><STRONG><a name="[10c]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, scanf_fp.o(i._is_digit), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[23c]"></a>adc_read</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, adc.o(i.adc_read))
<BR><BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_watchdog_refresh()
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_adc_start_conversion(unsigned char)
</UL>

<P><STRONG><a name="[20a]"></a>dtostrf</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, dtostrf.o(i.dtostrf))
<BR><BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::plr_recovery()
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_command_gcode(long*)
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_command_dwn()
</UL>

<P><STRONG><a name="[3c7]"></a>enIrqRegistration</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.enIrqRegistration))
<BR><BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_time2B
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_time2A
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_enable
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to adc_c]::adc_DmaIrqRegister(stc_irq_regi_conf*, unsigned)
</UL>

<P><STRONG><a name="[3c8]"></a>enShareIrqEnable</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, hc32f46x_interrupts.o(i.enShareIrqEnable))
<BR><BR>[Called By]<UL><LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to adc_c]::adc_DmaIrqRegister(stc_irq_regi_conf*, unsigned)
</UL>

<P><STRONG><a name="[ac]"></a>fputc</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hc32f46x_utility.o(i.fputc))
<BR><BR>[Calls]<UL><LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugOutput
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0printf)
</UL>
<P><STRONG><a name="[102]"></a>free</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, malloc.o(i.free))
<BR><BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::enqueue_one_P(const char*)
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::process_injected_command_P()
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;homing_needed_error(unsigned char)
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::openAndPrintFile(const char*)
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::printListing(SdFile, const char*)
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::diveToFile(bool, SdFile*&, const char*, bool)
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::_load()
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
</UL>

<P><STRONG><a name="[441]"></a>frexp</STRONG> (Thumb, 118 bytes, Stack size 0 bytes, frexp.o(i.frexp))
<BR><BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp___mathlib_tofloat
</UL>

<P><STRONG><a name="[256]"></a>init</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, startup.o(i.init))
<BR><BR>[Calls]<UL><LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_gpio
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ddl_UartInit
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_Extinterrupt
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getResetCause()
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to startup_cpp]::setup_SysClk()
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_time
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_systick
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_adcs
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;premain()
</UL>

<P><STRONG><a name="[a9]"></a>isspace</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, wstring.o(i.isspace))
<BR><BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Address Reference Count : 1]<UL><LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[219]"></a>iwdg_feed</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, iwdg.o(i.iwdg_feed))
<BR><BR>[Calls]<UL><LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_RefreshCounter
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_watchdog_refresh()
</UL>

<P><STRONG><a name="[1b5]"></a>iwdg_init</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, iwdg.o(i.iwdg_init))
<BR><BR>[Calls]<UL><LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_RefreshCounter
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Init
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ddl_Delay1ms
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMU_ClrResetFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;watchdog_init()
</UL>

<P><STRONG><a name="[459]"></a>loop</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, marlincore.o(i.loop))
<BR><BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abortSDPrinting()
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Endstops::event_handler()
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::advance()
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::enqueue_one_P(const char*)
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLSDPrintFinished()
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle()
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a4]"></a>main</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Calls]<UL><LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[ec]"></a>malloc</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, malloc.o(i.malloc))
<BR><BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::enqueue_one_P(const char*)
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::process_injected_command_P()
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;homing_needed_error(unsigned char)
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::openAndPrintFile(const char*)
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::printListing(SdFile, const char*)
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::diveToFile(bool, SdFile*&, const char*, bool)
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::_load()
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>

<P><STRONG><a name="[16b]"></a>millis</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, board_tim0.o(i.millis))
<BR><BR>[Called By]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::T(signed char)
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M85()
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M18_M84()
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_sleep(float)
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G28()
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Babystep::add_steps(AxisEnum, short)
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;manage_inactivity(bool)
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stopwatch::start()
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stopwatch::stop()
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::manage_heater()
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::host_keepalive()
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLSDPrintFinished()
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initTLScreen()
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle()
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::PID_autotune(short, heater_id_t, signed char, bool)
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M155()
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::start_watching_bed()
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::wait_for_bed(bool)
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::start_watching_hotend(unsigned char)
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::wait_for_hotend(unsigned char, bool)
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stopwatch::duration()
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M32()
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stopwatch::pause()
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M24()
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::dwell(unsigned)
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G2_G3(bool)
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_arc(const XYZEval&lang;float&rang;&, const XYval&lang;float&rang;&, bool, unsigned char)
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tenlog_screen_update_dwn()
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tenlog_status_update(bool)
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tenlog_screen_update()
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_command_dwn()
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DETECT_TLS()
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::tr_state_machine_t::run(float, float, heater_id_t, unsigned short, short)
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::sync_fan_speeds(unsigned char(&)[1])
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dual_x_carriage_unpark()
</UL>

<P><STRONG><a name="[45a]"></a>setup</STRONG> (Thumb, 656 bytes, Stack size 0 bytes, marlincore.o(i.setup))
<BR><BR>[Calls]<UL><LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunoutResponseDebounced::filament_present(unsigned char)
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SERIAL_CHAR(char)
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stopwatch::reset()
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Endstops::init()
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::init()
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL24CXX::check()
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL24CXX::init()
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::plr_is_pl()
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::load()
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::connected()
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::begin(unsigned)
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::init()
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plr_setup()
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_init()
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TlIsPLR()
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_clear_reset_source()
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibrate_delay_loop()
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_get_reset_source()
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echopair_PGM(const char*, unsigned)
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echopair_PGM(const char*, int)
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_plan_position()
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echo_start()
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TlLoadingMessage(const char*, int, int)
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_ternary(bool, const char*, const char*, const char*, const char*)
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;watchdog_init()
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set_mode(unsigned char, WiringPinMode)
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initTLScreen()
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_AllInit()
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TlPageMain()
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[455]"></a>setup_Extinterrupt</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, board_extint.o(i.setup_Extinterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init
</UL>

<P><STRONG><a name="[454]"></a>setup_adcs</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, adc.o(i.setup_adcs))
<BR><BR>[Calls]<UL><LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to adc_c]::adc_foreach(void(*)(adc_dev*))
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to adc_c]::adc_setclk()
</UL>
<BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init
</UL>

<P><STRONG><a name="[453]"></a>setup_gpio</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, board_gpio.o(i.setup_gpio))
<BR><BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_DebugPortSetting
</UL>
<BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init
</UL>

<P><STRONG><a name="[451]"></a>setup_systick</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, board_tim0.o(i.setup_systick))
<BR><BR>[Calls]<UL><LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetClockFreq
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to board_tim0_c]::__NVIC_SetPriority(IRQn, unsigned)
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init
</UL>

<P><STRONG><a name="[452]"></a>setup_time</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, board_tim0.o(i.setup_time))
<BR><BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init
</UL>

<P><STRONG><a name="[1c5]"></a>setup_time2A</STRONG> (Thumb, 134 bytes, Stack size 0 bytes, board_tim0.o(i.setup_time2A))
<BR><BR>[Calls]<UL><LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enIrqRegistration
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetClockFreq
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_IntCmd
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_BaseInit
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWC_Fcg2PeriphClockCmd
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to board_tim0_c]::__NVIC_ClearPendingIRQ(IRQn)
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to board_tim0_c]::__NVIC_SetPriority(IRQn, unsigned)
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to board_tim0_c]::__NVIC_EnableIRQ(IRQn)
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_timer_start(unsigned char, unsigned)
</UL>

<P><STRONG><a name="[1c4]"></a>setup_time2B</STRONG> (Thumb, 132 bytes, Stack size 0 bytes, board_tim0.o(i.setup_time2B))
<BR><BR>[Calls]<UL><LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enIrqRegistration
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetClockFreq
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_IntCmd
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_BaseInit
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWC_Fcg2PeriphClockCmd
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to board_tim0_c]::__NVIC_ClearPendingIRQ(IRQn)
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to board_tim0_c]::__NVIC_SetPriority(IRQn, unsigned)
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to board_tim0_c]::__NVIC_EnableIRQ(IRQn)
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_timer_start(unsigned char, unsigned)
</UL>

<P><STRONG><a name="[262]"></a>steup_sdio</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, sdio_f1.o(i.steup_sdio))
<BR><BR>[Calls]<UL><LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sdioc_Class::~Sdioc_Class()
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sdioc_Class::Sdioc_Class(M4_SDIOC_TypeDef*)
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sdioc_Class::init()
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_Init()
</UL>

<P><STRONG><a name="[3fb]"></a>timer_disable_irq</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, board_tim0.o(i.timer_disable_irq))
<BR><BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::suspend()
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::quick_stop()
</UL>

<P><STRONG><a name="[37c]"></a>timer_enable_irq</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, board_tim0.o(i.timer_enable_irq))
<BR><BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::init()
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::init()
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::endstop_triggered(AxisEnum)
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::set_position(const int&, const int&, const int&, const int&)
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::buffer_sync_block()
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::buffer_segment(float, float, float, float, float, unsigned char, float)
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::quick_stop()
</UL>

<P><STRONG><a name="[42f]"></a>timer_get_count</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, board_tim0.o(i.timer_get_count))
<BR><BR>[Calls]<UL><LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_GetCntReg
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::isr()
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::AWAIT_TIMED_PULSE(unsigned char)
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::pulse_phase_isr()
</UL>

<P><STRONG><a name="[23f]"></a>timer_irq_enabled</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, board_tim0.o(i.timer_irq_enabled))
<BR><BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_timer_interrupt_enabled(unsigned char)
</UL>

<P><STRONG><a name="[467]"></a>timer_preset_compare</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, board_tim0.o(i.timer_preset_compare))
<BR><BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_WriteCmpReg
</UL>
<BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_set_compare
</UL>

<P><STRONG><a name="[228]"></a>timer_set_compare</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, board_tim0.o(i.timer_set_compare))
<BR><BR>[Calls]<UL><LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_preset_compare
</UL>
<BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_timer_set_compare(unsigned char, unsigned short)
</UL>

<P><STRONG><a name="[37f]"></a>usart_disable</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, usart.o(i.usart_disable))
<BR><BR>[Calls]<UL><LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to usart_c]::rb_reset(ring_buffer*)
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to usart_c]::rb_is_empty(ring_buffer*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::end()
</UL>

<P><STRONG><a name="[384]"></a>usart_enable</STRONG> (Thumb, 602 bytes, Stack size 0 bytes, usart.o(i.usart_enable))
<BR><BR>[Calls]<UL><LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enIrqRegistration
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_FuncCmd
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to usart_c]::__NVIC_ClearPendingIRQ(IRQn)
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to usart_c]::__NVIC_SetPriority(IRQn, unsigned)
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to usart_c]::__NVIC_EnableIRQ(IRQn)
</UL>
<BR>[Called By]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::begin(unsigned, unsigned char)
</UL>

<P><STRONG><a name="[382]"></a>usart_init</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, usart.o(i.usart_init))
<BR><BR>[Calls]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_UART_Init
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWC_Fcg1PeriphClockCmd
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to usart_c]::rb_init(ring_buffer*, unsigned short, unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::begin(unsigned, unsigned char)
</UL>

<P><STRONG><a name="[383]"></a>usart_set_baud_rate</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usart.o(i.usart_set_baud_rate))
<BR><BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SetBaudrate
</UL>
<BR>[Called By]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::begin(unsigned, unsigned char)
</UL>

<P><STRONG><a name="[385]"></a>usart_tx</STRONG> (Thumb, 134 bytes, Stack size 0 bytes, usart.o(i.usart_tx))
<BR><BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_FuncCmd
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to usart_c]::rb_insert(ring_buffer*, unsigned char)
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to usart_c]::rb_is_empty(ring_buffer*)
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to usart_c]::rb_is_full(ring_buffer*)
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::write(unsigned char)
</UL>

<P><STRONG><a name="[24e]"></a>yield</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, wirish_time.o(i.yield))
<BR><BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay(unsigned long)
</UL>

<P><STRONG><a name="[3dc]"></a>void SERIAL_CHAR&lang;&lang;char&rang;&rang;(char, T1...)</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, temperature.o(t._Z11SERIAL_CHARIJcEEvcDpT_))
<BR><BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::write(int)
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SERIAL_CHAR(char)
</UL>
<BR>[Called By]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to temperature_cpp]::print_heater_state(float, float, float, heater_id_t)
</UL>

<P><STRONG><a name="[32c]"></a>void SERIAL_CHAR&lang;&lang;int&rang;&rang;(char, T1...)</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, m221.o(t._Z11SERIAL_CHARIJiEEvcDpT_))
<BR><BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::write(int)
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SERIAL_CHAR(char)
</UL>
<BR>[Called By]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M221()
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to M115_cpp]::cap_line(const char*, bool)
</UL>

<P><STRONG><a name="[35f]"></a>void SERIAL_ECHO&lang;heater_id_t&rang;(T1)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, temperature.o(t._Z11SERIAL_ECHOI11heater_id_tEvT_))
<BR><BR>[Calls]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(int, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::_temp_error(heater_id_t, const char*, const char*)
</UL>

<P><STRONG><a name="[20e]"></a>void SERIAL_ECHO&lang;const char*&rang;(T1)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, serial.o(t._Z11SERIAL_ECHOIPKcEvT_))
<BR><BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echopair_PGM(const char*, const char*)
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::printListing(SdFile, const char*)
</UL>

<P><STRONG><a name="[27a]"></a>void SERIAL_ECHO&lang;char*&rang;(T1)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, cardreader.o(t._Z11SERIAL_ECHOIPcEvT_))
<BR><BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::printFilename()
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::printListing(SdFile, const char*)
</UL>

<P><STRONG><a name="[210]"></a>void SERIAL_ECHO&lang;float&rang;(T1)</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, serial.o(t._Z11SERIAL_ECHOIfEvT_))
<BR><BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(double, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echopair_PGM(const char*, float)
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M218()
</UL>

<P><STRONG><a name="[211]"></a>void SERIAL_ECHO&lang;unsigned char&rang;(T1)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, serial.o(t._Z11SERIAL_ECHOIhEvT_))
<BR><BR>[Calls]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(unsigned char, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echopair_PGM(const char*, unsigned char)
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invalid_extruder_error(unsigned char)
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::analog_to_celsius_hotend(short, unsigned char)
</UL>

<P><STRONG><a name="[212]"></a>void SERIAL_ECHO&lang;int&rang;(T1)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, marlincore.o(t._Z11SERIAL_ECHOIiEvT_))
<BR><BR>[Calls]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(int, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFilamentMonitor&lang;RunoutResponseDebounced, FilamentSensorSwitch&rang;::run()
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echopair_PGM(const char*, int)
</UL>

<P><STRONG><a name="[214]"></a>void SERIAL_ECHO&lang;unsigned&rang;(T1)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, serial.o(t._Z11SERIAL_ECHOIjEvT_))
<BR><BR>[Calls]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(unsigned, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echopair_PGM(const char*, unsigned)
</UL>

<P><STRONG><a name="[216]"></a>void SERIAL_ECHO&lang;long&rang;(T1)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, serial.o(t._Z11SERIAL_ECHOIlEvT_))
<BR><BR>[Calls]<UL><LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(long, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echopair_PGM(const char*, long)
</UL>

<P><STRONG><a name="[371]"></a>void SERIAL_ECHO&lang;short&rang;(T1)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, temperature.o(t._Z11SERIAL_ECHOIsEvT_))
<BR><BR>[Calls]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(int, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::print_heater_states(unsigned char)
</UL>

<P><STRONG><a name="[30f]"></a>void SERIAL_ECHO&lang;unsigned short&rang;(T1)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gcode.o(t._Z11SERIAL_ECHOItEvT_))
<BR><BR>[Calls]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(int, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::get_target_extruder_from_command()
</UL>

<P><STRONG><a name="[3dd]"></a>void SERIAL_PRINT&lang;float, int&rang;(T1, T2)</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, temperature.o(t._Z12SERIAL_PRINTIfiEvT_T0_))
<BR><BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(double, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to temperature_cpp]::print_heater_state(float, float, float, heater_id_t)
</UL>

<P><STRONG><a name="[206]"></a>void SERIAL_ECHOLN&lang;char*&rang;(T1)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, m118.o(t._Z13SERIAL_ECHOLNIPcEvT_))
<BR><BR>[Calls]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_next_command()
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M118()
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;homing_needed_error(unsigned char)
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::diveToFile(bool, SdFile*&, const char*, bool)
</UL>

<P><STRONG><a name="[27b]"></a>void SERIAL_ECHOLN&lang;unsigned&rang;(T1)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, cardreader.o(t._Z13SERIAL_ECHOLNIjEvT_))
<BR><BR>[Calls]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println(unsigned, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::report_status()
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::printListing(SdFile, const char*)
</UL>

<P><STRONG><a name="[2a5]"></a>void SERIAL_ECHOLN&lang;long&rang;(T1)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, queue.o(t._Z13SERIAL_ECHOLNIlEvT_))
<BR><BR>[Calls]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println(long, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::flush_and_request_resend(serial_index_t)
</UL>

<P><STRONG><a name="[3ab]"></a>void MarlinSettings::EEPROM_READ&lang;PID_t&rang;(T1&)</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, settings.o(t._ZN14MarlinSettings11EEPROM_READI5PID_tEEvRT_))
<BR><BR>[Calls]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PersistentStore::read_data(int&, unsigned char*, unsigned, unsigned short*, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::_load()
</UL>

<P><STRONG><a name="[3a8]"></a>void MarlinSettings::EEPROM_READ&lang;XYval&lang;float&rang;&rang;(T1&)</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, settings.o(t._ZN14MarlinSettings11EEPROM_READI5XYvalIfEEEvRT_))
<BR><BR>[Calls]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PersistentStore::read_data(int&, unsigned char*, unsigned, unsigned short*, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::_load()
</UL>

<P><STRONG><a name="[3a5]"></a>void MarlinSettings::EEPROM_READ&lang;XYZval&lang;float&rang;&rang;(T1&)</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, settings.o(t._ZN14MarlinSettings11EEPROM_READI6XYZvalIfEEEvRT_))
<BR><BR>[Calls]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PersistentStore::read_data(int&, unsigned char*, unsigned, unsigned short*, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::_load()
</UL>

<P><STRONG><a name="[3a6]"></a>void MarlinSettings::EEPROM_READ&lang;signed char&rang;(T1&)</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, settings.o(t._ZN14MarlinSettings11EEPROM_READIaEEvRT_))
<BR><BR>[Calls]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PersistentStore::read_data(int&, unsigned char*, unsigned, unsigned short*, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::_load()
</UL>

<P><STRONG><a name="[3a9]"></a>void MarlinSettings::EEPROM_READ&lang;bool&rang;(T1&)</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, settings.o(t._ZN14MarlinSettings11EEPROM_READIbEEvRT_))
<BR><BR>[Calls]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PersistentStore::read_data(int&, unsigned char*, unsigned, unsigned short*, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::_load()
</UL>

<P><STRONG><a name="[3a4]"></a>void MarlinSettings::EEPROM_READ&lang;float&rang;(T1&)</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, settings.o(t._ZN14MarlinSettings11EEPROM_READIfEEvRT_))
<BR><BR>[Calls]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PersistentStore::read_data(int&, unsigned char*, unsigned, unsigned short*, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::_load()
</UL>

<P><STRONG><a name="[3ac]"></a>void MarlinSettings::EEPROM_READ&lang;unsigned char&rang;(T1&)</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, settings.o(t._ZN14MarlinSettings11EEPROM_READIhEEvRT_))
<BR><BR>[Calls]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PersistentStore::read_data(int&, unsigned char*, unsigned, unsigned short*, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::_load()
</UL>

<P><STRONG><a name="[3aa]"></a>void MarlinSettings::EEPROM_READ&lang;short&rang;(T1&)</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, settings.o(t._ZN14MarlinSettings11EEPROM_READIsEEvRT_))
<BR><BR>[Calls]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PersistentStore::read_data(int&, unsigned char*, unsigned, unsigned short*, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::_load()
</UL>

<P><STRONG><a name="[39f]"></a>void MarlinSettings::EEPROM_WRITE&lang;PID_t&rang;(const T1&)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, settings.o(t._ZN14MarlinSettings12EEPROM_WRITEI5PID_tEEvRKT_))
<BR><BR>[Calls]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PersistentStore::write_data(int&, const unsigned char*, unsigned, unsigned short*)
</UL>
<BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::save()
</UL>

<P><STRONG><a name="[39c]"></a>void MarlinSettings::EEPROM_WRITE&lang;XYval&lang;float&rang;&rang;(const T1&)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, settings.o(t._ZN14MarlinSettings12EEPROM_WRITEI5XYvalIfEEEvRKT_))
<BR><BR>[Calls]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PersistentStore::write_data(int&, const unsigned char*, unsigned, unsigned short*)
</UL>
<BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::save()
</UL>

<P><STRONG><a name="[39a]"></a>void MarlinSettings::EEPROM_WRITE&lang;XYZval&lang;float&rang;&rang;(const T1&)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, settings.o(t._ZN14MarlinSettings12EEPROM_WRITEI6XYZvalIfEEEvRKT_))
<BR><BR>[Calls]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PersistentStore::write_data(int&, const unsigned char*, unsigned, unsigned short*)
</UL>
<BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::save()
</UL>

<P><STRONG><a name="[397]"></a>void MarlinSettings::EEPROM_WRITE&lang;char[4]&rang;(const T1&)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, settings.o(t._ZN14MarlinSettings12EEPROM_WRITEIA4_cEEvRKT_))
<BR><BR>[Calls]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PersistentStore::write_data(int&, const unsigned char*, unsigned, unsigned short*)
</UL>
<BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::save()
</UL>

<P><STRONG><a name="[39d]"></a>void MarlinSettings::EEPROM_WRITE&lang;signed char&rang;(const T1&)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, settings.o(t._ZN14MarlinSettings12EEPROM_WRITEIaEEvRKT_))
<BR><BR>[Calls]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PersistentStore::write_data(int&, const unsigned char*, unsigned, unsigned short*)
</UL>
<BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::save()
</UL>

<P><STRONG><a name="[39b]"></a>void MarlinSettings::EEPROM_WRITE&lang;bool&rang;(const T1&)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, settings.o(t._ZN14MarlinSettings12EEPROM_WRITEIbEEvRKT_))
<BR><BR>[Calls]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PersistentStore::write_data(int&, const unsigned char*, unsigned, unsigned short*)
</UL>
<BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::save()
</UL>

<P><STRONG><a name="[399]"></a>void MarlinSettings::EEPROM_WRITE&lang;float&rang;(const T1&)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, settings.o(t._ZN14MarlinSettings12EEPROM_WRITEIfEEvRKT_))
<BR><BR>[Calls]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PersistentStore::write_data(int&, const unsigned char*, unsigned, unsigned short*)
</UL>
<BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::save()
</UL>

<P><STRONG><a name="[398]"></a>void MarlinSettings::EEPROM_WRITE&lang;unsigned char&rang;(const T1&)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, settings.o(t._ZN14MarlinSettings12EEPROM_WRITEIhEEvRKT_))
<BR><BR>[Calls]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PersistentStore::write_data(int&, const unsigned char*, unsigned, unsigned short*)
</UL>
<BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::save()
</UL>

<P><STRONG><a name="[39e]"></a>void MarlinSettings::EEPROM_WRITE&lang;short&rang;(const T1&)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, settings.o(t._ZN14MarlinSettings12EEPROM_WRITEIsEEvRKT_))
<BR><BR>[Calls]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PersistentStore::write_data(int&, const unsigned char*, unsigned, unsigned short*)
</UL>
<BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::save()
</UL>

<P><STRONG><a name="[394]"></a>void MarlinSettings::PLR_EEPROM_READ&lang;float&rang;(T1&)</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, settings.o(t._ZN14MarlinSettings15PLR_EEPROM_READIfEEvRT_))
<BR><BR>[Calls]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PersistentStore::read_data(int&, unsigned char*, unsigned, unsigned short*, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::plr_recovery()
</UL>

<P><STRONG><a name="[395]"></a>void MarlinSettings::PLR_EEPROM_READ&lang;unsigned&rang;(T1&)</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, settings.o(t._ZN14MarlinSettings15PLR_EEPROM_READIjEEvRT_))
<BR><BR>[Calls]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PersistentStore::read_data(int&, unsigned char*, unsigned, unsigned short*, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::plr_is_pl()
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::plr_recovery()
</UL>

<P><STRONG><a name="[393]"></a>void MarlinSettings::PLR_EEPROM_READ&lang;short&rang;(T1&)</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, settings.o(t._ZN14MarlinSettings15PLR_EEPROM_READIsEEvRT_))
<BR><BR>[Calls]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PersistentStore::read_data(int&, unsigned char*, unsigned, unsigned short*, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::plr_recovery()
</UL>

<P><STRONG><a name="[38b]"></a>void MarlinSettings::PLR_EEPROM_WRITE&lang;char&rang;(const T1&)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, settings.o(t._ZN14MarlinSettings16PLR_EEPROM_WRITEIcEEvRKT_))
<BR><BR>[Calls]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PersistentStore::write_data(int&, const unsigned char*, unsigned, unsigned short*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::plr_fn_save(int)
</UL>

<P><STRONG><a name="[392]"></a>void MarlinSettings::PLR_EEPROM_WRITE&lang;float&rang;(const T1&)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, settings.o(t._ZN14MarlinSettings16PLR_EEPROM_WRITEIfEEvRKT_))
<BR><BR>[Calls]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PersistentStore::write_data(int&, const unsigned char*, unsigned, unsigned short*)
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::plr_save(unsigned, short, short, short, short, float, float)
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::plr_pre_save(unsigned, short, short, float, unsigned short)
</UL>

<P><STRONG><a name="[391]"></a>void MarlinSettings::PLR_EEPROM_WRITE&lang;short&rang;(const T1&)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, settings.o(t._ZN14MarlinSettings16PLR_EEPROM_WRITEIsEEvRKT_))
<BR><BR>[Calls]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PersistentStore::write_data(int&, const unsigned char*, unsigned, unsigned short*)
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::plr_save(unsigned, short, short, short, short, float, float)
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::plr_pre_save(unsigned, short, short, float, unsigned short)
</UL>

<P><STRONG><a name="[3a2]"></a>void MarlinSettings::EEPROM_READ_ALWAYS&lang;unsigned char&rang;(T1&)</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, settings.o(t._ZN14MarlinSettings18EEPROM_READ_ALWAYSIhEEvRT_))
<BR><BR>[Calls]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PersistentStore::read_data(int&, unsigned char*, unsigned, unsigned short*, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::_load()
</UL>

<P><STRONG><a name="[247]"></a>TFilamentMonitor&lang;RunoutResponseDebounced, FilamentSensorSwitch&rang;::run()</STRONG> (Thumb, 204 bytes, Stack size 0 bytes, marlincore.o(t._ZN16TFilamentMonitorI23RunoutResponseDebounced20FilamentSensorSwitchE3runEv))
<BR><BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void SERIAL_ECHO&lang;int&rang;(T1)
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FilamentSensorSwitch::run()
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SERIAL_CHAR(char)
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::synchronize()
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_filament_runout(unsigned char)
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echopair_PGM(const char*, unsigned char)
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printingIsActive()
</UL>
<BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle()
</UL>

<P><STRONG><a name="[3a7]"></a>TFilamentMonitor&lang;RunoutResponseDebounced, FilamentSensorSwitch&rang;::reset()</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, settings.o(t._ZN16TFilamentMonitorI23RunoutResponseDebounced20FilamentSensorSwitchE5resetEv))
<BR><BR>[Called By]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::reset()
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::_load()
</UL>

<P><STRONG><a name="[2cd]"></a>restorer&lang;GcodeSuite::MarlinBusyState&rang;::~restorer()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gcode.o(t._ZN8restorerIN10GcodeSuite15MarlinBusyStateEED1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[36d]"></a>restorer&lang;bool&rang;::~restorer()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, temperature.o(t._ZN8restorerIbED1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::wait_for_hotend(unsigned char, bool)
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[13f]"></a>[local to hc32f46x_sdioc_c]::SdiocGetClkDiv(unsigned, unsigned)</STRONG> (Thumb, 144 bytes, Stack size 0 bytes, hc32f46x_sdioc.o(i._ZN38_INTERNAL_16_hc32f46x_sdioc_c_89428c0814SdiocGetClkDivEjj))
<BR><BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_SetClk
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_Init
</UL>

<P><STRONG><a name="[13e]"></a>[local to hc32f46x_sdioc_c]::SdiocGetInternDataPtr(const M4_SDIOC_TypeDef*)</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, hc32f46x_sdioc.o(i._ZN38_INTERNAL_16_hc32f46x_sdioc_c_89428c0821SdiocGetInternDataPtrEPK16M4_SDIOC_TypeDef))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_IrqHandler
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_Init
</UL>

<P><STRONG><a name="[159]"></a>[local to hc32f46x_timer0_c]::AsyncDelay(M4_TMR0_TypeDef*, en_tim0_channel, en_functional_state)</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, hc32f46x_timer0.o(i._ZN39_INTERNAL_17_hc32f46x_timer0_c_4644dad510AsyncDelayEP15M4_TMR0_TypeDef15en_tim0_channel19en_functional_state))
<BR><BR>[Calls]<UL><LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to hc32f46x_timer0_c]::TIMER0_GetClkMode(M4_TMR0_TypeDef*, en_tim0_channel)
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_WriteCmpReg
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_IntCmd
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_Cmd
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_ClearFlag
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_BaseInit
</UL>

<P><STRONG><a name="[3df]"></a>[local to hc32f46x_timer0_c]::TIMER0_GetClkMode(M4_TMR0_TypeDef*, en_tim0_channel)</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, hc32f46x_timer0.o(i._ZN39_INTERNAL_17_hc32f46x_timer0_c_4644dad517TIMER0_GetClkModeEP15M4_TMR0_TypeDef15en_tim0_channel))
<BR><BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to hc32f46x_timer0_c]::AsyncDelay(M4_TMR0_TypeDef*, en_tim0_channel, en_functional_state)
</UL>

<P><STRONG><a name="[3de]"></a>[local to hc32f46x_usart_c]::UsartGetClk(const M4_USART_TypeDef*)</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, hc32f46x_usart.o(i._ZN38_INTERNAL_16_hc32f46x_usart_c_0262f0bf11UsartGetClkEPK16M4_USART_TypeDef))
<BR><BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to hc32f46x_usart_c]::SetClkSyncBaudrate(M4_USART_TypeDef*, unsigned)
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to hc32f46x_usart_c]::SetUartBaudrate(M4_USART_TypeDef*, unsigned)
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to hc32f46x_usart_c]::SetScBaudrate(M4_USART_TypeDef*, unsigned)
</UL>

<P><STRONG><a name="[15f]"></a>[local to hc32f46x_usart_c]::SetScBaudrate(M4_USART_TypeDef*, unsigned)</STRONG> (Thumb, 340 bytes, Stack size 0 bytes, hc32f46x_usart.o(i._ZN38_INTERNAL_16_hc32f46x_usart_c_0262f0bf13SetScBaudrateEP16M4_USART_TypeDefj))
<BR><BR>[Calls]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to hc32f46x_usart_c]::UsartGetClk(const M4_USART_TypeDef*)
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SetBaudrate
</UL>

<P><STRONG><a name="[161]"></a>[local to hc32f46x_usart_c]::SetUartBaudrate(M4_USART_TypeDef*, unsigned)</STRONG> (Thumb, 346 bytes, Stack size 0 bytes, hc32f46x_usart.o(i._ZN38_INTERNAL_16_hc32f46x_usart_c_0262f0bf15SetUartBaudrateEP16M4_USART_TypeDefj))
<BR><BR>[Calls]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to hc32f46x_usart_c]::UsartGetClk(const M4_USART_TypeDef*)
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SetBaudrate
</UL>

<P><STRONG><a name="[160]"></a>[local to hc32f46x_usart_c]::SetClkSyncBaudrate(M4_USART_TypeDef*, unsigned)</STRONG> (Thumb, 282 bytes, Stack size 0 bytes, hc32f46x_usart.o(i._ZN38_INTERNAL_16_hc32f46x_usart_c_0262f0bf18SetClkSyncBaudrateEP16M4_USART_TypeDefj))
<BR><BR>[Calls]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to hc32f46x_usart_c]::UsartGetClk(const M4_USART_TypeDef*)
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SetBaudrate
</UL>

<P><STRONG><a name="[119]"></a>[local to hc32f46x_utility_c]::SetUartBaudrate(unsigned)</STRONG> (Thumb, 386 bytes, Stack size 0 bytes, hc32f46x_utility.o(i._ZN40_INTERNAL_18_hc32f46x_utility_c_985ce00315SetUartBaudrateEj))
<BR><BR>[Calls]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_UART_Init
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWC_Fcg1PeriphClockCmd
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ddl_UartInit
</UL>

<P><STRONG><a name="[cf]"></a>__sti___12_board_gpio_c_PIN_MAP</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, board_gpio.o(i.__sti___12_board_gpio_c_PIN_MAP))
<BR><BR>[Calls]<UL><LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::HardwareSerial(usart_dev*, unsigned char, unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> board_gpio.o(.init_array)
</UL>
<P><STRONG><a name="[d0]"></a>__sti___14_MarlinCore_cpp_card</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, marlincore.o(i.__sti___14_MarlinCore_cpp_card))
<BR><BR>[Calls]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::CardReader()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> marlincore.o(.init_array)
</UL>
<P><STRONG><a name="[323]"></a>[local to M115_cpp]::cap_line(const char*, bool)</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, m115.o(i._ZN29_INTERNAL_8_M115_cpp_d86c21268cap_lineEPKcb))
<BR><BR>[Calls]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void SERIAL_CHAR&lang;&lang;int&rang;&rang;(char, T1...)
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SERIAL_CHAR(char)
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M115()
</UL>

<P><STRONG><a name="[25c]"></a>const T1 [local to G2_G3_cpp]::ABS&lang;float&rang;(T1)</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, g2_g3.o(t._ZN30_INTERNAL_9_G2_G3_cpp_e4fdbed73ABSIfEEKT_S1_))
<BR><BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_arc(const XYZEval&lang;float&rang;&, const XYval&lang;float&rang;&, bool, unsigned char)
</UL>

<P><STRONG><a name="[320]"></a>decltype(((const param#1+const param#2))) [local to M106_M107_cpp]::_MIN&lang;unsigned char, int&rang;(T1, T2)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, m106_m107.o(t._ZN35_INTERNAL_13_M106_M107_cpp_6296f81a4_MINIhiEEDTplfpK_fpK0_ET_T0_))
<BR><BR>[Called By]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M107()
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M106()
</UL>

<P><STRONG><a name="[2a2]"></a>[local to queue_cpp]::serial_data_available(serial_index_t)</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, queue.o(i._ZN29_INTERNAL_9_queue_cpp_G28_STR21serial_data_availableE14serial_index_t))
<BR><BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::available()
</UL>
<BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::get_serial_commands()
</UL>

<P><STRONG><a name="[3db]"></a>[local to endstops_cpp]::print_es_state(bool, const char*)</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, endstops.o(i._ZN34_INTERNAL_12_endstops_cpp_endstops14print_es_stateEbPKc))
<BR><BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SERIAL_CHAR(char)
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Endstops::report_states()
</UL>

<P><STRONG><a name="[d1]"></a>__sti___12_endstops_cpp_endstops</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, endstops.o(i.__sti___12_endstops_cpp_endstops))
<BR>[Address Reference Count : 1]<UL><LI> endstops.o(.init_array)
</UL>
<P><STRONG><a name="[241]"></a>const T1 [local to motion_cpp]::ABS&lang;float&rang;(T1)</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, motion.o(t._ZN32_INTERNAL_10_motion_cpp_db549edf3ABSIfEEKT_S1_))
<BR><BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;homeaxis(AxisEnum)
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepare_line_to_destination()
</UL>

<P><STRONG><a name="[1bf]"></a>void [local to motion_cpp]::NOLESS&lang;float, float&rang;(T1&, T2)</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, motion.o(t._ZN32_INTERNAL_10_motion_cpp_db549edf6NOLESSIffEEvRT_T0_))
<BR><BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_z_clearance(float, bool)
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_motion_limits(XYZval&lang;float&rang;&)
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dual_x_carriage_unpark()
</UL>

<P><STRONG><a name="[201]"></a>void [local to motion_cpp]::NOMORE&lang;float, float&rang;(T1&, T2)</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, motion.o(t._ZN32_INTERNAL_10_motion_cpp_db549edf6NOMOREIffEEvRT_T0_))
<BR><BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_motion_limits(XYZval&lang;float&rang;&)
</UL>

<P><STRONG><a name="[d2]"></a>__sti___11_planner_cpp_planner</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, planner.o(i.__sti___11_planner_cpp_planner))
<BR><BR>[Calls]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::Planner()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> planner.o(.init_array)
</UL>
<P><STRONG><a name="[40b]"></a>const T1 [local to planner_cpp]::ABS&lang;float&rang;(T1)</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, planner.o(t._ZN32_INTERNAL_11_planner_cpp_planner3ABSIfEEKT_S1_))
<BR><BR>[Called By]<UL><LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::_populate_block(block_t*, bool, const XYZEval&lang;int&rang;&, float, unsigned char, float)
</UL>

<P><STRONG><a name="[40c]"></a>const T1 [local to planner_cpp]::ABS&lang;int&rang;(T1)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, planner.o(t._ZN32_INTERNAL_11_planner_cpp_planner3ABSIiEEKT_S1_))
<BR><BR>[Called By]<UL><LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::_populate_block(block_t*, bool, const XYZEval&lang;int&rang;&, float, unsigned char, float)
</UL>

<P><STRONG><a name="[411]"></a>decltype(((const param#1+const param#2))) [local to planner_cpp]::_MAX&lang;float, float&rang;(T1, T2)</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, planner.o(t._ZN32_INTERNAL_11_planner_cpp_planner4_MAXIffEEDTplfpK_fpK0_ET_T0_))
<BR><BR>[Called By]<UL><LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::_populate_block(block_t*, bool, const XYZEval&lang;int&rang;&, float, unsigned char, float)
</UL>

<P><STRONG><a name="[40d]"></a>decltype(((const param#1+const param#2))) [local to planner_cpp]::_MAX&lang;unsigned, unsigned&rang;(T1, T2)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, planner.o(t._ZN32_INTERNAL_11_planner_cpp_planner4_MAXIjjEEDTplfpK_fpK0_ET_T0_))
<BR><BR>[Called By]<UL><LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::_populate_block(block_t*, bool, const XYZEval&lang;int&rang;&, float, unsigned char, float)
</UL>

<P><STRONG><a name="[413]"></a>decltype(((const param#1+const param#2))) [local to planner_cpp]::_MIN&lang;float, float&rang;(T1, T2)</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, planner.o(t._ZN32_INTERNAL_11_planner_cpp_planner4_MINIffEEDTplfpK_fpK0_ET_T0_))
<BR><BR>[Called By]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::reverse_pass_kernel(block_t*, const block_t*)
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::_populate_block(block_t*, bool, const XYZEval&lang;int&rang;&, float, unsigned char, float)
</UL>

<P><STRONG><a name="[409]"></a>void [local to planner_cpp]::NOLESS&lang;float, float&rang;(T1&, T2)</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, planner.o(t._ZN32_INTERNAL_11_planner_cpp_planner6NOLESSIffEEvRT_T0_))
<BR><BR>[Called By]<UL><LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::_populate_block(block_t*, bool, const XYZEval&lang;int&rang;&, float, unsigned char, float)
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::autotemp_task()
</UL>

<P><STRONG><a name="[420]"></a>void [local to planner_cpp]::NOLESS&lang;unsigned, unsigned&rang;(T1&, T2)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, planner.o(t._ZN32_INTERNAL_11_planner_cpp_planner6NOLESSIjjEEvRT_T0_))
<BR><BR>[Called By]<UL><LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::calculate_trapezoid_for_block(block_t*, float, float)
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::reset_acceleration_rates()
</UL>

<P><STRONG><a name="[40e]"></a>void [local to planner_cpp]::NOMORE&lang;float, float&rang;(T1&, T2)</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, planner.o(t._ZN32_INTERNAL_11_planner_cpp_planner6NOMOREIffEEvRT_T0_))
<BR><BR>[Called By]<UL><LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::_populate_block(block_t*, bool, const XYZEval&lang;int&rang;&, float, unsigned char, float)
</UL>

<P><STRONG><a name="[410]"></a>void [local to planner_cpp]::NOMORE&lang;unsigned, float&rang;(T1&, T2)</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, planner.o(t._ZN32_INTERNAL_11_planner_cpp_planner6NOMOREIjfEEvRT_T0_))
<BR><BR>[Called By]<UL><LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::_populate_block(block_t*, bool, const XYZEval&lang;int&rang;&, float, unsigned char, float)
</UL>

<P><STRONG><a name="[40f]"></a>void [local to planner_cpp]::NOMORE&lang;unsigned, unsigned&rang;(T1&, T2)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, planner.o(t._ZN32_INTERNAL_11_planner_cpp_planner6NOMOREIjjEEvRT_T0_))
<BR><BR>[Called By]<UL><LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::_populate_block(block_t*, bool, const XYZEval&lang;int&rang;&, float, unsigned char, float)
</UL>

<P><STRONG><a name="[3af]"></a>[local to settings_cpp]::config_heading(bool, const char*, bool)</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, settings.o(i._ZN34_INTERNAL_12_settings_cpp_7a1ff5ce14config_headingEbPKcb))
<BR><BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SERIAL_CHAR(char)
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echo_start()
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::report(bool)
</UL>

<P><STRONG><a name="[3a3]"></a>decltype(((const param#1+const param#2))) [local to settings_cpp]::_MIN&lang;unsigned char, int&rang;(T1, T2)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, settings.o(t._ZN34_INTERNAL_12_settings_cpp_7a1ff5ce4_MINIhiEEDTplfpK_fpK0_ET_T0_))
<BR><BR>[Called By]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::reset()
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::_load()
</UL>

<P><STRONG><a name="[42b]"></a>decltype(((const param#1+const param#2))) [local to stepper_cpp]::_MAX&lang;unsigned, unsigned long&rang;(T1, T2)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stepper.o(t._ZN33_INTERNAL_11_stepper_cpp_209733ab4_MAXIjmEEDTplfpK_fpK0_ET_T0_))
<BR><BR>[Called By]<UL><LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::block_phase_isr()
</UL>

<P><STRONG><a name="[42c]"></a>decltype(((const param#1+const param#2))) [local to stepper_cpp]::_MAX&lang;unsigned long, unsigned long&rang;(T1, T2)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stepper.o(t._ZN33_INTERNAL_11_stepper_cpp_209733ab4_MAXImmEEDTplfpK_fpK0_ET_T0_))
<BR><BR>[Called By]<UL><LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::block_phase_isr()
</UL>

<P><STRONG><a name="[431]"></a>decltype(((const param#1+const param#2))) [local to stepper_cpp]::_MIN&lang;unsigned, unsigned long&rang;(T1, T2)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stepper.o(t._ZN33_INTERNAL_11_stepper_cpp_209733ab4_MINIjmEEDTplfpK_fpK0_ET_T0_))
<BR><BR>[Called By]<UL><LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::AWAIT_TIMED_PULSE(unsigned char)
</UL>

<P><STRONG><a name="[36f]"></a>[local to temperature_cpp]::print_heater_state(float, float, float, heater_id_t)</STRONG> (Thumb, 126 bytes, Stack size 0 bytes, temperature.o(i._ZN37_INTERNAL_15_temperature_cpp_ca4fe82418print_heater_stateEfff11heater_id_t))
<BR><BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay(unsigned long)
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echopair_PGM(const char*, float)
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SERIAL_CHAR(char)
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void SERIAL_PRINT&lang;float, int&rang;(T1, T2)
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void SERIAL_CHAR&lang;&lang;char&rang;&rang;(char, T1...)
</UL>
<BR>[Called By]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::print_heater_states(unsigned char)
</UL>

<P><STRONG><a name="[d3]"></a>__sti___15_temperature_cpp_ca4fe824</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, temperature.o(i.__sti___15_temperature_cpp_ca4fe824))
<BR><BR>[Calls]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> temperature.o(.init_array)
</UL>
<P><STRONG><a name="[364]"></a>const T1 [local to temperature_cpp]::ABS&lang;float&rang;(T1)</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, temperature.o(t._ZN37_INTERNAL_15_temperature_cpp_ca4fe8243ABSIfEEKT_S1_))
<BR><BR>[Called By]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::wait_for_bed(bool)
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::wait_for_hotend(unsigned char, bool)
</UL>

<P><STRONG><a name="[37d]"></a>decltype(((const param#1+const param#2))) [local to temperature_cpp]::_MAX&lang;int, int&rang;(T1, T2)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, temperature.o(t._ZN37_INTERNAL_15_temperature_cpp_ca4fe8244_MAXIiiEEDTplfpK_fpK0_ET_T0_))
<BR><BR>[Called By]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::init()
</UL>

<P><STRONG><a name="[37e]"></a>decltype(((const param#1+const param#2))) [local to temperature_cpp]::_MIN&lang;int, int&rang;(T1, T2)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, temperature.o(t._ZN37_INTERNAL_15_temperature_cpp_ca4fe8244_MINIiiEEDTplfpK_fpK0_ET_T0_))
<BR><BR>[Called By]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::init()
</UL>

<P><STRONG><a name="[af]"></a>&lang;Func48&rang;</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, cardreader.o(i.<Func48>))
<BR><BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_dtor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cardreader.o(i.__sti___14_cardreader_cpp_M23_STR)
</UL>
<P><STRONG><a name="[275]"></a>[local to cardreader_cpp]::DIR_IS_SUBDIR(const directoryEntry*)</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cardreader.o(i._ZN35_INTERNAL_14_cardreader_cpp_M23_STR13DIR_IS_SUBDIREPK14directoryEntry))
<BR><BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::is_dir_or_gcode(const directoryEntry&, bool)
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::printListing(SdFile, const char*)
</UL>

<P><STRONG><a name="[287]"></a>CardReader::getAbsFilename(char*)::[lambda(SdFile&) (instance 1)]::operator ()(SdFile&) const</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, cardreader.o(i._ZZN10CardReader14getAbsFilenameEPcENKUlR6SdFileE_clES2_))
<BR><BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::getDosName(char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::getAbsFilename(char*)
</UL>

<P><STRONG><a name="[d4]"></a>__sti___14_cardreader_cpp_M23_STR</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, cardreader.o(i.__sti___14_cardreader_cpp_M23_STR))
<BR><BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdFile::SdFile()
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_ctor_nocookie_nodtor
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cardreader.o(.init_array)
</UL>
<P><STRONG><a name="[345]"></a>[local to SdBaseFile_cpp]::DIR_IS_FILE(const directoryEntry*)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, sdbasefile.o(i._ZN36_INTERNAL_14_SdBaseFile_cpp_9a4d697f11DIR_IS_FILEEPK14directoryEntry))
<BR><BR>[Called By]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::openCachedEntry(unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[346]"></a>[local to SdBaseFile_cpp]::DIR_IS_SUBDIR(const directoryEntry*)</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, sdbasefile.o(i._ZN36_INTERNAL_14_SdBaseFile_cpp_9a4d697f13DIR_IS_SUBDIREPK14directoryEntry))
<BR><BR>[Called By]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::openCachedEntry(unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[357]"></a>[local to SdBaseFile_cpp]::DIR_IS_FILE_OR_SUBDIR(const directoryEntry*)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, sdbasefile.o(i._ZN36_INTERNAL_14_SdBaseFile_cpp_9a4d697f21DIR_IS_FILE_OR_SUBDIREPK14directoryEntry))
<BR><BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::readDir(directoryEntry*, char*)
</UL>

<P><STRONG><a name="[d5]"></a>__sti___13_IPAddress_cpp_0fe1e075</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ipaddress.o(i.__sti___13_IPAddress_cpp_0fe1e075))
<BR><BR>[Calls]<UL><LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPAddress::IPAddress(unsigned char, unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ipaddress.o(.init_array)
</UL>
<P><STRONG><a name="[3b5]"></a>[local to adc_c]::adc_setclk()</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, adc.o(i._ZN22_INTERNAL_5_adc_c_adc110adc_setclkEv))
<BR><BR>[Calls]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_XtalConfig
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_XtalCmd
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_UpllConfig
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_UpllCmd
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetPllSource
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetPeriClkSource
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_adcs
</UL>

<P><STRONG><a name="[460]"></a>[local to adc_c]::adc_foreach(void(*)(adc_dev*))</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, adc.o(i._ZN22_INTERNAL_5_adc_c_adc111adc_foreachEPFvP7adc_devE))
<BR><BR>[Called By]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_adcs
</UL>

<P><STRONG><a name="[3ba]"></a>[local to adc_c]::adc_SetPinMode(unsigned char, en_pin_mode)</STRONG> (Thumb, 172 bytes, Stack size 0 bytes, adc.o(i._ZN22_INTERNAL_5_adc_c_adc114adc_SetPinModeEh11en_pin_mode))
<BR><BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to adc_c]::adc_SetChannelPinMode(const M4_ADC_TypeDef*, unsigned, en_pin_mode)
</UL>

<P><STRONG><a name="[3bb]"></a>[local to adc_c]::adc_initconfig(adc_dev*)</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, adc.o(i._ZN22_INTERNAL_5_adc_c_adc114adc_initconfigEP7adc_dev))
<BR><BR>[Calls]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWC_Fcg3PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to adc_c]::adc_default_config(adc_dev*)
</UL>

<P><STRONG><a name="[3be]"></a>[local to adc_c]::adc_DMAIrqConfig()</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, adc.o(i._ZN22_INTERNAL_5_adc_c_adc116adc_DMAIrqConfigEv))
<BR><BR>[Calls]<UL><LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to adc_c]::adc_DmaIrqRegister(stc_irq_regi_conf*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to adc_c]::adc_default_config(adc_dev*)
</UL>

<P><STRONG><a name="[3c0]"></a>[local to adc_c]::adc_DMAInitConfig(adc_dev*)</STRONG> (Thumb, 192 bytes, Stack size 0 bytes, adc.o(i._ZN22_INTERNAL_5_adc_c_adc117adc_DMAInitConfigEP7adc_dev))
<BR><BR>[Calls]<UL><LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetTriggerSrc
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_InitChannel
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearIrqFlag
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ChannelCmd
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWC_Fcg0PeriphClockCmd
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to adc_c]::adc_default_config(adc_dev*)
</UL>

<P><STRONG><a name="[3c5]"></a>[local to adc_c]::adc_TriggerConfig(adc_dev*, unsigned)</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, adc.o(i._ZN22_INTERNAL_5_adc_c_adc117adc_TriggerConfigEP7adc_devj))
<BR><BR>[Calls]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_TriggerSrcCmd
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWC_Fcg0PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to adc_c]::adc_default_config(adc_dev*)
</UL>

<P><STRONG><a name="[3bf]"></a>[local to adc_c]::adc_DmaIrqRegister(stc_irq_regi_conf*, unsigned)</STRONG> (Thumb, 150 bytes, Stack size 0 bytes, adc.o(i._ZN22_INTERNAL_5_adc_c_adc118adc_DmaIrqRegisterEP17stc_irq_regi_confj))
<BR><BR>[Calls]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enShareIrqEnable
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enIrqRegistration
</UL>
<BR>[Called By]<UL><LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to adc_c]::adc_DMAIrqConfig()
</UL>

<P><STRONG><a name="[3c9]"></a>[local to adc_c]::adc_channelchonfig(adc_dev*, en_pin_mode)</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, adc.o(i._ZN22_INTERNAL_5_adc_c_adc118adc_channelchonfigEP7adc_dev11en_pin_mode))
<BR><BR>[Calls]<UL><LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_AddAdcChannel
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to adc_c]::adc_SetChannelPinMode(const M4_ADC_TypeDef*, unsigned, en_pin_mode)
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to adc_c]::adc_default_config(adc_dev*)
</UL>

<P><STRONG><a name="[b1]"></a>[local to adc_c]::adc_default_config(adc_dev*)</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, adc.o(i._ZN22_INTERNAL_5_adc_c_adc118adc_default_configEP7adc_dev))
<BR><BR>[Calls]<UL><LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_StartConvert
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to adc_c]::adc_channelchonfig(adc_dev*, en_pin_mode)
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to adc_c]::adc_TriggerConfig(adc_dev*, unsigned)
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to adc_c]::adc_DMAInitConfig(adc_dev*)
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to adc_c]::adc_DMAIrqConfig()
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to adc_c]::adc_initconfig(adc_dev*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> adc.o(i.setup_adcs)
</UL>
<P><STRONG><a name="[3ca]"></a>[local to adc_c]::adc_SetChannelPinMode(const M4_ADC_TypeDef*, unsigned, en_pin_mode)</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, adc.o(i._ZN22_INTERNAL_5_adc_c_adc121adc_SetChannelPinModeEPK14M4_ADC_TypeDefj11en_pin_mode))
<BR><BR>[Calls]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to adc_c]::adc_SetPinMode(unsigned char, en_pin_mode)
</UL>
<BR>[Called By]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to adc_c]::adc_channelchonfig(adc_dev*, en_pin_mode)
</UL>

<P><STRONG><a name="[464]"></a>[local to board_tim0_c]::__NVIC_EnableIRQ(IRQn)</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, board_tim0.o(i._ZN34_INTERNAL_12_board_tim0_c_e2b14bb216__NVIC_EnableIRQE4IRQn))
<BR><BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_time2B
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_time2A
</UL>

<P><STRONG><a name="[461]"></a>[local to board_tim0_c]::__NVIC_SetPriority(IRQn, unsigned)</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, board_tim0.o(i._ZN34_INTERNAL_12_board_tim0_c_e2b14bb218__NVIC_SetPriorityE4IRQnj))
<BR><BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_time2B
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_time2A
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_systick
</UL>

<P><STRONG><a name="[463]"></a>[local to board_tim0_c]::__NVIC_ClearPendingIRQ(IRQn)</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, board_tim0.o(i._ZN34_INTERNAL_12_board_tim0_c_e2b14bb222__NVIC_ClearPendingIRQE4IRQn))
<BR><BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_time2B
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_time2A
</UL>

<P><STRONG><a name="[3cd]"></a>[local to startup_cpp]::setup_SysClk()</STRONG> (Thumb, 192 bytes, Stack size 0 bytes, startup.o(i._ZN30_INTERNAL_11_startup_cpp_F_CPU12setup_SysClkEv))
<BR><BR>[Calls]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_Unlock
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_SetLatency
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_Lock
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_InstructionCacheCmd
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_XtalConfig
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_XtalCmd
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SysClkConfig
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetSysClkSource
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetPllSource
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_MpllConfig
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_MpllCmd
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetSysClkSource
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetFlagStatus
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetClockFreq
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init
</UL>

<P><STRONG><a name="[3e8]"></a>[local to HardwareSerial_cpp]::rb_full_count(ring_buffer*)</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, hardwareserial.o(i._ZN40_INTERNAL_18_HardwareSerial_cpp_1ae1736c13rb_full_countEP11ring_buffer))
<BR><BR>[Called By]<UL><LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to HardwareSerial_cpp]::usart_data_available(usart_dev*)
</UL>

<P><STRONG><a name="[380]"></a>[local to HardwareSerial_cpp]::usart_data_available(usart_dev*)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hardwareserial.o(i._ZN40_INTERNAL_18_HardwareSerial_cpp_1ae1736c20usart_data_availableEP9usart_dev))
<BR><BR>[Calls]<UL><LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to HardwareSerial_cpp]::rb_full_count(ring_buffer*)
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::read()
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::available()
</UL>

<P><STRONG><a name="[1fb]"></a>[local to usart_c]::rb_is_full(ring_buffer*)</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, usart.o(i._ZN24_INTERNAL_7_usart_c_dev410rb_is_fullEP11ring_buffer))
<BR><BR>[Called By]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_tx
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart4RxIrqCallback()
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart3RxIrqCallback()
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart2RxIrqCallback()
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart1RxIrqCallback()
</UL>

<P><STRONG><a name="[1fe]"></a>[local to usart_c]::rb_is_empty(ring_buffer*)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, usart.o(i._ZN24_INTERNAL_7_usart_c_dev411rb_is_emptyEP11ring_buffer))
<BR><BR>[Called By]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_tx
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_disable
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart4TxIrqCallback()
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart3TxIrqCallback()
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart2TxIrqCallback()
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart1TxIrqCallback()
</UL>

<P><STRONG><a name="[46c]"></a>[local to usart_c]::__NVIC_EnableIRQ(IRQn)</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, usart.o(i._ZN24_INTERNAL_7_usart_c_dev416__NVIC_EnableIRQE4IRQn))
<BR><BR>[Called By]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_enable
</UL>

<P><STRONG><a name="[46a]"></a>[local to usart_c]::__NVIC_SetPriority(IRQn, unsigned)</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, usart.o(i._ZN24_INTERNAL_7_usart_c_dev418__NVIC_SetPriorityE4IRQnj))
<BR><BR>[Called By]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_enable
</UL>

<P><STRONG><a name="[46b]"></a>[local to usart_c]::__NVIC_ClearPendingIRQ(IRQn)</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, usart.o(i._ZN24_INTERNAL_7_usart_c_dev422__NVIC_ClearPendingIRQE4IRQn))
<BR><BR>[Called By]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_enable
</UL>

<P><STRONG><a name="[46d]"></a>[local to usart_c]::rb_init(ring_buffer*, unsigned short, unsigned char*)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, usart.o(i._ZN24_INTERNAL_7_usart_c_dev47rb_initEP11ring_buffertPh))
<BR><BR>[Called By]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_init
</UL>

<P><STRONG><a name="[469]"></a>[local to usart_c]::rb_reset(ring_buffer*)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usart.o(i._ZN24_INTERNAL_7_usart_c_dev48rb_resetEP11ring_buffer))
<BR><BR>[Called By]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_disable
</UL>

<P><STRONG><a name="[1fd]"></a>[local to usart_c]::rb_insert(ring_buffer*, unsigned char)</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, usart.o(i._ZN24_INTERNAL_7_usart_c_dev49rb_insertEP11ring_bufferh))
<BR><BR>[Called By]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_tx
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart4RxIrqCallback()
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart3RxIrqCallback()
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart2RxIrqCallback()
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart1RxIrqCallback()
</UL>

<P><STRONG><a name="[1fc]"></a>[local to usart_c]::rb_remove(ring_buffer*)</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, usart.o(i._ZN24_INTERNAL_7_usart_c_dev49rb_removeEP11ring_buffer))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart4TxIrqCallback()
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart4RxIrqCallback()
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart3TxIrqCallback()
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart3RxIrqCallback()
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart2TxIrqCallback()
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart2RxIrqCallback()
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart1TxIrqCallback()
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart1RxIrqCallback()
</UL>

<P><STRONG><a name="[129]"></a>[local to sd_card_c]::SdCardInitSd(stc_sd_handle*)</STRONG> (Thumb, 106 bytes, Stack size 0 bytes, sd_card.o(i._ZN30_INTERNAL_9_sd_card_c_c2602c0a12SdCardInitSdEP13stc_sd_handle))
<BR><BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Cmd9_SendCSD
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Cmd7_SelectDeselectCard
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Cmd3_SendRelativeAddr
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Cmd2_AllSendCID
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCARD_GetCardCSD
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCARD_Init
</UL>

<P><STRONG><a name="[128]"></a>[local to sd_card_c]::SdCardPowerON(stc_sd_handle*)</STRONG> (Thumb, 284 bytes, Stack size 0 bytes, sd_card.o(i._ZN30_INTERNAL_9_sd_card_c_c2602c0a13SdCardPowerONEP13stc_sd_handle))
<BR><BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Cmd8_SendIfCond
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Cmd55_AppCmd
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Cmd0_GoIdleState
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Acmd41_SdSendOpCond
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCARD_Init
</UL>

<P><STRONG><a name="[126]"></a>[local to sd_card_c]::SdCardInitHost(const stc_sd_handle*)</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, sd_card.o(i._ZN30_INTERNAL_9_sd_card_c_c2602c0a14SdCardInitHostEPK13stc_sd_handle))
<BR><BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_Init
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWC_Fcg1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCARD_Init
</UL>

<P><STRONG><a name="[12b]"></a>[local to sd_card_c]::SdCardSetSpeed(stc_sd_handle*)</STRONG> (Thumb, 328 bytes, Stack size 0 bytes, sd_card.o(i._ZN30_INTERNAL_9_sd_card_c_c2602c0a14SdCardSetSpeedEP13stc_sd_handle))
<BR><BR>[Calls]<UL><LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_SetSpeedMode
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_SetClk
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_ReadBuffer
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_GetStatus
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_GetNormalIrqFlag
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_ConfigData
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_ClearNormalIrqFlag
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Cmd6_SwitchFunc
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Cmd16_SetBlockLength
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCARD_Init
</UL>

<P><STRONG><a name="[130]"></a>[local to sd_card_c]::DmaSdiocRxConfig(M4_DMA_TypeDef*, en_dma_channel, M4_SDIOC_TypeDef*, unsigned char*, unsigned short)</STRONG> (Thumb, 208 bytes, Stack size 0 bytes, sd_card.o(i._ZN30_INTERNAL_9_sd_card_c_c2602c0a16DmaSdiocRxConfigEP14M4_DMA_TypeDef14en_dma_channelP16M4_SDIOC_TypeDefPht))
<BR><BR>[Calls]<UL><LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetTriggerSrc
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_InitChannel
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearIrqFlag
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ChannelCmd
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWC_Fcg0PeriphClockCmd
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCARD_ReadBlocks
</UL>

<P><STRONG><a name="[138]"></a>[local to sd_card_c]::DmaSdiocTxConfig(M4_DMA_TypeDef*, en_dma_channel, M4_SDIOC_TypeDef*, unsigned char*, unsigned short)</STRONG> (Thumb, 208 bytes, Stack size 0 bytes, sd_card.o(i._ZN30_INTERNAL_9_sd_card_c_c2602c0a16DmaSdiocTxConfigEP14M4_DMA_TypeDef14en_dma_channelP16M4_SDIOC_TypeDefPht))
<BR><BR>[Calls]<UL><LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetTriggerSrc
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_InitChannel
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearIrqFlag
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ChannelCmd
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWC_Fcg0PeriphClockCmd
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCARD_WriteBlocks
</UL>

<P><STRONG><a name="[12a]"></a>[local to sd_card_c]::SdCardSetBusWidth(stc_sd_handle*)</STRONG> (Thumb, 112 bytes, Stack size 0 bytes, sd_card.o(i._ZN30_INTERNAL_9_sd_card_c_c2602c0a17SdCardSetBusWidthEP13stc_sd_handle))
<BR><BR>[Calls]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_SetBusWidth
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Cmd55_AppCmd
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Acmd6_SetBusWidth
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCARD_Init
</UL>

<P><STRONG><a name="[13c]"></a>[local to sd_card_c]::SdCardCheckReayForData(stc_sd_handle*, unsigned)</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, sd_card.o(i._ZN30_INTERNAL_9_sd_card_c_c2602c0a22SdCardCheckReayForDataEP13stc_sd_handlej))
<BR><BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Cmd13_SendStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCARD_WriteBlocks
</UL>

<P><STRONG><a name="[14a]"></a>[local to sdmmc_cmd_c]::SDMMC_GetCmdResp1(M4_SDIOC_TypeDef*, unsigned*, unsigned)</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, sdmmc_cmd.o(i._ZN33_INTERNAL_11_sdmmc_cmd_c_1dd5230f17SDMMC_GetCmdResp1EP16M4_SDIOC_TypeDefPjj))
<BR><BR>[Calls]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_GetResponse
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sdmmc_cmd_c]::SDMMC_WaitResponse(M4_SDIOC_TypeDef*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Cmd7_SelectDeselectCard
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Cmd6_SwitchFunc
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Cmd55_AppCmd
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Cmd25_WriteMultipleBlock
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Cmd24_WriteSingleBlock
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Cmd18_ReadMultipleBlock
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Cmd17_ReadSingleBlock
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Cmd16_SetBlockLength
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Cmd13_SendStatus
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Acmd6_SetBusWidth
</UL>

<P><STRONG><a name="[14f]"></a>[local to sdmmc_cmd_c]::SDMMC_GetCmdResp2(M4_SDIOC_TypeDef*, unsigned*)</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, sdmmc_cmd.o(i._ZN33_INTERNAL_11_sdmmc_cmd_c_1dd5230f17SDMMC_GetCmdResp2EP16M4_SDIOC_TypeDefPj))
<BR><BR>[Calls]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_GetResponse
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sdmmc_cmd_c]::SDMMC_WaitResponse(M4_SDIOC_TypeDef*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Cmd9_SendCSD
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Cmd2_AllSendCID
</UL>

<P><STRONG><a name="[148]"></a>[local to sdmmc_cmd_c]::SDMMC_GetCmdResp3(M4_SDIOC_TypeDef*, unsigned*)</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, sdmmc_cmd.o(i._ZN33_INTERNAL_11_sdmmc_cmd_c_1dd5230f17SDMMC_GetCmdResp3EP16M4_SDIOC_TypeDefPj))
<BR><BR>[Calls]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_GetResponse
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sdmmc_cmd_c]::SDMMC_WaitResponse(M4_SDIOC_TypeDef*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Acmd41_SdSendOpCond
</UL>

<P><STRONG><a name="[151]"></a>[local to sdmmc_cmd_c]::SDMMC_GetCmdResp6(M4_SDIOC_TypeDef*, unsigned*)</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, sdmmc_cmd.o(i._ZN33_INTERNAL_11_sdmmc_cmd_c_1dd5230f17SDMMC_GetCmdResp6EP16M4_SDIOC_TypeDefPj))
<BR><BR>[Calls]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_GetResponse
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sdmmc_cmd_c]::SDMMC_WaitResponse(M4_SDIOC_TypeDef*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Cmd3_SendRelativeAddr
</UL>

<P><STRONG><a name="[156]"></a>[local to sdmmc_cmd_c]::SDMMC_GetCmdResp7(M4_SDIOC_TypeDef*, unsigned*)</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, sdmmc_cmd.o(i._ZN33_INTERNAL_11_sdmmc_cmd_c_1dd5230f17SDMMC_GetCmdResp7EP16M4_SDIOC_TypeDefPj))
<BR><BR>[Calls]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_GetResponse
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sdmmc_cmd_c]::SDMMC_WaitResponse(M4_SDIOC_TypeDef*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Cmd8_SendIfCond
</UL>

<P><STRONG><a name="[146]"></a>[local to sdmmc_cmd_c]::SDMMC_WaitBusIdle(M4_SDIOC_TypeDef*)</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, sdmmc_cmd.o(i._ZN33_INTERNAL_11_sdmmc_cmd_c_1dd5230f17SDMMC_WaitBusIdleEP16M4_SDIOC_TypeDef))
<BR><BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_GetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Cmd9_SendCSD
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Cmd8_SendIfCond
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Cmd7_SelectDeselectCard
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Cmd6_SwitchFunc
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Cmd55_AppCmd
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Cmd3_SendRelativeAddr
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Cmd2_AllSendCID
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Cmd25_WriteMultipleBlock
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Cmd24_WriteSingleBlock
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Cmd18_ReadMultipleBlock
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Cmd17_ReadSingleBlock
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Cmd16_SetBlockLength
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Cmd13_SendStatus
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Cmd0_GoIdleState
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Acmd6_SetBusWidth
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Acmd41_SdSendOpCond
</UL>

<P><STRONG><a name="[14c]"></a>[local to sdmmc_cmd_c]::SDMMC_WaitResponse(M4_SDIOC_TypeDef*, unsigned)</STRONG> (Thumb, 172 bytes, Stack size 0 bytes, sdmmc_cmd.o(i._ZN33_INTERNAL_11_sdmmc_cmd_c_1dd5230f18SDMMC_WaitResponseEP16M4_SDIOC_TypeDefj))
<BR><BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_GetNormalIrqFlag
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_ClearNormalIrqFlag
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sdmmc_cmd_c]::SDMMC_GetCardDetection(M4_SDIOC_TypeDef*)
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sdmmc_cmd_c]::SDMMC_GetCmdResp7(M4_SDIOC_TypeDef*, unsigned*)
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sdmmc_cmd_c]::SDMMC_GetCmdResp6(M4_SDIOC_TypeDef*, unsigned*)
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sdmmc_cmd_c]::SDMMC_GetCmdResp3(M4_SDIOC_TypeDef*, unsigned*)
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sdmmc_cmd_c]::SDMMC_GetCmdResp2(M4_SDIOC_TypeDef*, unsigned*)
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sdmmc_cmd_c]::SDMMC_GetCmdResp1(M4_SDIOC_TypeDef*, unsigned*, unsigned)
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Cmd0_GoIdleState
</UL>

<P><STRONG><a name="[3da]"></a>[local to sdmmc_cmd_c]::SDMMC_GetCardDetection(M4_SDIOC_TypeDef*)</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, sdmmc_cmd.o(i._ZN33_INTERNAL_11_sdmmc_cmd_c_1dd5230f22SDMMC_GetCardDetectionEP16M4_SDIOC_TypeDef))
<BR><BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_GetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sdmmc_cmd_c]::SDMMC_WaitResponse(M4_SDIOC_TypeDef*, unsigned)
</UL>

<P><STRONG><a name="[44c]"></a>_fp_digits</STRONG> (Thumb, 366 bytes, Stack size 0 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>
<BR>[Called By]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[43e]"></a>_printf_core</STRONG> (Thumb, 1704 bytes, Stack size 0 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
</UL>

<P><STRONG><a name="[44e]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[44d]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[ad]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0sprintf)
</UL>
<P><STRONG><a name="[107]"></a>_local_sscanf</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, strtod.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_real
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtod_int
</UL>

<P><STRONG><a name="[109]"></a>_fp_value</STRONG> (Thumb, 296 bytes, Stack size 0 bytes, scanf_fp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
